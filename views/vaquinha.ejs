<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crie sua Vaquinha - pagjunto</title>
    <meta name="description" content="Crie um link de pagamento compartilhado em segundos. Informe o valor, seu nome, sua chave Pix e comece a receber da galera.">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <style>
        /* ------------------- */
        /* --- CSS Reset & Variables --- */
        /* ------------------- */
        :root {
            --bg-light: #FFFFFF;
            --bg-secondary: #F9FAFB;
            --bg-dark: #0A0A0A;
            --text-light: #F5F5F7;
            --text-dark: #1D1D1F;
            --text-muted-light: #A1A1A6;
            --text-muted-dark: #555555;
            --accent: #0066CC;
            --accent-hover: #0052A3;
            --success: #16a34a;
            --danger: #dc2626;
            --border-light: #E5E5E5;
            --border-dark: #2A2A2A;
            --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        }

        *, *::before, *::after {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html {
            scroll-behavior: smooth;
        }

        body {
            background-color: var(--bg-light);
            color: var(--text-dark);
            font-family: var(--font-sans);
            line-height: 1.6;
            font-size: 16px;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            position: relative;
        }
        
        /* --- Animated Gradient Background --- */
        .gradient-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            z-index: -1;
        }

        .gradient-blob {
            position: absolute;
            border-radius: 50%;
            filter: blur(100px);
            opacity: 0.3;
        }

        .blob1 {
            width: 500px;
            height: 500px;
            background: #ffc3a0;
            animation: move 25s infinite alternate;
        }

        .blob2 {
            width: 400px;
            height: 400px;
            background: #c471ed;
            animation: move 30s infinite alternate-reverse;
        }

        .blob3 {
            width: 300px;
            height: 300px;
            background: #12c2e9;
            animation: move 20s infinite alternate;
        }

        @keyframes move {
            0% { transform: translate(-100px, -50px) scale(1); }
            50% { transform: translate(200px, 100px) scale(1.2); }
            100% { transform: translate(50px, -150px) scale(0.9); }
        }

        /* ------------------- */
        /* --- Layout & Main Structure --- */
        /* ------------------- */
        .main-header {
            padding: 1.25rem 0;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            z-index: 1000;
            background-color: rgba(255, 255, 255, 0.7);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid var(--border-light);
        }

        .container {
            width: 100%;
            max-width: 1140px;
            margin-left: auto;
            margin-right: auto;
            padding-left: 2rem;
            padding-right: 2rem;
        }

        .logo {
            font-weight: 700;
            font-size: 1.3rem;
            text-decoration: none;
            color: var(--text-dark);
        }

        main {
            flex-grow: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 8rem 2rem 4rem; /* Add padding top to account for fixed header */
        }

        .form-container {
            width: 100%;
            max-width: 480px;
            background-color: rgba(255, 255, 255, 0.8);
            -webkit-backdrop-filter: blur(10px);
            backdrop-filter: blur(10px);
            padding: 3rem;
            border-radius: 24px;
            border: 1px solid rgba(255, 255, 255, 0.5);
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            text-align: center;
        }

        h1 {
            font-size: 2.25rem;
            font-weight: 800;
            letter-spacing: -0.03em;
            margin-bottom: 1rem;
        }

        .form-container p {
            color: var(--text-muted-dark);
            margin-bottom: 2.5rem;
            font-size: 1.1rem;
        }

        /* ------------------- */
        /* --- Form Elements --- */
        /* ------------------- */
        .form-group {
            margin-bottom: 1.5rem;
            text-align: left;
        }

        label {
            display: block;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
        }

        .input-wrapper {
            position: relative;
        }

        .input-wrapper .icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted-dark);
            pointer-events: none;
        }

        input[type="text"], input[type="number"] {
            width: 100%;
            padding: 0.9rem 1rem 0.9rem 2.75rem; /* Padding for icon */
            border-radius: 10px;
            border: 1px solid var(--border-light);
            background: rgba(255, 255, 255, 0.7);
            font-family: inherit;
            font-size: 1rem;
            transition: all 0.2s ease;
        }

        input:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
        }
        
        input.is-invalid {
            border-color: var(--danger);
            box-shadow: 0 0 0 3px rgba(220, 38, 38, 0.1);
        }

        .error-message {
            color: var(--danger);
            font-size: 0.85rem;
            margin-top: 0.5rem;
            display: none; /* Hidden by default */
        }
        
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-family: var(--font-sans);
            font-size: 1.05rem;
            font-weight: 600;
            padding: 1rem 2rem;
            border-radius: 12px;
            border: 1px solid transparent;
            cursor: pointer;
            text-decoration: none;
            transition: all 0.2s ease-in-out;
            width: 100%;
            margin-top: 1rem;
        }
        
        .btn-primary {
            background-color: var(--accent);
            color: var(--text-light);
            border-color: var(--accent);
        }
        .btn-primary:hover {
            background-color: var(--accent-hover);
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 102, 204, 0.2);
        }
        .btn:disabled {
            background-color: #a1a1a6;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        /* ------------------- */
        /* --- Result Section --- */
        /* ------------------- */
        #result-section {
            display: none; /* Hidden by default */
            margin-top: 2.5rem;
            padding: 1.5rem;
            background-color: var(--bg-secondary);
            border-radius: 12px;
            border: 1px solid var(--border-light);
        }

        #result-section h3 {
            font-size: 1.1rem;
            color: var(--success);
            margin-bottom: 1rem;
        }

        .link-wrapper {
            display: flex;
            gap: 0.5rem;
        }

        #vaquinha-link {
            flex-grow: 1;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            border: 1px solid var(--border-light);
            background: #fff;
            font-size: 0.9rem;
            color: var(--text-dark);
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        #copy-button {
            padding: 0.75rem 1rem;
            font-size: 0.9rem;
            font-weight: 600;
            border-radius: 8px;
            border: 1px solid var(--accent);
            background-color: var(--accent);
            color: #fff;
            cursor: pointer;
            transition: background-color 0.2s ease;
            flex-shrink: 0;
        }
        #copy-button:hover {
            background-color: var(--accent-hover);
        }
        
        /* ------------------- */
        /* --- Footer --- */
        /* ------------------- */
        footer {
            padding: 3rem 0;
            background-color: transparent;
            color: var(--text-muted-dark);
            text-align: center;
        }
        footer p {
            font-size: 0.9rem;
        }

    </style>
</head>
<body>
    <div class="gradient-bg">
        <div class="gradient-blob blob1"></div>
        <div class="gradient-blob blob2"></div>
        <div class="gradient-blob blob3"></div>
    </div>

    <header class="main-header">
        <div class="container">
            <a href="/" class="logo">pagjunto</a>
        </div>
    </header>

    <main>
        <div class="form-container">
            <h1>Crie sua vaquinha</h1>
            <p>Preencha os dados e gere seu link de pagamento na hora.</p>
            
            <form id="vaquinha-form">
                <div class="form-group">
                    <label for="nome">Seu nome</label>
                    <div class="input-wrapper">
                        <i class="fas fa-user icon"></i>
                        <input type="text" id="nome" name="nome" placeholder="Como seus amigos te chamam?" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="valor">Valor total (R$)</label>
                    <div class="input-wrapper">
                        <i class="fas fa-dollar-sign icon"></i>
                        <input type="number" id="valor" name="valor" placeholder="Ex: 150.00" step="0.01" min="1" required>
                    </div>
                </div>
                <div class="form-group">
                    <label for="pix-key">Sua chave Pix</label>
                    <div class="input-wrapper">
                        <i class="fas fa-key icon"></i>
                        <input type="text" id="pix-key" name="pix-key" placeholder="CPF, celular, e-mail ou aleatória" required>
                    </div>
                    <div id="pix-error" class="error-message">
                        <i class="fas fa-exclamation-circle"></i> Chave Pix inválida. Verifique o formato.
                    </div>
                </div>

                <button type="submit" id="submit-button" class="btn btn-primary">Gerar link da vaquinha</button>
            </form>

            <div id="result-section">
                <h3><i class="fas fa-check-circle"></i> Link gerado com sucesso!</h3>
                <p style="margin-bottom: 1rem;">Compartilhe com seus amigos:</p>
                <div class="link-wrapper">
                    <input type="text" id="vaquinha-link" readonly>
                    <button id="copy-button">Copiar link</button>
                </div>
            </div>
        </div>
    </main>

    <footer>
        <div class="container">
             <p>&copy; 2025 Pagjunto. Todos os direitos reservados.</p>
        </div>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const form = document.getElementById('vaquinha-form');
            const pixInput = document.getElementById('pix-key');
            const pixError = document.getElementById('pix-error');
            const resultSection = document.getElementById('result-section');
            const linkInput = document.getElementById('vaquinha-link');
            const copyButton = document.getElementById('copy-button');

            /**
             * Valida a chave Pix com base nos formatos mais comuns.
             * @param {string} chave - A chave Pix a ser validada.
             * @returns {boolean} - True se a chave for válida, false caso contrário.
             */
            const validarChavePix = (chave) => {
                if (!chave) return false;

                // Remove caracteres especiais para CPF/CNPJ/Telefone
                const chaveLimpa = chave.replace(/[.\-\/() ]/g, '');

                // 1. CPF (11 dígitos numéricos)
                if (/^\d{11}$/.test(chaveLimpa)) {
                    return true;
                }
                // 2. CNPJ (14 dígitos numéricos)
                if (/^\d{14}$/.test(chaveLimpa)) {
                    return true;
                }
                // 3. Celular (formato +55 DDD NÚMERO)
                if (/^\+55\d{10,11}$/.test(chave.replace(/[()\- ]/g, ''))) {
                    return true;
                }
                // 4. E-mail
                const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
                if (emailRegex.test(chave)) {
                    return true;
                }
                // 5. Chave Aleatória (formato UUID)
                const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
                if (uuidRegex.test(chave)) {
                    return true;
                }

                return false;
            };

            // Adiciona validação em tempo real enquanto o usuário digita
            pixInput.addEventListener('input', () => {
                if (pixInput.value && !validarChavePix(pixInput.value)) {
                    pixInput.classList.add('is-invalid');
                    pixError.style.display = 'block';
                } else {
                    pixInput.classList.remove('is-invalid');
                    pixError.style.display = 'none';
                }
            });

            form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const nome = document.getElementById('nome').value;
    const valor = parseFloat(document.getElementById('valor').value);
    const chavePix = pixInput.value;

    // Validação final antes de submeter
    if (!validarChavePix(chavePix)) {
        pixInput.classList.add('is-invalid');
        pixError.style.display = 'block';
        pixInput.focus();
        return;
    }

    const submitButton = document.getElementById('submit-button');
    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Criando...';
    submitButton.disabled = true;

    try {
        const payload = {
            name: nome,
            totalValue: valor,
            userKey: chavePix
        };

        const response = await fetch(`<%=process.env.API_SITE_URL%>/order`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            throw new Error((await response.json()).message || 'Erro ao criar vaquinha.');
        }

        const data = await response.json();
        const generatedLink = `<%=process.env.SITE_URL%>/${data}`;

        linkInput.value = generatedLink;
        resultSection.style.display = 'block';
        form.style.display = 'none';

    } catch (error) {
        console.error('Erro ao criar vaquinha:', error);
        alert(error.message);
    } finally {
        submitButton.innerHTML = 'Gerar link da vaquinha';
        submitButton.disabled = false;
    }
});


            copyButton.addEventListener('click', () => {
                linkInput.select();
                // document.execCommand é usado para compatibilidade, pois navigator.clipboard pode ser bloqueado em iframes
                try {
                    document.execCommand('copy');
                    copyButton.textContent = 'Copiado!';
                    setTimeout(() => {
                        copyButton.textContent = 'Copiar link';
                    }, 2000);
                } catch (err) {
                    console.error('Falha ao copiar o link: ', err);
                }
            });
        });
    </script>
</body>
</html>
