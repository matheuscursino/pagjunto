<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard do Parceiro - <% if (typeof partnerData.partnerName !== 'undefined') { %><%= partnerData.partnerName %><% } else { %>PagJunto Corporativo<% } %></title>

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="manifest" href="/site.webmanifest">
    <style>
        /* [SEU CSS PERMANECE O MESMO - OMITIDO PARA BREVIDADE] */
        :root {
            --primary-color: #0d6efd; --primary-dark: #0b5ed7; --secondary-color: #6c757d; --status-paid-text: #146c43; --status-paid-bg: #d1e7dd; --status-progress-text: #664d03; --status-progress-bg: #fff3cd; --status-fresh-text: #41464b; --status-fresh-bg: #e2e3e5; --status-danger-text: #b02a37; --status-danger-bg: #f8d7da; --text-primary: #212529; --text-secondary: #495057; --text-muted: #6c757d; --bg-primary: #f8f9fa; --bg-secondary: #e9ecef; --bg-card: #ffffff; --border-light: #dee2e6; --border-medium: #ced4da; --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05); --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.07), 0 2px 4px -2px rgba(0, 0, 0, 0.07); --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.07), 0 4px 6px -4px rgba(0, 0, 0, 0.07); --radius-sm: 4px; --radius-md: 6px; --radius-lg: 8px; --radius-xl: 12px;
        }
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Inter', sans-serif; background-color: var(--bg-primary); color: var(--text-secondary); line-height: 1.6; font-size: 14px; display: flex; flex-direction: column; min-height: 100vh; -webkit-font-smoothing: antialiased; }
        .header { background: var(--bg-card); color: var(--text-primary); padding: 0; box-shadow: var(--shadow-sm); border-bottom: 1px solid var(--border-light); position: sticky; top: 0; z-index: 1020; }
        .header-content { max-width: 1400px; margin: 0 auto; padding: 16px 32px; display: flex; justify-content: space-between; align-items: center; }
        .logo { display: flex; align-items: center; gap: 12px; text-decoration: none; color: var(--text-primary); font-weight: 700; font-size: 20px; }
        .user-section { display: flex; align-items: center; gap: 24px; }
        .user-info { display: flex; align-items: center; gap: 12px; font-size: 14px; font-weight: 500; }
        .user-avatar { width: 36px; height: 36px; background-color: var(--bg-secondary); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 14px; font-weight: 600; color: var(--primary-color); }
        .logout-btn { color: var(--text-muted); text-decoration: none; font-size: 13px; padding: 8px 12px; border-radius: var(--radius-md); transition: all 0.2s ease; display: flex; align-items: center; gap: 8px; }
        .logout-btn:hover { color: var(--primary-color); background-color: var(--bg-secondary); }
        .main-content { flex: 1; max-width: 1400px; margin: 0 auto; padding: 40px 32px; width: 100%; }
        .page-header { margin-bottom: 40px; }
        .page-title { font-size: 32px; font-weight: 700; color: var(--text-primary); }
        .page-subtitle { font-size: 16px; color: var(--text-muted); }
        .metric-card, .chart-card, .content-section, .create-order-section { background: var(--bg-card); border-radius: var(--radius-lg); padding: 24px; box-shadow: var(--shadow-md); border: 1px solid var(--border-light); }
        .section-header { display: flex; align-items: center; gap: 16px; margin-bottom: 24px; }
        .section-icon { width: 40px; height: 40px; background-color: rgba(13, 110, 253, 0.1); border-radius: var(--radius-md); display: flex; align-items: center; justify-content: center; color: var(--primary-color); font-size: 18px; }
        .section-title { font-size: 20px; font-weight: 600; color: var(--text-primary); }
        .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 24px; margin-bottom: 40px; }
        .metric-value { font-size: 28px; font-weight: 700; color: var(--text-primary); }
        .metric-title { font-size: 14px; font-weight: 500; color: var(--text-muted); }
        .charts-container { display: grid; grid-template-columns: 2fr 1fr; gap: 24px; margin-bottom: 40px; }
        .chart-wrapper { height: 300px; }
        .table { width: 100%; border-collapse: collapse; }
        .table th, .table td { padding: 16px 20px; text-align: left; border-bottom: 1px solid var(--border-light); }
        .table th { background-color: var(--bg-primary); color: var(--text-muted); font-weight: 600; font-size: 12px; text-transform: uppercase; }
        .status-badge { display: inline-flex; align-items: center; padding: 4px 12px; border-radius: var(--radius-sm); font-size: 12px; font-weight: 600; text-transform: capitalize; }
        .status-badge.fresh { background-color: var(--status-fresh-bg); color: var(--status-fresh-text); }
        .status-badge.progress { background-color: var(--status-progress-bg); color: var(--status-progress-text); }
        .status-badge.paid { background-color: var(--status-paid-bg); color: var(--status-paid-text); }
        .copy-btn { background: #007bff; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; display: flex; align-items: center; gap: 4px; transition: all 0.2s; }
        .copy-btn.copied { background: #28a745; }
        .form-input { width: 100%; padding: 12px 16px; border: 1px solid var(--border-medium); border-radius: var(--radius-md); font-size: 16px; }
        .btn-primary { background-color: var(--primary-color); color: white; border: 1px solid var(--primary-color); padding: 12px 24px; border-radius: var(--radius-md); font-size: 15px; font-weight: 500; cursor: pointer; transition: all 0.2s ease; }
        .btn-primary:hover { background-color: var(--primary-dark); }
        .toast { position: fixed; top: 80px; right: 20px; background: #28a745; color: white; padding: 12px 20px; border-radius: 4px; box-shadow: 0 4px 12px rgba(0,0,0,0.2); transform: translateX(120%); transition: transform 0.3s ease; z-index: 1000; }
        .toast.show { transform: translateX(0); }
        .order-result { margin-top: 24px; padding: 16px 20px; background-color: var(--status-paid-bg); border-radius: var(--radius-md); color: var(--status-paid-text); display: none; align-items: center; justify-content: space-between; }
        .order-link { color: var(--status-paid-text); word-break: break-all; text-decoration: underline; }
        .btn-copy { background: rgba(0, 0, 0, 0.05); color: var(--status-paid-text); border: 1px solid rgba(0, 0, 0, 0.1); padding: 6px 12px; border-radius: var(--radius-sm); font-size: 12px; font-weight: 600; cursor: pointer; }
        .loading-placeholder { text-align: center; padding: 40px; color: var(--text-muted); font-style: italic; }
        @media (max-width: 1024px) { .charts-container { grid-template-columns: 1fr; } }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <a href="/" class="logo"><span>pagjunto</span></a>
            <div class="user-section">
                <div class="user-info">
                    <div class="user-avatar"><i class="fas fa-user"></i></div>
                    <span>Olá, <% if (typeof partnerData.partnerName !== 'undefined') { %><%= partnerData.partnerName %><% } else { %>Parceiro<% } %></span>
                </div>
                <a href="/logout" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Sair</a>
            </div>
        </div>
    </header>

    <main class="main-content">
        <div class="page-header">
            <h1 class="page-title">Dashboard Executivo</h1>
            <p class="page-subtitle">Visão completa do desempenho da sua conta corporativa</p>
        </div>

        <section class="create-order-section" style="margin-bottom: 40px;">
            <div class="section-header">
                <div class="section-icon"><i class="fa-regular fa-square-plus"></i></div>
                <h2 class="section-title">Criar Nova Ordem</h2>
            </div>
            <form id="newOrderForm">
                <input type="number" id="totalValue" class="form-input" required placeholder="Ex: 150.00" style="margin-bottom: 1rem;">
                <button type="submit" class="btn-primary"><i class="fas fa-plus"></i> Gerar Ordem</button>
            </form>
            <div id="orderCreationResult" class="order-result">
                <div>
                    <p>Link da Ordem Criada:</p>
                    <a id="orderLink" href="#" target="_blank" class="order-link"></a>
                </div>
                <button id="copyLinkButton" class="btn-copy"><i class="fas fa-copy"></i> Copiar</button>
            </div>
        </section>

        <div class="metrics-grid">
            <div class="metric-card"><span class="metric-title">Vendas Totais</span><div class="metric-value" id="totalSalesValue">--</div></div>
            <div class="metric-card"><span class="metric-title">Valor Recebido</span><div class="metric-value" id="totalPaidValue">--</div></div>
            <div class="metric-card"><span class="metric-title">Total de Ordens</span><div class="metric-value" id="totalOrdersValue">--</div></div>
            <div class="metric-card"><span class="metric-title">Pagamentos Individuais</span><div class="metric-value" id="totalPayersValue">--</div></div>
            <div class="metric-card"><span class="metric-title">Ticket Médio</span><div class="metric-value" id="averageTicketValue">--</div></div>
            <div class="metric-card"><span class="metric-title">Taxa de Conversão</span><div class="metric-value" id="conversionRateValue">--</div></div>
        </div>

        <div class="charts-container">
            <div class="chart-card">
                <h3>Tendência de Vendas (Últimos 100 pedidos)</h3>
                <div class="chart-wrapper"><canvas id="salesChart"></canvas></div>
            </div>
            <div class="chart-card">
                <h3>Status das Ordens</h3>
                <div class="chart-wrapper"><canvas id="statusChart"></canvas></div>
            </div>
        </div>

        <section class="content-section">
            <div class="section-header">
                <div class="section-icon"><i class="fas fa-list-alt"></i></div>
                <h2 class="section-title">Ordens Recentes</h2>
            </div>
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID da Ordem</th>
                            <th>Valor Total</th>
                            <th>Valor Pago</th>
                            <th>Status</th>
                            <th>Link</th>
                        </tr>
                    </thead>
                    <tbody id="recentOrdersBody">
                        <tr><td colspan="5" class="loading-placeholder">Carregando dados...</td></tr>
                    </tbody>
                </table>
            </div>
        </section>
        
        <div id="copyToast" class="toast"></div>
    </main>
    
    <footer class="footer" style="text-align: center; padding: 24px; margin-top: 48px;">
        <p>&copy; <%= new Date().getFullYear() %> PagJunto. Todos os direitos reservados.</p>
    </footer>

<script>
// =======================================================================
// DADOS INICIAIS INJETADOS PELO SERVIDOR (EJS)
// =======================================================================
// O JavaScript agora recebe os dados já processados e agregados pelo backend.
const initialStats = <%- JSON.stringify(stats || {}) %>;
const recentOrders = <%- JSON.stringify(orders || []) %>;
const localPartnerId = "<%= partnerData.partnerId %>";
const localPartnerApiKey = "<%= partnerData.apiKey %>";

let salesChart, statusChart; // Variáveis globais para os gráficos

// =======================================================================
// FUNÇÕES DE ATUALIZAÇÃO DA INTERFACE (UI)
// =======================================================================

/**
 * Função central que popula todo o dashboard com base nos dados fornecidos.
 * @param {object} stats - O objeto com as estatísticas agregadas.
 * @param {Array} orders - O array com as ordens recentes.
 */
function populateDashboard(stats, orders) {
    if (!stats || !orders) {
        console.error("Dados inválidos para popular o dashboard.");
        return;
    }
    
    // 1. Atualiza os cards de métricas
    updateMetricCards(stats);

    // 2. Atualiza os gráficos
    updateCharts(stats, orders);

    // 3. Atualiza a tabela (necessário após criar nova ordem)
    updateRecentOrdersTable(orders);
}

function updateMetricCards(stats) {
    // Calcula métricas derivadas no cliente (leve, pois usa dados já agregados)
    const averageTicket = stats.totalOrders > 0 ? (stats.totalValue / stats.totalOrders) : 0;
    const conversionRate = stats.totalOrders > 0 ? (stats.paidOrders / stats.totalOrders) * 100 : 0;
    const balance = "<%= Number(balance.data.available_amount) + Number(balance.data.waiting_funds_amount) %>";

    // Preenche os elementos do DOM
    document.getElementById('accountBalanceValue').textContent = formatCurrencyFromCents(balance);
    document.getElementById('totalSalesValue').textContent = formatCurrency(stats.totalValue);
    document.getElementById('totalPaidValue').textContent = formatCurrency(stats.paidValue);
    document.getElementById('totalOrdersValue').textContent = formatNumber(stats.totalOrders);
    document.getElementById('paidOrdersValue').textContent = formatNumber(stats.paidOrders);
    document.getElementById('newOrdersValue').textContent = formatNumber(stats.freshOrders);
    document.getElementById('progressOrdersValue').textContent = formatNumber(stats.progressOrders);
    document.getElementById('averageTicketValue').textContent = formatCurrency(averageTicket);
    document.getElementById('conversionRateValue').textContent = `${conversionRate.toFixed(1).replace('.', ',')}%`;
    document.getElementById('totalPayersValue').textContent = formatNumber(stats.totalPayers);
}

function updateCharts(stats, orders) {
    // Atualiza gráfico de status (dados diretos do objeto stats)
    if (statusChart) {
        statusChart.data.datasets[0].data = [stats.freshOrders, stats.progressOrders, stats.paidOrders];
        statusChart.update();
    }
    
    // Atualiza gráfico de vendas (usa as ordens recentes para gerar o gráfico de tendência)
    const monthlySales = calculateMonthlySalesData(orders);
    if (salesChart) {
        salesChart.data.labels = monthlySales.labels;
        salesChart.data.datasets[0].data = monthlySales.data;
        salesChart.update();
    }
}

function updateRecentOrdersTable(orders) {
    const tableBody = document.querySelector('.table tbody');
    tableBody.innerHTML = ''; // Limpa a tabela antes de preencher novamente

    if (!orders || orders.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="6" style="text-align:center;padding:2rem;">Nenhuma ordem encontrada.</td></tr>';
        return;
    }

    orders.forEach(order => {
        const row = document.createElement('tr');
        // A lógica de criação da linha é idêntica à do seu loop EJS
        row.innerHTML = `
            <td>${order.orderId}</td>
            <td>${formatCurrency(order.totalValue)}</td>
            <td>${formatCurrency(order.paidValue)}</td>
            <td><span class="status-badge ${order.status}">${order.status}</span></td>
            <td>
                <span class="payer-ids">${(order.payersIds && order.payersIds.length > 0) ? order.payersIds.join(', ') : 'N/A'}</span>
            </td>
            <td>
                <button class="copy-btn" onclick="copyOrderLink(event, '${order.orderId}')">
                    <i class="fas fa-copy"></i> Copiar Link
                </button>
            </td>
        `;
        tableBody.appendChild(row);
    });
}


// =======================================================================
// INICIALIZAÇÃO E EVENTOS
// =======================================================================

document.addEventListener('DOMContentLoaded', function() {
    console.log('Dashboard PagJunto Corporate carregado com dados do servidor.');
    
    // Inicializa os gráficos com a estrutura base
    initializeCharts();
    
    // Popula a interface com os dados que já foram carregados com a página
    populateDashboard(initialStats, recentOrders);

    // Adiciona o listener para o formulário de criação de ordem
    document.getElementById('newOrderForm').addEventListener('submit', handleNewOrderSubmit);

    // O resto dos seus listeners (copiar chave de API, etc.) permanecem aqui
    setupCopyActions();
});

async function handleNewOrderSubmit(e) {
    e.preventDefault();

    const totalValue = document.getElementById('totalValue').value;
    const submitButton = e.target.querySelector('button[type="submit"]');

    if (isNaN(parseFloat(totalValue)) || parseFloat(totalValue) <= 0) {
        alert('Por favor, insira um Valor Total válido.');
        return;
    }
    
    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Criando...';
    submitButton.disabled = true;

    try {
        const response = await fetch('https://api.pagjunto.com/order', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                partnerId: localPartnerId,
                totalValue: parseFloat(totalValue),
                apiKey: localPartnerApiKey
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `Erro HTTP: ${response.status}`);
        }
        
        const orderId = await response.json();

        // Mostra o resultado da criação da ordem
        const orderCreationResult = document.getElementById('orderCreationResult');
        const orderLinkElement = document.getElementById('orderLink');
        const generatedOrderLink = `https://pagjunto.com/${localPartnerId}/${orderId}`;
        orderLinkElement.href = generatedOrderLink;
        orderLinkElement.textContent = generatedOrderLink;
        orderCreationResult.style.display = 'flex';
        document.getElementById('totalValue').value = '';
        showToast('Ordem criada! Atualizando dashboard...');

        // ATUALIZAÇÃO: Após o sucesso, busca os dados mais recentes da API e repopula o dashboard
        const freshData = await fetchDashboardData();
        populateDashboard(freshData.stats, freshData.recentOrders);

    } catch (error) {
        console.error('Erro ao criar ordem:', error);
        alert('Erro ao criar ordem: ' + error.message);
    } finally {
        submitButton.innerHTML = '<i class="fas fa-plus"></i> Gerar Ordem de Pagamento';
        submitButton.disabled = false;
    }
}

/**
 * Função dedicada a buscar os dados da API. Usada para atualizações após ações do usuário.
 */
async function fetchDashboardData() {
    const response = await fetch('/getOrdersByPartner', { // Use o endpoint da sua API que retorna os dados
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ partnerId: localPartnerId })
    });
    if (!response.ok) throw new Error('Falha ao buscar novos dados do dashboard');
    return await response.json();
}

// =======================================================================
// FUNÇÕES AUXILIARES E DE GRÁFICOS (Sem grandes alterações)
// =======================================================================

function calculateMonthlySalesData(orders) {
    const monthlyData = {};
    const months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];
    orders.forEach((order) => {
        if (!order.createdAt) return;
        const orderDate = new Date(order.createdAt);
        const key = `${months[orderDate.getMonth()]}/${orderDate.getFullYear().toString().substr(-2)}`;
        monthlyData[key] = (monthlyData[key] || 0) + (order.totalValue || 0);
    });
    return {
        labels: Object.keys(monthlyData).reverse(),
        data: Object.values(monthlyData).reverse()
    };
}

function initializeCharts() {
    // Código para inicializar os gráficos (igual ao da resposta anterior)
    const salesCtx = document.getElementById('salesChart').getContext('2d');
    salesChart = new Chart(salesCtx, { type: 'line', data: { labels: [], datasets: [{ label: 'Vendas Totais (R$)', data: [], borderColor: 'var(--primary-color)', tension: 0.4, fill: true }] }, options: { responsive: true, maintainAspectRatio: false } });
    const statusCtx = document.getElementById('statusChart').getContext('2d');
    statusChart = new Chart(statusCtx, { type: 'doughnut', data: { labels: ['Novas', 'Em Progresso', 'Pagas'], datasets: [{ data: [1, 1, 1], backgroundColor: ['var(--status-fresh-text)','var(--status-progress-text)','var(--status-paid-text)'], borderWidth: 0 }] }, options: { responsive: true, maintainAspectRatio: false, cutout: '60%' } });
}

// Funções de formatação e utilitários (copiar, toast, etc.)
function formatCurrency(value) { return (Number(value) || 0).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }
function formatCurrencyFromCents(cents) { return ((Number(cents) || 0) / 100).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' }); }
function formatNumber(value) { return (Number(value) || 0).toLocaleString('pt-BR'); }
function copyOrderLink(event, orderId) { const url = `https://pagjunto.com/${localPartnerId}/${orderId}`; navigator.clipboard.writeText(url).then(() => showToast('Link da ordem copiado!')); const btn = event.target.closest('button'); btn.innerHTML = '<i class="fas fa-check"></i> Copiado!'; setTimeout(() => btn.innerHTML = '<i class="fas fa-copy"></i> Copiar Link', 2000); }
function showToast(message) { const toast = document.getElementById('copyToast'); toast.textContent = message; toast.classList.add('show'); setTimeout(() => toast.classList.remove('show'), 3000); }
function setupCopyActions() { document.getElementById('copyLinkButton').addEventListener('click', function() { navigator.clipboard.writeText(document.getElementById('orderLink').href).then(() => showToast('Link da Ordem Criada copiado!')); }); document.getElementById('copyApiKeyButton')?.addEventListener('click', function() { navigator.clipboard.writeText(document.getElementById('apiKeyInput').value).then(() => showToast('Chave de API copiada!')); }); }

</script>
</body>
</html>