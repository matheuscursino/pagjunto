<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard do Parceiro - <% if (typeof partnerData.partnerName !== 'undefined') { %><%= partnerData.partnerName %><% } else { %>PagJunto Corporativo<% } %></title>

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>
        /* --- Variáveis CSS - Tema Corporativo --- */
        :root {
            --primary-color: #0d6efd;
            --primary-dark: #0b5ed7;
            --secondary-color: #6c757d;
            
            --status-paid-text: #146c43;
            --status-paid-bg: #d1e7dd;
            --status-progress-text: #664d03;
            --status-progress-bg: #fff3cd;
            --status-fresh-text: #41464b;
            --status-fresh-bg: #e2e3e5;
            --status-danger-text: #b02a37;
            --status-danger-bg: #f8d7da;

            --text-primary: #212529;
            --text-secondary: #495057;
            --text-muted: #6c757d;
            
            --bg-primary: #f8f9fa;
            --bg-secondary: #e9ecef;
            --bg-card: #ffffff;
            
            --border-light: #dee2e6;
            --border-medium: #ced4da;

            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.07), 0 2px 4px -2px rgba(0, 0, 0, 0.07);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.07), 0 4px 6px -4px rgba(0, 0, 0, 0.07);
            
            --radius-sm: 4px;
            --radius-md: 6px;
            --radius-lg: 8px;
            --radius-xl: 12px;
        }

        /* --- Reset e Base --- */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background-color: var(--bg-primary);
            color: var(--text-secondary);
            line-height: 1.6;
            font-size: 14px;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        /* --- Header Corporativo --- */
        .header {
            background: var(--bg-card);
            color: var(--text-primary);
            padding: 0;
            box-shadow: var(--shadow-sm);
            border-bottom: 1px solid var(--border-light);
            position: sticky;
            top: 0;
            z-index: 1020;
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 16px 32px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 12px;
            text-decoration: none;
            color: var(--text-primary);
            font-weight: 700;
            font-size: 20px;
        }

        .logo-icon {
            width: 32px;
            height: 32px;
            background-color: var(--primary-color);
            border-radius: var(--radius-md);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            color: white;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 24px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 14px;
            font-weight: 500;
            color: var(--text-secondary);
        }

        .user-avatar {
            width: 36px;
            height: 36px;
            background-color: var(--bg-secondary);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: 600;
            color: var(--primary-color);
        }

        .logout-btn {
            color: var(--text-muted);
            text-decoration: none;
            font-size: 13px;
            padding: 8px 12px;
            border-radius: var(--radius-md);
            transition: color 0.2s ease, background-color 0.2s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .logout-btn:hover {
            color: var(--primary-color);
            background-color: var(--bg-secondary);
        }

        /* --- Container Principal --- */
        .main-content {
            flex: 1;
            max-width: 1400px;
            margin: 0 auto;
            padding: 40px 32px;
            width: 100%;
        }

        /* --- Título Principal --- */
        .page-header {
            margin-bottom: 40px;
        }

        .page-title {
            font-size: 32px;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 8px;
            letter-spacing: -0.02em;
        }

        .page-subtitle {
            font-size: 16px;
            color: var(--text-muted);
            font-weight: 400;
        }

        /* --- Seções de Conteúdo e Cards --- */
        .create-order-section, .metric-card, .chart-card, .content-section {
            background: var(--bg-card);
            border-radius: var(--radius-lg);
            padding: 24px;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-light);
            transition: all 0.3s ease;
        }

        .metric-card:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-lg);
        }

        /* --- Seção de Nova Ordem --- */
        .create-order-section {
            padding: 32px;
            margin-bottom: 40px;
        }
        
        .section-header {
            display: flex;
            align-items: center;
            gap: 16px;
            margin-bottom: 24px;
        }

        .section-icon {
            width: 40px;
            height: 40px;
    background-color: rgba(13, 110, 253, 0.1); 
            opacity: 0.9;
            border-radius: var(--radius-md);
            display: flex;
            align-items: center;
            justify-content: center;
    color:rgb(0, 0, 0);"; /* A cor do ícone permanece sólida */
            font-size: 18px;
        }

        .section-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--text-primary);
        }

        .form-group {
            margin-bottom: 24px;
        }

        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            color: var(--text-primary);
            margin-bottom: 8px;
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--border-medium);
            border-radius: var(--radius-md);
            font-size: 16px;
            font-weight: 400;
            color: var(--text-primary);
            background-color: var(--bg-card);
            transition: border-color 0.2s ease, box-shadow 0.2s ease;
            outline: none;
        }

        .form-input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.25);
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
            border: 1px solid var(--primary-color);
            padding: 12px 24px;
            border-radius: var(--radius-md);
            font-size: 15px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            box-shadow: var(--shadow-sm);
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            border-color: var(--primary-dark);
            box-shadow: var(--shadow-md);
        }
        
        .btn-primary:active {
            transform: translateY(1px);
        }


        /* --- Resultado da Ordem --- */
        .order-result {
            margin-top: 24px;
            padding: 16px 20px;
            background-color: var(--status-paid-bg);
            border-radius: var(--radius-md);
            color: var(--status-paid-text);
            display: none;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 16px;
            border: 1px solid rgba(20, 108, 67, 0.2);
        }

        .order-result-text {
            font-weight: 500;
            font-size: 14px;
        }

        .order-link {
            color: var(--status-paid-text);
            word-break: break-all;
            text-decoration: underline;
            font-weight: 500;
        }

        .btn-copy {
            background: rgba(0, 0, 0, 0.05);
            color: var(--status-paid-text);
            border: 1px solid rgba(0, 0, 0, 0.1);
            padding: 6px 12px;
            border-radius: var(--radius-sm);
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .btn-copy:hover {
            background: rgba(0, 0, 0, 0.1);
        }

        /* --- Cards de Métricas --- */
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 24px;
            margin-bottom: 40px;
        }
        
        .metric-card {
            padding: 24px;
        }
        
        .metric-header {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            margin-bottom: 12px;
        }

        .metric-title {
            font-size: 14px;
            font-weight: 500;
            color: var(--text-muted);
        }

        .metric-icon {
            width: 40px;
            height: 40px;
            background-color: var(--bg-secondary);
            border-radius: var(--radius-md);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-muted);
            font-size: 16px;
        }

        .metric-value {
            font-size: 28px;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 4px;
            letter-spacing: -0.02em;
        }

        .metric-subtitle {
            font-size: 13px;
            color: var(--text-muted);
            font-weight: 400;
        }

        /* --- Grid de Gráficos --- */
        .charts-container {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 24px;
            margin-bottom: 40px;
        }

        .chart-card {
            padding: 24px;
        }

        .chart-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 24px;
        }

        .chart-wrapper {
            height: 300px; /* Reduced height for a tighter design */
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* --- Tabela Moderna --- */
        .content-section {
            padding: 32px;
        }
        
        .table-container {
            overflow: hidden;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }

        .table th, .table td {
            padding: 16px 20px;
            text-align: left;
            border-bottom: 1px solid var(--border-light);
            vertical-align: middle;
        }

        .table th {
            background-color: var(--bg-primary);
            color: var(--text-muted);
            font-weight: 600;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .table td {
            color: var(--text-secondary);
            font-weight: 500;
        }
        
        .table td:first-child {
            color: var(--text-primary);
            font-weight: 600;
        }

        .table tbody tr {
            transition: background-color 0.2s ease;
        }

        .table tbody tr:hover {
            background-color: var(--bg-primary);
        }

        .table tbody tr:last-child td {
            border-bottom: none;
        }

        /* --- Status Badges --- */
        .status-badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 12px;
            border-radius: var(--radius-sm);
            font-size: 12px;
            font-weight: 600;
            text-transform: capitalize;
            min-width: 90px;
            justify-content: center;
        }

        .status-badge.fresh {
            background-color: var(--status-fresh-bg);
            color: var(--status-fresh-text);
        }

        .status-badge.progress {
            background-color: var(--status-progress-bg);
            color: var(--status-progress-text);
        }

        .status-badge.paid {
            background-color: var(--status-paid-bg);
            color: var(--status-paid-text);
        }

        /* --- Payer IDs --- */
        .payer-ids {
            font-size: 13px;
            color: var(--text-muted);
            font-family: "SF Mono", "Menlo", "Monaco", "Consolas", "Liberation Mono", "Courier New", monospace;
            display: inline-block;
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            vertical-align: middle;
        }

        .payer-ids:empty::before {
            content: "N/A";
            color: var(--text-muted);
            font-style: italic;
        }

        /* --- Footer --- */
        .footer {
            background-color: var(--bg-secondary);
            color: var(--text-muted);
            text-align: center;
            padding: 24px 32px;
            margin-top: 48px;
            font-size: 13px;
            border-top: 1px solid var(--border-light);
        }

        .footer p {
            margin: 0;
        }

        .footer a {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
        }

        .footer a:hover {
            text-decoration: underline;
        }

        /* --- Responsividade --- */
        @media (max-width: 1024px) {
            .main-content {
                padding: 32px 24px;
            }
            .charts-container {
                grid-template-columns: 1fr;
                gap: 24px;
            }
        }

        @media (max-width: 768px) {
            body {
                font-size: 13px;
            }
            .header-content {
                padding: 16px 24px;
                flex-direction: column;
                gap: 16px;
                align-items: center;
            }
            .main-content {
                padding: 24px 16px;
            }
            .page-title {
                font-size: 28px;
            }
            .metrics-grid {
                grid-template-columns: 1fr 1fr;
            }
            .metric-value {
                font-size: 24px;
            }
            .table-container {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
                border: 1px solid var(--border-light);
                border-radius: var(--radius-lg);
            }
            .table {
                min-width: 700px;
            }
            .create-order-section, .content-section, .chart-card {
                padding: 24px;
            }
        }

        @media (max-width: 576px) {
            .metrics-grid {
                grid-template-columns: 1fr;
            }
            .order-result {
                flex-direction: column;
                align-items: flex-start;
            }
            .btn-copy {
                margin-top: 8px;
            }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <a href="#" class="logo">
                <div class="logo-icon">
                    <i class="fas fa-chart-line"></i>
                </div>
                <span>PagJunto</span>
            </a>
            <div class="user-section">
                <div class="user-info">
                    <div class="user-avatar">
                        <i class="fas fa-user"></i>
                    </div>
                    <span>Olá, <% if (typeof partnerData.partnerName !== 'undefined') { %><%= partnerData.partnerName %><% } else { %>Parceiro<% } %></span>
                </div>
                <a href="/logout" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i> Sair
                </a>
            </div>
        </div>
    </header>

    <main class="main-content">
        <div class="page-header">
            <h1 class="page-title">Dashboard Executivo</h1>
            <p class="page-subtitle">Visão completa do desempenho da sua conta corporativa</p>
        </div>

        <section class="create-order-section">
            <div class="section-header">
                <div class="section-icon">
                    <i class="fa-regular fa-square-plus" style="color: #000000;"></i>
                </div>
                <h2 class="section-title">Criar Nova Ordem</h2>
            </div>
            <form id="newOrderForm">
                <div class="form-group">
                    <label for="totalValue" class="form-label">Valor Total da Ordem</label>
                    <input type="number" id="totalValue" name="totalValue" class="form-input" step="0.01" min="0.01" required placeholder="Ex: 150.00">
                </div>
                <button type="submit" class="btn-primary">
                    <i class="fas fa-plus"></i>
                    Gerar Ordem de Pagamento
                </button>
            </form>
            <div id="orderCreationResult" class="order-result">
                <div>
                    <p class="order-result-text">Link da Ordem Criada:</p>
                    <a id="orderLink" href="#" target="_blank" class="order-link"></a>
                </div>
                <button id="copyLinkButton" class="btn-copy">
                    <i class="fas fa-copy"></i> Copiar
                </button>
            </div>
        </section>

        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Saldo da Conta</span>
                    <div class="metric-icon">
                        <i class="fas fa-wallet"></i>
                    </div>
                </div>
                <div class="metric-value" id="accountBalanceValue">R$ 0,00</div>
                <div class="metric-subtitle">Disponível para saque</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Vendas Totais</span>
                    <div class="metric-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                </div>
                <div class="metric-value" id="totalSalesValue">R$ 0,00</div>
                <div class="metric-subtitle">Valor bruto de todas as ordens</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Valor Recebido</span>
                    <div class="metric-icon">
                        <i class="fas fa-money-bill-wave"></i>
                    </div>
                </div>
                <div class="metric-value" id="totalPaidValue">R$ 0,00</div>
                <div class="metric-subtitle">Valor já pago pelos clientes</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Total de Ordens</span>
                    <div class="metric-icon">
                        <i class="fas fa-box"></i>
                    </div>
                </div>
                <div class="metric-value" id="totalOrdersValue">0</div>
                <div class="metric-subtitle">Total de ordens geradas</div>
            </div>
            
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Em Progresso</span>
                    <div class="metric-icon">
                        <i class="fas fa-hourglass-half"></i>
                    </div>
                </div>
                <div class="metric-value" id="progressOrdersValue">0</div>
                <div class="metric-subtitle">Aguardando pagamento</div>
            </div>
        </div>

        <div class="charts-container">
            <div class="chart-card">
                <h3 class="chart-title">Tendência de Vendas Mensais</h3>
                <div class="chart-wrapper">
                    <canvas id="salesChart"></canvas>
                </div>
            </div>
            <div class="chart-card">
                <h3 class="chart-title">Status das Ordens</h3>
                <div class="chart-wrapper">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>
        </div>

        <section class="content-section">
            <div class="section-header">
                <div class="section-icon">
                    <i class="fas fa-list-alt"></i>
                </div>
                <h2 class="section-title">Ordens Recentes</h2>
            </div>
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID da Ordem</th>
                            <th>Valor Total</th>
                            <th>Valor Pago</th>
                            <th>Status</th>
                            <th>Pagadores</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (typeof orders !== 'undefined' && orders.length > 0) { %>
                            <% orders.forEach(order => { %>
                                <tr>
                                    <td><%= order.orderId %></td>
                                    <td>R$ <%= order.totalValue.toFixed(2) %></td>
                                    <td>R$ <%= order.paidValue.toFixed(2) %></td>
                                    <td><span class="status-badge <%= order.status %>"><%= order.status %></span></td>
                                    <td>
                                        <span class="payer-ids">
                                            <% if (order.payersIds && order.payersIds.length > 0) { %>
                                                <%= order.payersIds.join(', ') %>
                                            <% } %>
                                        </span>
                                    </td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr><td>ORD-20250628-001</td><td>R$ 150,00</td><td>R$ 0,00</td><td><span class="status-badge fresh">Fresh</span></td><td><span class="payer-ids"></span></td></tr>
                            <tr><td>ORD-20250628-002</td><td>R$ 320,50</td><td>R$ 160,25</td><td><span class="status-badge progress">Progress</span></td><td><span class="payer-ids">payer_xyz, payer_abc</span></td></tr>
                            <tr><td>ORD-20250627-015</td><td>R$ 55,90</td><td>R$ 55,90</td><td><span class="status-badge paid">Paid</span></td><td><span class="payer-ids">payer_123</span></td></tr>
                            <tr><td>ORD-20250627-014</td><td>R$ 890,00</td><td>R$ 0,00</td><td><span class="status-badge fresh">Fresh</span></td><td><span class="payer-ids"></span></td></tr>
                            <tr><td>ORD-20250626-003</td><td>R$ 250,00</td><td>R$ 250,00</td><td><span class="status-badge paid">Paid</span></td><td><span class="payer-ids">payer_456</span></td></tr>
                        <% } %>
                    </tbody>
                </table>
            </div>
        </section>
    </main>

    <footer class="footer">
        <p>&copy; <%= new Date().getFullYear() %> PagJunto. Todos os direitos reservados. | <a href="#">Política de Privacidade</a> | <a href="#">Termos de Serviço</a></p>
    </footer>

<script>
// --- Dados Mockados (para testar sem backend) ---
const mockSalesLabels = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul'];
const mockSalesData = [8500, 11000, 9800, 14200, 13000, 17500, 19000];

const ordersFromBackend = <%- JSON.stringify(orders || []) %>;

// Os dados do gráfico de status devem vir de 'statusCounts', não 'statusData'
// 'statusCounts' é preenchido pelo EJS com dados do backend ou com mockStatusData
const mockStatusData = {
    fresh: 150,
    progress: 70,
    paid: 238
};

// **IMPORTANTE:** Obtém o array de ordens que o backend já está passando
// Se o seu backend não passa um array chamado 'orders' para o EJS, esta parte não funcionará.
// Assumimos que 'orders' está disponível globalmente no escopo do JavaScript.
const allOrders = typeof ordersFromBackend !== 'undefined' ? ordersFromBackend : [];

// --- Função para calcular dados de vendas mensais a partir das ordens ---
function calculateMonthlySalesData(orders) {
    const monthlyData = {};
    const currentYear = new Date().getFullYear();
    
    // Lista de meses em português
    const months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];
    const currentMonth = new Date().getMonth();
    const labels = [];
    
    // Pegar os últimos 7 meses
    for (let i = 6; i >= 0; i--) {
        const monthIndex = (currentMonth - i + 12) % 12;
        const monthName = months[monthIndex];
        labels.push(monthName);
        monthlyData[monthName] = 0;
    }
    
    // Calcular vendas por mês usando a data real das ordens
    orders.forEach((order) => {
        if (order.createdAt && order.totalValue) {
            const orderDate = new Date(order.createdAt);
            const orderMonth = orderDate.getMonth();
            const orderYear = orderDate.getFullYear();
            
            // Considerar apenas ordens do ano atual
            if (orderYear === currentYear) {
                const monthName = months[orderMonth];
                if (monthlyData.hasOwnProperty(monthName)) {
                    monthlyData[monthName] += order.totalValue;
                }
            }
        }
    });
    
    const data = labels.map(label => monthlyData[label]);
    
    return { labels, data };
}

// Calcular dados de vendas mensais
const monthlySalesResult = calculateMonthlySalesData(allOrders);

// Garante que as variáveis existam e sejam arrays/objetos válidos, mesmo que vazios
const salesLabels = typeof salesLabelsForChart !== 'undefined' && salesLabelsForChart.length > 0 ?
                      salesLabelsForChart : monthlySalesResult.labels;

const salesData = typeof salesDataForChart !== 'undefined' && salesDataForChart.length > 0 ?
                    salesDataForChart : monthlySalesResult.data;

// --- Nova Lógica: Calcular Métricas de Resumo no Frontend ---
function calculateDashboardMetrics(orders) {
    let totalSales = 0;
    let totalPaidValue = 0;
    let totalOrders = orders.length;
    let freshOrders = 0;
    let progressOrders = 0;
    let paidOrders = 0;
    // O saldo da conta geralmente não é calculado apenas a partir das ordens,
    // mas sim de um registro de transações financeiras.
    // Por isso, manteremos um valor mockado ou buscado de outra forma.
    let accountBalance = typeof summaryFromBackend !== 'undefined' && summaryFromBackend.accountBalance !== undefined
                         ? summaryFromBackend.accountBalance : 15234.56; // Valor inicial ou mockado

    orders.forEach(order => {
        totalSales += order.totalValue || 0;
        totalPaidValue += order.paidValue || 0; // Use || 0 para garantir que não haja NaN se o campo estiver faltando

        switch (order.status) {
            case 'fresh':
                freshOrders++;
                break;
            case 'progress':
                progressOrders++;
                break;
            case 'paid':
                paidOrders++;
                break;
        }
    });

    return {
        accountBalance: accountBalance,
        totalSales: totalSales,
        totalPaidValue: totalPaidValue,
        totalOrders: totalOrders,
        freshOrders: freshOrders,
        progressOrders: progressOrders,
        paidOrders: paidOrders
    };
}

// Helper para obter variáveis CSS no JS (Mantenha esta função)
function var_to_css_var(variable) {
    return getComputedStyle(document.documentElement).getPropertyValue(variable);
}

// --- Gráfico de Vendas Mensais (Line Chart) ---
const salesCtx = document.getElementById('salesChart').getContext('2d');
const salesChart = new Chart(salesCtx, {
    type: 'line',
    data: {
        labels: salesLabels,
        datasets: [{
            label: 'Vendas Totais (R$)',
            data: salesData,
            borderColor: var_to_css_var('--primary-color'),
            backgroundColor: 'rgba(0, 86, 179, 0.1)',
            tension: 0.4,
            fill: true,
            pointBackgroundColor: var_to_css_var('--primary-color'),
            pointBorderColor: '#fff',
            pointHoverRadius: 6,
            pointHoverBorderColor: var_to_css_var('--primary-color')
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'top',
                labels: { font: { family: 'Inter' } }
            },
            title: {
                display: true,
                text: 'Tendência de Vendas Mensais',
                font: { size: 18, family: 'Inter', weight: '600' },
                color: var_to_css_var('--text-dark')
            },
            tooltip: {
                titleFont: { family: 'Inter' },
                bodyFont: { family: 'Inter' },
                callbacks: {
                    label: function(context) {
                        return ` ${context.dataset.label}: R$ ${context.parsed.y.toFixed(2)}`;
                    }
                }
            }
        },
        scales: {
            y: {
                beginAtZero: true,
                grid: { color: var_to_css_var('--border-color') },
                ticks: {
                    font: { family: 'Inter' },
                    callback: function(value, index, values) {
                        return 'R$ ' + value.toLocaleString('pt-BR');
                    }
                }
            },
            x: {
                grid: { display: false },
                ticks: { font: { family: 'Inter' } }
            }
        }
    }
});

// --- Gráfico de Status de Pedidos (Doughnut Chart) ---
const statusCtx = document.getElementById('statusChart').getContext('2d');
let statusChart; // Declare a variável fora do DOMContentLoaded para poder acessá-la globalmente

// --- Formulário de Nova Ordem ---
document.getElementById('newOrderForm').addEventListener('submit', async function(e) {
    e.preventDefault();

    const totalValue = document.getElementById('totalValue').value;
    const submitButton = e.target.querySelector('button[type="submit"]');
    const originalText = submitButton.innerHTML;
    const orderCreationResult = document.getElementById('orderCreationResult');
    const orderLinkElement = document.getElementById('orderLink');

    if (isNaN(parseFloat(totalValue)) || parseFloat(totalValue) <= 0) {
        alert('Por favor, insira um Valor Total válido (número maior que zero).');
        return;
    }

    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Criando...';
    submitButton.disabled = true;

    // Garante que partnerId e partnerApiKey estão disponíveis
    // Se eles vêm do backend via EJS, certifique-se de que estão no escopo global ou passados via data attributes
    const localPartnerId = "<%= partnerData.partnerId %>"; // Ou use uma variável JS global como `partnerId` se for injetada assim
    const localPartnerApiKey = "<%= partnerData.apiKey %>"; // Ou use uma variável JS global como `partnerApiKey`

    try {
        const response = await fetch('http://localhost:3000/order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                partnerId: localPartnerId,
                totalValue: parseFloat(totalValue), // Converte para float para enviar
                apiKey: localPartnerApiKey
            })
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ message: 'Erro desconhecido.' }));
            throw new Error(errorData.message || `Erro HTTP: ${response.status}`);
        }

        const result = await response.json();

        if (result) { // Assumindo que o backend retorna { orderId: "..." }
            const generatedOrderLink = `http://localhost/${localPartnerId}/${result}`;

            orderLinkElement.href = generatedOrderLink;
            orderLinkElement.textContent = generatedOrderLink;
            orderCreationResult.style.display = 'flex';

            document.getElementById('totalValue').value = '';

            orderCreationResult.scrollIntoView({ behavior: 'smooth', block: 'center' });

            // **NOVA LÓGICA:** Atualizar as métricas e gráficos após uma nova ordem
            // Simular a adição da nova ordem ao array existente (idealmente, você refaria a requisição de ordens)
            allOrders.unshift({ // Adiciona a nova ordem no início do array
                orderId: result,
                totalValue: parseFloat(totalValue),
                paidValue: 0, // Novas ordens geralmente começam com 0 pago
                status: 'fresh', // Nova ordem começa como 'fresh'
                payersIds: [],
                createdAt: new Date().toISOString() // Adiciona a data atual
            });
            updateDashboardDisplay(); // Chama a função para recalcular e atualizar o DOM
            
        } else {
            throw new Error('Resposta inválida do servidor: Order ID não encontrado.');
        }

    } catch (error) {
        console.error('Erro ao criar ordem:', error);
        alert('Erro ao criar ordem: ' + error.message);
    } finally {
        submitButton.innerHTML = originalText;
        submitButton.disabled = false;
    }
});

// --- Botão de Copiar Link ---
document.getElementById('copyLinkButton').addEventListener('click', function() {
    const orderLink = document.getElementById('orderLink');
    const copyButton = this;
    const originalText = copyButton.innerHTML;

    if (!orderLink.href || orderLink.href === '#') {
        alert('Nenhum link para copiar. Crie uma ordem primeiro.');
        return;
    }

    navigator.clipboard.writeText(orderLink.href)
        .then(() => {
            copyButton.innerHTML = '<i class="fas fa-check"></i> Copiado!';
            copyButton.style.backgroundColor = '#28a745';
            copyButton.style.color = '#ffffff';

            setTimeout(() => {
                copyButton.innerHTML = originalText;
                copyButton.style.backgroundColor = var_to_css_var('--secondary-color');
                copyButton.style.color = '#ffffff';
            }, 2000);
        })
        .catch(err => {
            console.error('Erro ao copiar:', err);
            const textArea = document.createElement('textarea');
            textArea.value = orderLink.href;
            textArea.style.position = 'fixed';
            textArea.style.top = '0';
            textArea.style.left = '0';
            textArea.style.opacity = '0';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            try {
                document.execCommand('copy');
                copyButton.innerHTML = '<i class="fas fa-check"></i> Copiado!';
                copyButton.style.backgroundColor = '#28a745';
                copyButton.style.color = '#ffffff';
                setTimeout(() => {
                    copyButton.innerHTML = originalText;
                    copyButton.style.backgroundColor = var_to_css_var('--secondary-color');
                    copyButton.style.color = '#ffffff';
                }, 2000);
            } catch (copyErr) {
                console.error('Falha ao copiar usando execCommand:', copyErr);
                alert('Erro ao copiar o link. Por favor, copie-o manualmente: ' + orderLink.href);
            } finally {
                document.body.removeChild(textArea);
            }
        });
});

// --- Função para atualizar o display do dashboard com base nos dados calculados ---
function updateDashboardDisplay() {
    // Atualizar os cartões de métricas
    const metrics = calculateDashboardMetrics(allOrders);

    // Atualizar os cartões de métricas usando os IDs
    document.getElementById('accountBalanceValue').textContent = formatCurrency(metrics.accountBalance);
    document.getElementById('totalSalesValue').textContent = formatCurrency(metrics.totalSales);
    document.getElementById('totalPaidValue').textContent = formatCurrency(metrics.totalPaidValue);
    document.getElementById('totalOrdersValue').textContent = formatNumber(metrics.totalOrders);
    document.getElementById('progressOrdersValue').textContent = formatNumber(metrics.progressOrders);

    // Recalcular e atualizar o gráfico de vendas mensais
    const updatedMonthlySales = calculateMonthlySalesData(allOrders);
    if (salesChart) {
        salesChart.data.labels = updatedMonthlySales.labels;
        salesChart.data.datasets[0].data = updatedMonthlySales.data;
        salesChart.update();
    }

    // Atualizar o gráfico de status
    if (statusChart) {
        statusChart.data.datasets[0].data = [metrics.freshOrders, metrics.progressOrders, metrics.paidOrders];
        statusChart.update();
    } else {
        // Se o gráfico ainda não foi inicializado (primeira carga da página)
        // Isso pode acontecer se o script for executado antes do DOMContentLoaded
        statusChart = new Chart(statusCtx, {
            type: 'doughnut',
            data: {
                labels: ['Novas', 'Em Progresso', 'Pagas'],
                datasets: [{
                    data: [metrics.freshOrders, metrics.progressOrders, metrics.paidOrders],
                    backgroundColor: [
                        '#007bff',
                        '#ffc107',
                        '#28a745'
                    ],
                    borderWidth: 0,
                    hoverBorderWidth: 3,
                    hoverBorderColor: '#ffffff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '60%',
                plugins: {
                    legend: { position: 'bottom', labels: { padding: 20, usePointStyle: true, pointStyle: 'circle', font: { size: 13, weight: '600' } } },
                    tooltip: {
                        backgroundColor: 'rgba(26, 32, 44, 0.9)', titleColor: '#ffffff', bodyColor: '#ffffff',
                        borderColor: '#667eea', borderWidth: 1, cornerRadius: 8,
                        callbacks: {
                            label: function(context) {
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = ((context.parsed / total) * 100).toFixed(1);
                                return context.label + ': ' + context.parsed + ' (' + percentage + '%)';
                            }
                        }
                    }
                }
            }
        });
    }

    // Atualizar a tabela de ordens (se você quiser que as novas ordens apareçam sem recarregar a página)
    const tableBody = document.querySelector('.table tbody');
    if (tableBody) {
        tableBody.innerHTML = ''; // Limpa as linhas existentes
        allOrders.forEach(order => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${order.orderId}</td>
                <td>R$ ${order.totalValue.toFixed(2)}</td>
                <td>R$ ${(order.paidValue || 0).toFixed(2)}</td>
                <td><span class="status-badge ${order.status}">${order.status}</span></td>
                <td><span class="payer-ids">${(order.payersIds && order.payersIds.length > 0) ? order.payersIds.join(', ') : ''}</span></td>
            `;
            tableBody.appendChild(row);
        });
    }
}

// --- Inicialização ---
document.addEventListener('DOMContentLoaded', function() {
    console.log('Dashboard PagJunto Corporate carregado');

    // Remove as condições EJS nos cartões de métricas no HTML
    // E chama updateDashboardDisplay para preencher os valores iniciais
    updateDashboardDisplay();

    // Animações de entrada (mantidas)
    const cards = document.querySelectorAll('.summary-cards .card, .section');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';

        setTimeout(() => {
            card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 80);
    });

    document.getElementById('orderCreationResult').style.display = 'none';
});

// --- Utilitários ---
function formatCurrency(value) {
    if (typeof value !== 'number') return 'R$ 0,00';
    return value.toLocaleString('pt-BR', {
        style: 'currency',
        currency: 'BRL'
    });
}

function formatNumber(value) {
    if (typeof value !== 'number') return '0';
    return value.toLocaleString('pt-BR');
}

// --- Responsividade para gráficos ---
window.addEventListener('resize', function() {
    if (salesChart) salesChart.resize();
    if (statusChart) statusChart.resize();
});
</script>