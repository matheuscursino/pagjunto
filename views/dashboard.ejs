<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard do Parceiro - <% if (typeof partnerData.partnerName !== 'undefined') { %><%= partnerData.partnerName %><% } else { %>PagJunto Corporativo<% } %></title>

    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="manifest" href="/site.webmanifest">

    <style>
        :root {
            --primary-color: #0d6efd;
            --primary-dark: #0b5ed7;
            --secondary-color: #6c757d;
            --status-paid-text: #146c43;
            --status-paid-bg: #d1e7dd;
            --status-progress-text: #664d03;
            --status-progress-bg: #fff3cd;
            --status-fresh-text: #41464b;
            --status-fresh-bg: #e2e3e5;
            --text-primary: #212529;
            --text-secondary: #495057;
            --text-muted: #6c757d;
            --bg-primary: #f8f9fa;
            --bg-secondary: #e9ecef;
            --bg-card: #ffffff;
            --border-light: #dee2e6;
            --border-medium: #ced4da;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.07), 0 2px 4px -2px rgba(0, 0, 0, 0.07);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.07), 0 4px 6px -4px rgba(0, 0, 0, 0.07);
            --radius-sm: 4px;
            --radius-md: 6px;
            --radius-lg: 8px;
            --radius-xl: 12px;
        }
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Inter', sans-serif; background-color: var(--bg-primary); color: var(--text-secondary); line-height: 1.6; font-size: 14px; display: flex; flex-direction: column; min-height: 100vh; }
        .header { background: var(--bg-card); color: var(--text-primary); padding: 0; box-shadow: var(--shadow-sm); border-bottom: 1px solid var(--border-light); position: sticky; top: 0; z-index: 1020; }
        .header-content { max-width: 1400px; margin: 0 auto; padding: 16px 32px; display: flex; justify-content: space-between; align-items: center; }
        .logo { display: flex; align-items: center; gap: 12px; text-decoration: none; color: var(--text-primary); font-weight: 700; font-size: 20px; }
        .user-section { display: flex; align-items: center; gap: 24px; }
        .user-info { display: flex; align-items: center; gap: 12px; font-size: 14px; font-weight: 500; color: var(--text-secondary); }
        .user-avatar { width: 36px; height: 36px; background-color: var(--bg-secondary); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 14px; font-weight: 600; color: var(--primary-color); }
        .logout-btn { color: var(--text-muted); text-decoration: none; font-size: 13px; padding: 8px 12px; border-radius: var(--radius-md); transition: color 0.2s ease, background-color 0.2s ease; display: flex; align-items: center; gap: 8px; }
        .logout-btn:hover { color: var(--primary-color); background-color: var(--bg-secondary); }
        .main-content { flex: 1; max-width: 1400px; margin: 0 auto; padding: 40px 32px; width: 100%; }
        .page-header { margin-bottom: 40px; }
        .page-title { font-size: 32px; font-weight: 700; color: var(--text-primary); margin-bottom: 8px; letter-spacing: -0.02em; }
        .page-subtitle { font-size: 16px; color: var(--text-muted); font-weight: 400; }
        .create-order-section, .metric-card, .chart-card, .content-section { background: var(--bg-card); border-radius: var(--radius-lg); padding: 24px; box-shadow: var(--shadow-md); border: 1px solid var(--border-light); transition: all 0.3s ease; }
        .metric-card:hover { transform: translateY(-3px); box-shadow: var(--shadow-lg); }
        .create-order-section { padding: 32px; margin-bottom: 40px; }
        .section-header { display: flex; align-items: center; gap: 16px; margin-bottom: 24px; }
        .section-icon { width: 40px; height: 40px; background-color: rgba(13, 110, 253, 0.1); opacity: 0.9; border-radius: var(--radius-md); display: flex; align-items: center; justify-content: center; color:rgb(0, 0, 0); font-size: 18px; }
        .section-title { font-size: 20px; font-weight: 600; color: var(--text-primary); }
        .form-row { display: flex; gap: 20px; }
        .form-group { margin-bottom: 24px; flex: 1; }
        .form-label { display: block; font-size: 14px; font-weight: 500; color: var(--text-primary); margin-bottom: 8px; }
        .form-input { width: 100%; padding: 12px 16px; border: 1px solid var(--border-medium); border-radius: var(--radius-md); font-size: 16px; font-weight: 400; color: var(--text-primary); background-color: var(--bg-card); transition: border-color 0.2s ease, box-shadow 0.2s ease; outline: none; }
        .form-input:focus { border-color: var(--primary-color); box-shadow: 0 0 0 3px rgba(13, 110, 253, 0.25); }
        .btn-primary { background-color: var(--primary-color); color: white; border: 1px solid var(--primary-color); padding: 12px 24px; border-radius: var(--radius-md); font-size: 15px; font-weight: 500; cursor: pointer; transition: all 0.2s ease; display: inline-flex; align-items: center; gap: 8px; box-shadow: var(--shadow-sm); }
        .btn-primary:hover { background-color: var(--primary-dark); border-color: var(--primary-dark); }
        .order-result { margin-top: 24px; padding: 16px 20px; background-color: var(--status-paid-bg); border-radius: var(--radius-md); color: var(--status-paid-text); display: none; align-items: center; justify-content: space-between; flex-wrap: wrap; gap: 16px; border: 1px solid rgba(20, 108, 67, 0.2); }
        .order-result-text { font-weight: 500; font-size: 14px; }
        .order-link { color: var(--status-paid-text); word-break: break-all; text-decoration: underline; font-weight: 500; }
        .btn-copy { background: rgba(0, 0, 0, 0.05); color: var(--status-paid-text); border: 1px solid rgba(0, 0, 0, 0.1); padding: 6px 12px; border-radius: var(--radius-sm); font-size: 12px; font-weight: 600; cursor: pointer; transition: all 0.2s ease; display: inline-flex; align-items: center; gap: 6px; }
        .btn-copy:hover { background: rgba(0, 0, 0, 0.1); }
        .metrics-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 24px; margin-bottom: 40px; }
        .metric-header { display: flex; align-items: flex-start; justify-content: space-between; margin-bottom: 12px; }
        .metric-title { font-size: 14px; font-weight: 500; color: var(--text-muted); }
        .metric-icon { width: 40px; height: 40px; background-color: var(--bg-secondary); border-radius: var(--radius-md); display: flex; align-items: center; justify-content: center; color: var(--text-muted); font-size: 16px; }
        .metric-value { font-size: 28px; font-weight: 700; color: var(--text-primary); margin-bottom: 4px; letter-spacing: -0.02em; }
        .metric-subtitle { font-size: 13px; color: var(--text-muted); font-weight: 400; }
        .charts-container { display: grid; grid-template-columns: 2fr 1fr; gap: 24px; margin-bottom: 40px; }
        .chart-title { font-size: 18px; font-weight: 600; color: var(--text-primary); margin-bottom: 24px; }
        .chart-wrapper { height: 300px; display: flex; align-items: center; justify-content: center; }
        .table-container { overflow-x: auto; }
        .table { width: 100%; border-collapse: collapse; font-size: 14px; }
        .table th, .table td { padding: 16px 20px; text-align: left; border-bottom: 1px solid var(--border-light); vertical-align: middle; }
        .table th { background-color: var(--bg-primary); color: var(--text-muted); font-weight: 600; font-size: 12px; text-transform: uppercase; letter-spacing: 0.05em; }
        .table .order-id-cell { font-family: 'SF Mono', monospace; font-size: 13px; color: var(--text-muted); }
        .table .order-name-cell { display: block; font-weight: 600; color: var(--text-primary); }
        .table tr.main-row:hover { background-color: #f8f9fa; }
        .status-badge { display: inline-flex; align-items: center; padding: 4px 12px; border-radius: var(--radius-md); font-size: 12px; font-weight: 600; text-transform: capitalize; }
        .status-badge.fresh { background-color: var(--status-fresh-bg); color: var(--status-fresh-text); }
        .status-badge.progress { background-color: var(--status-progress-bg); color: var(--status-progress-text); }
        .status-badge.paid { background-color: var(--status-paid-bg); color: var(--status-paid-text); }
        .footer { background-color: var(--bg-secondary); color: var(--text-muted); text-align: center; padding: 24px 32px; margin-top: 48px; font-size: 13px; border-top: 1px solid var(--border-light); }
        .toast { position: fixed; top: 80px; right: 20px; background: #28a745; color: white; padding: 12px 20px; border-radius: 4px; box-shadow: 0 4px 12px rgba(0,0,0,0.2); transform: translateX(120%); transition: transform 0.3s ease; z-index: 1000; }
        .toast.show { transform: translateX(0); }
        .pagination-controls { display: flex; justify-content: center; align-items: center; margin-top: 24px; gap: 12px; }
        .page-indicator { font-size: 14px; font-weight: 500; color: var(--text-secondary); padding: 0 12px; }
        .btn-secondary { background-color: var(--bg-card); color: var(--text-primary); border: 1px solid var(--border-medium); padding: 8px 16px; border-radius: var(--radius-md); font-size: 14px; font-weight: 500; cursor: pointer; transition: all 0.2s ease; }
        .btn-secondary:hover:not(:disabled) { background-color: var(--bg-secondary); }
        .copy-btn-table { background: #007bff; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 0.8em; display: flex; align-items: center; gap: 6px; transition: all 0.2s; }
        .copy-btn-table:hover { background: #0056b3; }
        .qr-btn { background-color: var(--bg-card); color: var(--text-primary); border: 1px solid var(--border-medium); padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 0.8em; display: flex; align-items: center; gap: 6px; transition: all 0.2s; font-weight: 500; }
        .qr-btn:hover { background-color: var(--bg-secondary); }
        .details-btn-table { background-color: var(--bg-card); color: var(--text-primary); border: 1px solid var(--border-medium); padding: 6px 10px; border-radius: 4px; cursor: pointer; font-size: 0.8em; display: flex; align-items: center; gap: 6px; transition: all 0.2s; font-weight: 500; }
        .details-btn-table:hover { background-color: var(--bg-secondary); }
        .details-btn-table[aria-expanded="true"] { background-color: var(--primary-color); color: white; border-color: var(--primary-color); }
        .actions-cell { display: flex; gap: 6px; align-items: center; }
        .details-row { display: none; }
        .details-row.is-expanded { display: table-row; }
        .details-row td { background-color: #fafbfd; box-shadow: inset 0 5px 6px -5px rgba(0,0,0,0.08); padding: 24px !important; }
        .details-content h4 { font-size: 15px; font-weight: 600; color: var(--text-primary); margin-bottom: 16px; }
        .details-content .detail-item { display: flex; flex-direction: column; gap: 4px; margin-bottom: 12px; font-size: 14px; }
        .details-content strong { font-weight: 500; color: var(--text-muted); margin-bottom: 2px; }
        .details-content ul { list-style-type: none; padding-left: 0; margin: 0; display: flex; flex-wrap: wrap; gap: 8px; }
        .details-content ul li { font-family: 'SF Mono', monospace; background-color: var(--bg-secondary); padding: 4px 8px; border-radius: var(--radius-sm); font-size: 13px; }
        .modal { display: none; position: fixed; z-index: 1050; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.5); animation: fadeIn 0.3s; }
        .modal-content { background-color: #fefefe; margin: 15% auto; padding: 24px; border: 1px solid #888; width: 90%; max-width: 320px; border-radius: var(--radius-lg); box-shadow: var(--shadow-lg); position: relative; animation: slideIn 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94); }
        .modal-content h2 { font-size: 18px; font-weight: 600; color: var(--text-primary); margin-bottom: 20px; text-align: center; }
        #qrcode-container { display: flex; justify-content: center; align-items: center; padding: 10px; margin-bottom: 10px; }
        .modal-close-btn { color: #aaa; position: absolute; top: 10px; right: 20px; font-size: 28px; font-weight: bold; cursor: pointer; }
        .modal-close-btn:hover, .modal-close-btn:focus { color: black; text-decoration: none; }
        @keyframes fadeIn { from {opacity: 0} to {opacity: 1} }
        @keyframes slideIn { from {transform: translateY(-50px); opacity: 0;} to {transform: translateY(0); opacity: 1;} }
        @media (max-width: 768px) {
            .table-container { overflow-x: hidden; }
            .table thead { display: none; }
            .table, .table tbody, .table tr, .table td { display: block; width: 100%; }
            .table tr.main-row { margin-bottom: 16px; border: 1px solid var(--border-light); border-radius: var(--radius-lg); padding: 12px; box-shadow: var(--shadow-sm); background-color: var(--bg-card); }
            .table tr.details-row.is-expanded { display: block; border: 1px solid var(--border-light); border-top: none; border-radius: 0 0 var(--radius-lg) var(--radius-lg); margin-top: -17px; margin-bottom: 16px; background-color: var(--bg-card); padding-bottom: 16px; }
            .table td { display: flex; justify-content: space-between; align-items: center; padding: 10px 4px; border-bottom: 1px solid var(--border-light) !important; text-align: right; }
            .table tr.main-row td:last-of-type { border-bottom: none !important; }
            .table td::before { content: attr(data-label); font-weight: 600; color: var(--text-primary); text-align: left; padding-right: 16px; }
            .actions-cell .btn-text { display: none; }
            .actions-cell button { padding: 8px; width: 40px; height: 40px; justify-content: center; gap: 0; }
            .actions-cell button .fas { margin: 0; font-size: 1.1em; }
            .header-content { flex-direction: column; gap: 16px; }
            .main-content { padding: 24px 16px; }
            .form-row { flex-direction: column; gap: 0; }
        }
    </style>
</head>
<body>
    <header class="header">
        <div class="header-content">
            <a href="/" class="logo"><span>pagjunto</span></a>
            <div class="user-section">
                <div class="user-info">
                    <div class="user-avatar"><i class="fas fa-user"></i></div>
                    <span>Olá, <% if (typeof partnerData.partnerName !== 'undefined') { %><%= partnerData.partnerName %><% } else { %>Parceiro<% } %></span>
                </div>
                <a href="/logout" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Sair</a>
            </div>
        </div>
    </header>
    <main class="main-content">
        <div class="page-header">
             <h1 class="page-title">Dashboard Executivo</h1>
             <p class="page-subtitle">Visão completa do desempenho da sua conta corporativa</p>
        </div>
        <section class="create-order-section">
            <div class="section-header">
                <div class="section-icon"><i class="fa-regular fa-square-plus" style="color: #000000;"></i></div>
                <h2 class="section-title">Criar Nova Ordem</h2>
            </div>
            <form id="newOrderForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="orderName" class="form-label">Nome da Ordem (Opcional)</label>
                        <input type="text" id="orderName" name="orderName" class="form-input" placeholder="Ex: Pedido #123">
                    </div>
                    <div class="form-group">
                        <label for="totalValue" class="form-label">Valor Total da Ordem</label>
                        <input type="number" id="totalValue" name="totalValue" class="form-input" step="0.01" min="0.01" required placeholder="Ex: 150.00">
                    </div>
                </div>
                <button type="submit" class="btn-primary"><i class="fas fa-plus"></i> Gerar Ordem de Pagamento</button>
            </form>
            <div id="orderCreationResult" class="order-result">
                <div>
                    <p class="order-result-text">Link da Ordem Criada:</p>
                    <a id="orderLink" href="#" target="_blank" class="order-link"></a>
                </div>
                <div class="order-result-actions" style="display: flex; gap: 8px;">
                    <button id="copyLinkButton" class="btn-copy"><i class="fas fa-copy"></i> Copiar</button>
                    <button id="qrCodeNewOrderButton" class="btn-copy"><i class="fas fa-qrcode"></i> QR Code</button>
                </div>
            </div>
        </section>
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-header"><span class="metric-title">Saldo da Conta</span><div class="metric-icon"><i class="fas fa-wallet"></i></div></div>
                <div class="metric-value" id="accountBalanceValue">R$ 0,00</div>
                <div class="metric-subtitle">Disponível + A receber</div>
            </div>
            <div class="metric-card">
                <div class="metric-header"><span class="metric-title">Vendas Totais</span><div class="metric-icon"><i class="fas fa-chart-line"></i></div></div>
                <div class="metric-value" id="totalSalesValue">R$ 0,00</div>
                <div class="metric-subtitle">Valor bruto de todas as ordens</div>
            </div>
            <div class="metric-card">
                <div class="metric-header"><span class="metric-title">Valor Recebido</span><div class="metric-icon"><i class="fas fa-money-bill-wave"></i></div></div>
                <div class="metric-value" id="totalPaidValue">R$ 0,00</div>
                <div class="metric-subtitle">Valor já pago pelos clientes</div>
            </div>
            <div class="metric-card">
                <div class="metric-header"><span class="metric-title">Total de Ordens</span><div class="metric-icon"><i class="fas fa-box"></i></div></div>
                <div class="metric-value" id="totalOrdersValue">0</div>
                <div class="metric-subtitle">Total de ordens geradas</div>
            </div>
            <div class="metric-card">
                <div class="metric-header"><span class="metric-title">Ordens Pagas</span><div class="metric-icon"><i class="fas fa-check-double"></i></div></div>
                <div class="metric-value" id="paidOrdersValue">0</div>
                <div class="metric-subtitle">Ordens finalizadas com sucesso</div>
            </div>
            <div class="metric-card">
                <div class="metric-header"><span class="metric-title">Ordens Novas</span><div class="metric-icon"><i class="fas fa-file-circle-plus"></i></div></div>
                <div class="metric-value" id="newOrdersValue">0</div>
                <div class="metric-subtitle">Ordens recém-criadas</div>
            </div>
            <div class="metric-card">
                <div class="metric-header"><span class="metric-title">Em Progresso</span><div class="metric-icon"><i class="fas fa-hourglass-half"></i></div></div>
                <div class="metric-value" id="progressOrdersValue">0</div>
                <div class="metric-subtitle">Aguardando pagamento</div>
            </div>
            <div class="metric-card">
                <div class="metric-header"><span class="metric-title">Ticket Médio</span><div class="metric-icon"><i class="fas fa-receipt"></i></div></div>
                <div class="metric-value" id="averageTicketValue">R$ 0,00</div>
                <div class="metric-subtitle">Valor médio por ordem</div>
            </div>
            <div class="metric-card">
                <div class="metric-header"><span class="metric-title">Taxa de Conversão</span><div class="metric-icon"><i class="fas fa-bullseye"></i></div></div>
                <div class="metric-value" id="conversionRateValue">0%</div>
                <div class="metric-subtitle">% de ordens pagas</div>
            </div>
            <div class="metric-card">
                <div class="metric-header"><span class="metric-title">Total de Pagadores</span><div class="metric-icon"><i class="fas fa-users"></i></div></div>
                <div class="metric-value" id="totalPayersValue">0</div>
                <div class="metric-subtitle">Pagamentos individuais recebidos</div>
            </div>
        </div>
        <div class="charts-container">
            <div class="chart-card"><h3 class="chart-title">Tendência de Vendas Mensais</h3><div class="chart-wrapper"><canvas id="salesChart"></canvas></div></div>
            <div class="chart-card"><h3 class="chart-title">Status das Ordens</h3><div class="chart-wrapper"><canvas id="statusChart"></canvas></div></div>
        </div>

        <section class="content-section">
            <div class="section-header">
                <div class="section-icon"><i class="fas fa-list-alt"></i></div>
                <h2 class="section-title">Ordens Recentes</h2>
            </div>
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Ordem</th>
                            <th>Valor Total</th>
                            <th>Valor Pago</th>
                            <th>Status</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
            <div class="pagination-controls">
                <button id="prevPageBtn" class="btn-secondary">Anterior</button>
                <span id="pageIndicator" class="page-indicator"></span>
                <button id="nextPageBtn" class="btn-secondary">Próximo</button>
            </div>
        </section>
        <section class="content-section" style="padding: 32px; margin-top: 40px;">
            <div class="section-header">
                <div class="section-icon"><i class="fas fa-key"></i></div>
                <h2 class="section-title">Sua Chave de API (API Key)</h2>
            </div>
            <p class="page-subtitle" style="margin-top: -16px; margin-bottom: 24px; font-weight: 400;">Use esta chave para integrar seus sistemas com a nossa plataforma. Mantenha-a segura.</p>
            <div style="display: flex; align-items: center; gap: 16px; flex-wrap: wrap;">
                <input type="text" id="apiKeyInput" class="form-input" value="<%= partnerData.apiKey.substring(0, 8) + '••••••••••••••••••••' + partnerData.apiKey.substring(partnerData.apiKey.length - 4) %>" readonly style="font-family: 'SF Mono', Menlo, Monaco, Consolas, monospace; background-color: var(--bg-secondary); flex-grow: 1;">
                <button id="copyApiKeyButton" class="btn-primary" style="flex-shrink: 0;"><i class="fas fa-copy"></i> <span class="btn-text">Copiar Chave</span></button>
            </div>
        </section>
        <div id="copyToast" class="toast"></div>
    </main>

    <div id="qrCodeModal" class="modal">
        <div class="modal-content">
            <span class="modal-close-btn">&times;</span>
            <h2>QR Code da Ordem</h2>
            <div id="qrcode-container"></div>
            <p id="qrLinkText" style="text-align: center; word-break: break-all; font-size: 12px; color: var(--text-muted); margin-top: 10px;"></p>
        </div>
    </div>
    
    <footer class="footer">
        <p>&copy; 2025 PagJunto. Todos os direitos reservados. | <a href="#">Política de Privacidade</a> | <a href="#">Termos de Serviço</a></p>
    </footer>

<script>
    const localPartnerId = "<%= partnerData.partnerId %>";
    const localPartnerApiKey = "<%= partnerData.apiKey %>";
    const stats = <%- JSON.stringify(stats || {}) %>;
    const recentOrders = <%- JSON.stringify(orders || []) %>;
    const balance = <%- JSON.stringify(balance || { data: {} }) %>;
    
    let salesChart, statusChart, currentPage = 1;
    const ORDERS_PER_PAGE = 5;
    let totalPages = Math.ceil(recentOrders.length / ORDERS_PER_PAGE);

    const tableBody = document.querySelector('.table tbody');
    const prevPageBtn = document.getElementById('prevPageBtn');
    const nextPageBtn = document.getElementById('nextPageBtn');
    const pageIndicator = document.getElementById('pageIndicator');
    const qrCodeModal = document.getElementById('qrCodeModal');
    const qrCodeContainer = document.getElementById('qrcode-container');
    const qrCodeModalCloseBtn = document.querySelector('.modal-close-btn');
    const qrLinkText = document.getElementById('qrLinkText');

    function formatCurrency(value) {
        const numValue = typeof value === 'string' ? parseFloat(value) : value;
        if (isNaN(numValue)) return 'R$ 0,00';
        return numValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    }
    function formatCurrencyFromCents(cents) {
        const reais = (Number(cents) || 0) / 100;
        return formatCurrency(reais);
    }
    function formatNumber(value) {
        const numValue = Number(value);
        if (isNaN(numValue)) return '0';
        return numValue.toLocaleString('pt-BR');
    }
    function translateStatus(status) {
        const translations = {
            fresh: 'Nova',
            progress: 'Andamento',
            paid: 'Pago'
        };
        return translations[status] || status;
    }

    function calculateMonthlySalesData(orders) {
        const monthlyData = {};
        const months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];
        const currentMonth = new Date().getMonth();
        const currentYear = new Date().getFullYear();
        const labels = [];
        for (let i = 6; i >= 0; i--) {
            const date = new Date(currentYear, currentMonth - i, 1);
            const monthName = months[date.getMonth()];
            labels.push(monthName);
            monthlyData[monthName] = 0;
        }
        orders.forEach((order) => {
            if (order.createdAt && order.totalValue) {
                const orderDate = new Date(order.createdAt);
                const monthName = months[orderDate.getMonth()];
                if (monthlyData.hasOwnProperty(monthName)) {
                    monthlyData[monthName] += order.totalValue;
                }
            }
        });
        const data = labels.map(label => monthlyData[label]);
        return { labels, data };
    }

    function displayOrdersForPage(page) {
        currentPage = page;
        tableBody.innerHTML = '';
        if (recentOrders.length === 0) {
            tableBody.innerHTML = `<tr><td colspan="5" style="text-align: center; color: var(--text-muted);">Nenhuma ordem encontrada.</td></tr>`;
            updatePaginationControls();
            return;
        }
        const start = (page - 1) * ORDERS_PER_PAGE;
        const end = start + ORDERS_PER_PAGE;
        const paginatedOrders = recentOrders.slice(start, end);

        paginatedOrders.forEach(order => {
            const orderNameHTML = order.orderName ? `<span class="order-name-cell">${order.orderName}</span>` : '';
            const mainRow = `
                <tr class="main-row">
                    <td data-label="Ordem">
                        ${orderNameHTML}
                        <span class="order-id-cell">${order.orderId}</span>
                    </td>
                    <td data-label="Valor Total">${formatCurrency(order.totalValue || 0)}</td>
                    <td data-label="Valor Pago">${formatCurrency(order.paidValue || 0)}</td>
                    <td data-label="Status"><span class="status-badge ${order.status}">${translateStatus(order.status)}</span></td>
                    <td data-label="Ações">
                        <div class="actions-cell">
                            <button class="details-btn-table" title="Ver Detalhes" aria-expanded="false" onclick="toggleOrderDetails(event, '${order.orderId}')"><i class="fas fa-chevron-down"></i><span class="btn-text"> Detalhes</span></button>
                            <button class="copy-btn-table" title="Copiar Link" onclick="copyOrderLink(event, '${order.orderId}')"><i class="fas fa-copy"></i><span class="btn-text"> Copiar</span></button>
                            <button class="qr-btn" title="Mostrar QR Code" onclick="showQrCode(event, '${order.orderId}')"><i class="fas fa-qrcode"></i><span class="btn-text"> QR Code</span></button>
                        </div>
                    </td>
                </tr>`;

            const payersListHTML = (order.payersIds && order.payersIds.length > 0)
                ? `<ul>${order.payersIds.map(id => `<li>${id}</li>`).join('')}</ul>`
                : '<span>Nenhum pagador identificado.</span>';

            const detailsRow = `
                <tr class="details-row" id="details-row-${order.orderId}">
                    <td colspan="5">
                        <div class="details-content">
                            <h4>Detalhes da Ordem</h4>
                            <div class="detail-item">
                                <strong>Nome:</strong>
                                <span>${order.orderName || 'Não especificado'}</span>
                            </div>
                            <div class="detail-item">
                                <strong>ID da Ordem:</strong>
                                <span>${order.orderId}</span>
                            </div>
                            <div class="detail-item">
                                <strong>Data de Criação:</strong>
                                <span>${new Date(order.createdAt).toLocaleString('pt-BR', { dateStyle: 'short', timeStyle: 'short' })}</span>
                            </div>
                            <div class="detail-item">
                                <strong>Pagadores:</strong>
                                ${payersListHTML}
                            </div>
                        </div>
                    </td>
                </tr>`;

            tableBody.innerHTML += mainRow + detailsRow;
        });
        updatePaginationControls();
    }

    function toggleOrderDetails(event, orderId) {
        event.stopPropagation();
        const detailsRow = document.getElementById('details-row-' + orderId);
        const button = event.currentTarget;
        const icon = button.querySelector('i');
        
        const isExpanded = detailsRow.classList.toggle('is-expanded');
        button.setAttribute('aria-expanded', isExpanded);
        
        if (isExpanded) {
            icon.classList.remove('fa-chevron-down');
            icon.classList.add('fa-chevron-up');
        } else {
            icon.classList.remove('fa-chevron-up');
            icon.classList.add('fa-chevron-down');
        }
    }
    
    function updatePaginationControls() {
        totalPages = Math.ceil(recentOrders.length / ORDERS_PER_PAGE);
        const paginationControlsEl = document.querySelector('.pagination-controls');
        if (totalPages <= 1) {
            paginationControlsEl.style.display = 'none';
        } else {
            paginationControlsEl.style.display = 'flex';
        }
        pageIndicator.textContent = `Página ${currentPage} de ${totalPages}`;
        prevPageBtn.disabled = currentPage === 1;
        nextPageBtn.disabled = currentPage === totalPages;
    }

    function setupPaginationListeners() {
        prevPageBtn.addEventListener('click', () => { if (currentPage > 1) displayOrdersForPage(currentPage - 1); });
        nextPageBtn.addEventListener('click', () => { if (currentPage < totalPages) displayOrdersForPage(currentPage + 1); });
    }

    function updateDashboardDisplay() {
        const totalBalanceCents = (balance.data.available_amount || 0) + (balance.data.waiting_funds_amount || 0);
        document.getElementById('accountBalanceValue').textContent = formatCurrencyFromCents(totalBalanceCents);
        document.getElementById('totalSalesValue').textContent = formatCurrency(stats.totalValue || 0);
        document.getElementById('totalPaidValue').textContent = formatCurrency(stats.paidValue || 0);
        document.getElementById('totalOrdersValue').textContent = formatNumber(stats.totalOrders || 0);
        document.getElementById('paidOrdersValue').textContent = formatNumber(stats.paidOrders || 0);
        document.getElementById('newOrdersValue').textContent = formatNumber(stats.freshOrders || 0);
        document.getElementById('progressOrdersValue').textContent = formatNumber(stats.progressOrders || 0);
        document.getElementById('totalPayersValue').textContent = formatNumber(stats.totalPayers || 0);
        const averageTicket = (stats.totalOrders > 0) ? (stats.totalValue / stats.totalOrders) : 0;
        document.getElementById('averageTicketValue').textContent = formatCurrency(averageTicket);
        const conversionRate = (stats.totalOrders > 0) ? (stats.paidOrders / stats.totalOrders) * 100 : 0;
        document.getElementById('conversionRateValue').textContent = conversionRate.toFixed(1).replace('.', ',') + '%';
        updateSalesChart();
        updateStatusChart();
    }

    function updateSalesChart() { const ctx = document.getElementById('salesChart').getContext('2d'); const monthlySales = calculateMonthlySalesData(recentOrders); if (salesChart) { salesChart.destroy(); } salesChart = new Chart(ctx, { type: 'line', data: { labels: monthlySales.labels, datasets: [{ label: 'Vendas Totais (R$)', data: monthlySales.data, borderColor: getComputedStyle(document.documentElement).getPropertyValue('--primary-color'), backgroundColor: 'rgba(13, 110, 253, 0.1)', tension: 0.4, fill: true }] }, options: { responsive: true, maintainAspectRatio: false, plugins: { legend: { display: false } }, scales: { y: { ticks: { callback: value => formatCurrency(value) } } } } }); }
    function updateStatusChart() { const ctx = document.getElementById('statusChart').getContext('2d'); const statusData = [ stats.freshOrders || 0, stats.progressOrders || 0, stats.paidOrders || 0 ]; if (statusChart) { statusChart.destroy(); } statusChart = new Chart(ctx, { type: 'doughnut', data: { labels: ['Novas', 'Em Progresso', 'Pagas'], datasets: [{ data: statusData, backgroundColor: ['#6c757d', '#ffc107', '#198754'], borderColor: '#ffffff', borderWidth: 2 }] }, options: { responsive: true, maintainAspectRatio: false, cutout: '70%', plugins: { legend: { position: 'bottom', labels: { usePointStyle: true, boxWidth: 8 } }, tooltip: { callbacks: { label: function(context) { const total = context.dataset.data.reduce((a, b) => a + b, 0); const percentage = total > 0 ? ((context.parsed / total) * 100).toFixed(1) : 0; return ` ${context.label}: ${context.parsed} (${percentage}%)`; } } } } } }); }

    function updateDashboardWithNewOrder(newOrder) {
        recentOrders.unshift(newOrder); 
        stats.totalValue = (stats.totalValue || 0) + newOrder.totalValue;
        stats.totalOrders = (stats.totalOrders || 0) + 1;
        stats.freshOrders = (stats.freshOrders || 0) + 1;
        updateDashboardDisplay();
        displayOrdersForPage(1); 
    }

    document.getElementById('newOrderForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const orderNameInput = document.getElementById('orderName');
        const totalValueInput = document.getElementById('totalValue');
        const totalValue = parseFloat(totalValueInput.value);
        const orderName = orderNameInput.value.trim();
        const submitButton = e.target.querySelector('button[type="submit"]');
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Criando...';
        submitButton.disabled = true;

        try {
            const payload = {
                partnerId: localPartnerId,
                totalValue: totalValue,
                apiKey: localPartnerApiKey,
                name: orderName || undefined 
            };

            const response = await fetch('https://api.pagjunto.com/order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ message: 'Erro desconhecido.' }));
                throw new Error(errorData.message || `Erro HTTP: ${response.status}`);
            }
            const orderId = await response.json();
            
            const orderLinkElement = document.getElementById('orderLink');
            const orderCreationResult = document.getElementById('orderCreationResult');
            const generatedOrderLink = `https://pagjunto.com/${localPartnerId}/${orderId}`;
            orderLinkElement.href = generatedOrderLink;
            orderLinkElement.textContent = generatedOrderLink;
            orderCreationResult.style.display = 'flex';
            showToast('Ordem criada com sucesso!');
            
            const newOrder = {
                orderId: orderId,
                orderName: orderName,
                totalValue: totalValue,
                paidValue: 0,
                status: 'fresh',
                payersIds: [],
                createdAt: new Date().toISOString()
            };
            updateDashboardWithNewOrder(newOrder);
            
            totalValueInput.value = '';
            orderNameInput.value = '';

        } catch (error) {
            console.error('Erro ao criar ordem:', error);
            alert('Erro ao criar ordem: ' + error.message);
        } finally {
            submitButton.innerHTML = '<i class="fas fa-plus"></i> Gerar Ordem de Pagamento';
            submitButton.disabled = false;
        }
    });

    function copyToClipboard(text, successMessage) { navigator.clipboard.writeText(text).then(() => { showToast(successMessage); }).catch(err => { console.error('Falha ao copiar:', err); const textArea = document.createElement("textarea"); textArea.value = text; textArea.style.position = "fixed"; document.body.appendChild(textArea); textArea.focus(); textArea.select(); try { document.execCommand('copy'); showToast(successMessage); } catch (e) { console.error('Fallback falhou:', e); alert('Não foi possível copiar.'); } document.body.removeChild(textArea); }); }
    function copyOrderLink(event, orderId) { 
        event.stopPropagation();
        const orderLink = `https://pagjunto.com/${localPartnerId}/${orderId}`; 
        copyToClipboard(orderLink, 'Link da ordem copiado!'); 
    }
    document.getElementById('copyApiKeyButton').addEventListener('click', function() { copyToClipboard(localPartnerApiKey, 'Chave de API copiada!'); });
    function showToast(message) { const toast = document.getElementById('copyToast'); if (!toast) return; toast.textContent = message; toast.classList.add('show'); setTimeout(() => toast.classList.remove('show'), 3000); }

    function generateAndShowQrModal(link) {
        qrCodeContainer.innerHTML = ''; 
        new QRCode(qrCodeContainer, {
            text: link,
            width: 256,
            height: 256,
            colorDark: "#000000",
            colorLight: "#ffffff",
            correctLevel: QRCode.CorrectLevel.H
        });
        qrLinkText.textContent = link;
        qrCodeModal.style.display = 'block';
    }

    function showQrCode(event, orderId) {
        event.stopPropagation();
        const orderLink = `https://pagjunto.com/${localPartnerId}/${orderId}`;
        generateAndShowQrModal(orderLink);
    }

    function setupModalListeners() {
        qrCodeModalCloseBtn.onclick = function() {
            qrCodeModal.style.display = "none";
        }
        window.onclick = function(event) {
            if (event.target == qrCodeModal) {
                qrCodeModal.style.display = "none";
            }
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
        updateDashboardDisplay();
        setupPaginationListeners();
        setupModalListeners(); 
        displayOrdersForPage(1);

        document.getElementById('copyLinkButton').addEventListener('click', (event) => {
            event.stopPropagation();
            const link = document.getElementById('orderLink').href;
            copyToClipboard(link, 'Link da ordem copiado!');
            const button = event.currentTarget;
            const originalHTML = button.innerHTML;
            button.innerHTML = '<i class="fas fa-check"></i> Copiado!';
            setTimeout(() => {
                button.innerHTML = originalHTML;
            }, 2000);
        });

        document.getElementById('qrCodeNewOrderButton').addEventListener('click', (event) => {
            event.stopPropagation();
            const link = document.getElementById('orderLink').href;
            generateAndShowQrModal(link);
        });
        
        const animatedElements = document.querySelectorAll('.metric-card, .chart-card, .content-section, .create-order-section');
        animatedElements.forEach((el, index) => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(20px)';
            setTimeout(() => {
                el.style.transition = 'opacity 0.5s ease, transform 0.5s ease';
                el.style.opacity = '1';
                el.style.transform = 'translateY(0)';
            }, index * 60);
        });
    });
</script>
</body>
</html>