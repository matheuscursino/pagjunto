<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - <% if (typeof partnerData.partnerName !== 'undefined') { %><%= partnerData.partnerName %><% } else { %>PagJunto<% } %></title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    
    <style>
        :root {
            --primary: #0f172a;
            --primary-light: #1e293b;
            --accent: #3b82f6;
            --accent-light: #60a5fa;
            --accent-dark: #1d4ed8;
            
            --gray-50: #f8fafc;
            --gray-100: #f1f5f9;
            --gray-200: #e2e8f0;
            --gray-300: #cbd5e1;
            --gray-400: #94a3b8;
            --gray-500: #64748b;
            --gray-600: #475569;
            --gray-700: #334155;
            --gray-800: #1e293b;
            --gray-900: #0f172a;
            
            --success: #10b981;
            --warning: #f59e0b;
            --error: #ef4444;
            
            --sidebar-width: 280px;
            --header-height: 64px;
            
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
            
            --radius: 8px;
            --radius-lg: 12px;
            --radius-xl: 16px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--gray-50);
            color: var(--gray-900);
            line-height: 1.5;
            -webkit-font-smoothing: antialiased;
            overflow-x: hidden;
        }

        /* Layout Structure */
        .app-layout {
            display: flex;
            height: 100vh;
            overflow: hidden;
        }

        /* Sidebar */
        .sidebar {
            width: var(--sidebar-width);
            background: white;
            border-right: 1px solid var(--gray-200);
            display: flex;
            flex-direction: column;
            position: fixed;
            height: 100vh;
            z-index: 50;
            transition: transform 0.3s ease;
        }

        .sidebar-header {
            padding: 20px 24px;
            border-bottom: 1px solid var(--gray-200);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .logo {
            font-weight: 700;
            font-size: 1.5rem;
            color: var(--primary);
            text-decoration: none;
        }

        .sidebar-nav {
            flex: 1;
            padding: 24px 0;
            overflow-y: auto;
        }

        .nav-section {
            margin-bottom: 32px;
        }

        .nav-section-title {
            font-size: 0.75rem;
            font-weight: 600;
            color: var(--gray-500);
            text-transform: uppercase;
            letter-spacing: 0.05em;
            padding: 0 24px 8px;
        }

        .nav-item {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px 24px;
            color: var(--gray-600);
            text-decoration: none;
            font-weight: 500;
            transition: all 0.2s ease;
            cursor: pointer;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
        }

        .nav-item:hover {
            background: var(--gray-100);
            color: var(--gray-900);
        }

        .nav-item.active {
            background: var(--accent);
            color: white;
        }

        .nav-item.active:hover {
            background: var(--accent-dark);
        }

        .nav-icon {
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .sidebar-footer {
            padding: 24px;
            border-top: 1px solid var(--gray-200);
        }

        .user-profile {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            background: var(--gray-100);
            border-radius: var(--radius-lg);
            margin-bottom: 16px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            background: var(--accent);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
        }

        .user-info {
            flex: 1;
        }

        .user-name {
            font-weight: 600;
            color: var(--gray-900);
            font-size: 0.875rem;
        }

        .user-role {
            font-size: 0.75rem;
            color: var(--gray-500);
        }

        .logout-btn {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 12px;
            color: var(--gray-600);
            text-decoration: none;
            font-size: 0.875rem;
            border-radius: var(--radius);
            transition: all 0.2s ease;
        }

        .logout-btn:hover {
            background: var(--gray-200);
            color: var(--gray-900);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden;
        }

        .main-header {
            height: var(--header-height);
            background: white;
            border-bottom: 1px solid var(--gray-200);
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0 32px;
            position: sticky;
            top: 0;
            z-index: 40;
        }

        .page-title-section {
            display: flex;
            flex-direction: column;
        }

        .page-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--gray-900);
            margin: 0;
        }

        .page-subtitle {
            font-size: 0.875rem;
            color: var(--gray-500);
            margin: 0;
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .content-area {
            flex: 1;
            overflow-y: auto;
            padding: 32px;
        }

        /* Content Sections */
        .content-section {
            display: none;
        }

        .content-section.active {
            display: block;
        }

        /* Overview Section */
        .dashboard-filter-bar {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 24px;
            gap: 16px;
            align-items: center;
        }

        .dashboard-filter-bar label {
            font-weight: 500;
            color: var(--gray-700);
            font-size: 0.875rem;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 24px;
            margin-bottom: 32px;
        }

        .stat-card {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-xl);
            padding: 24px;
            transition: all 0.2s ease;
        }

        .stat-card:hover {
            box-shadow: var(--shadow-md);
            border-color: var(--gray-300);
        }

        .stat-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 16px;
        }

        .stat-title {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--gray-600);
        }

        .stat-icon {
            width: 40px;
            height: 40px;
            background: var(--gray-100);
            border-radius: var(--radius-lg);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--gray-600);
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: 4px;
        }

        .stat-description {
            font-size: 0.875rem;
            color: var(--gray-500);
        }

        .charts-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 24px;
            margin-bottom: 32px;
        }

        .chart-card {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-xl);
            padding: 24px;
        }

        .chart-header {
            margin-bottom: 24px;
        }

        .chart-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--gray-900);
        }

        .chart-container {
            height: 300px;
            position: relative;
        }

        /* Orders Section */
        .orders-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 24px;
            flex-wrap: wrap;
            gap: 16px;
        }

        .search-filter-bar {
            display: flex;
            gap: 16px;
            align-items: center;
            flex-wrap: wrap;
        }

        .search-input {
            padding: 8px 12px;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius);
            font-size: 0.875rem;
            width: 300px;
        }

        .filter-select {
            padding: 8px 12px;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius);
            font-size: 0.875rem;
            background: white;
        }
        
        #create-order-container {
            display: none;
            margin-bottom: 32px;
        }

        .orders-table {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-xl);
            overflow: hidden;
        }

        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th {
            background: var(--gray-50);
            padding: 16px 20px;
            text-align: left;
            font-weight: 600;
            font-size: 0.875rem;
            color: var(--gray-700);
            border-bottom: 1px solid var(--gray-200);
        }

        .table td {
            padding: 16px 20px;
            border-bottom: 1px solid var(--gray-100);
            font-size: 0.875rem;
        }

        .table tr:hover {
            background: var(--gray-50);
        }

        .order-info {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .order-name {
            font-weight: 500;
            color: var(--gray-900);
        }

        .order-id {
            font-size: 0.75rem;
            color: var(--gray-500);
            font-family: 'SF Mono', Consolas, monospace;
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: var(--radius);
            font-size: 0.75rem;
            font-weight: 500;
        }

        .status-fresh {
            background: var(--gray-100);
            color: var(--gray-700);
        }

        .status-progress {
            background: #fef3c7;
            color: #92400e;
        }

        .status-paid {
            background: #d1fae5;
            color: #065f46;
        }

        .table-actions {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            padding: 6px 12px;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius);
            background: white;
            color: var(--gray-600);
            font-size: 0.75rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .action-btn:hover {
            background: var(--gray-100);
            color: var(--gray-900);
        }

        .action-btn-primary {
            background: var(--accent);
            color: white;
            border-color: var(--accent);
        }

        .action-btn-primary:hover {
            background: var(--accent-dark);
        }

        .action-btn-success {
            background: var(--success);
            color: white;
            border-color: var(--success);
        }

        .action-btn-success:hover {
            background: #059669;
        }

        .action-btn-danger {
            background: var(--error);
            color: white;
            border-color: var(--error);
        }

        .action-btn-danger:hover {
            background: #dc2626;
        }

        /* Create Order Section */
        .create-order-form {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-xl);
            padding: 32px;
            max-width: 600px;
            margin: 0 auto;
        }

        .form-header {
            margin-bottom: 32px;
        }

        .form-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: 8px;
        }

        .form-subtitle {
            color: var(--gray-600);
        }

        .form-group {
            margin-bottom: 24px;
        }

        .form-label {
            display: block;
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--gray-700);
            margin-bottom: 8px;
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius);
            font-size: 0.875rem;
            transition: all 0.2s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .form-select {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--gray-300);
            border-radius: var(--radius);
            font-size: 0.875rem;
            background: white;
            transition: all 0.2s ease;
        }

        .form-select:focus {
            outline: none;
            border-color: var(--accent);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 12px 20px;
            border-radius: var(--radius);
            font-size: 0.875rem;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.2s ease;
            cursor: pointer;
            border: none;
        }

        .btn-primary {
            background: var(--accent);
            color: white;
        }

        .btn-primary:hover {
            background: var(--accent-dark);
        }

        .btn-secondary {
            background: white;
            color: var(--gray-700);
            border: 1px solid var(--gray-300);
        }

        .btn-secondary:hover {
            background: var(--gray-100);
        }

        .btn-success {
            background: var(--success);
            color: white;
        }

        .btn-success:hover {
            background: #059669;
        }

        .btn-danger {
            background: var(--error);
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .order-result {
            margin-top: 24px;
            padding: 20px;
            background: #f0fdf4;
            border: 1px solid #bbf7d0;
            border-radius: var(--radius-lg);
            display: none;
        }

        .order-result.show {
            display: block;
        }

        .result-header {
            font-weight: 600;
            color: #166534;
            margin-bottom: 12px;
        }

        .result-link {
            color: #166534;
            word-break: break-all;
            margin-bottom: 16px;
            display: block;
        }

        .result-actions {
            display: flex;
            gap: 12px;
        }

        /* Settings Section */
        .settings-card {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-xl);
            padding: 32px;
            margin-bottom: 24px;
        }

        .settings-header {
            margin-bottom: 24px;
        }

        .settings-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--gray-900);
            margin-bottom: 8px;
        }

        .settings-description {
            color: var(--gray-600);
        }

        .api-key-container {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .api-key-input {
            flex: 1;
            font-family: 'SF Mono', Consolas, monospace;
            background: var(--gray-50);
        }

        /* Employees Section Styles */
        .employees-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 24px;
            flex-wrap: wrap;
            gap: 16px;
        }

        .employees-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            margin-bottom: 24px;
        }

        .employee-stat-card {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-lg);
            padding: 20px;
            text-align: center;
        }

        .employee-stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: 4px;
        }

        .employee-stat-label {
            font-size: 0.875rem;
            color: var(--gray-500);
        }

        #create-employee-container {
            display: none;
            margin-bottom: 32px;
        }

        .create-employee-form {
            background: white;
            border: 1px solid var(--gray-200);
            border-radius: var(--radius-xl);
            padding: 32px;
            max-width: 600px;
            margin: 0 auto;
        }

        .employee-result {
            margin-top: 24px;
            padding: 20px;
            background: #f0fdf4;
            border: 1px solid #bbf7d0;
            border-radius: var(--radius-lg);
            display: none;
        }

        .employee-result.show {
            display: block;
        }

        /* Mobile Sidebar */
        .mobile-sidebar-toggle {
            display: none;
            background: none;
            border: none;
            font-size: 1.25rem;
            color: var(--gray-600);
            cursor: pointer;
        }

        .sidebar-overlay {
            display: none;
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 45;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            inset: 0;
            z-index: 100;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: var(--radius-xl);
            padding: 32px;
            max-width: 400px;
            width: 90%;
            position: relative;
        }

        .modal-header {
            text-align: center;
            margin-bottom: 24px;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--gray-900);
        }

        .modal-close {
            position: absolute;
            top: 16px;
            right: 16px;
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--gray-400);
            cursor: pointer;
        }

        .qr-container {
            display: flex;
            justify-content: center;
            padding: 20px;
            background: var(--gray-50);
            border-radius: var(--radius-lg);
            margin-bottom: 16px;
        }

        .qr-link {
            text-align: center;
            font-size: 0.75rem;
            color: var(--gray-500);
            word-break: break-all;
        }

        /* Toast */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--success);
            color: white;
            padding: 16px 20px;
            border-radius: var(--radius-lg);
            font-weight: 500;
            transform: translateX(calc(100% + 20px));
            transition: transform 0.3s ease;
            z-index: 200;
        }

        .toast.show {
            transform: translateX(0);
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .charts-container {
                grid-template-columns: 1fr;
            }
        }

        /* Mobile Responsive Improvements */
        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                width: 100%;
                max-width: 320px;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            .mobile-sidebar-toggle {
                display: block;
            }

            .content-area {
                padding: 16px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
                gap: 16px;
            }

            .charts-container {
                grid-template-columns: 1fr;
                gap: 16px;
            }
            
            .orders-header {
                flex-direction: column;
                align-items: stretch;
            }

            .search-filter-bar {
                flex-direction: column;
                gap: 12px;
                width: 100%;
            }

            .search-input, .filter-select, .search-filter-bar > .btn {
                width: 100%;
            }

            .hide-mobile {
                display: none;
            }

            .table-actions {
                flex-direction: column;
                gap: 4px;
            }

            .action-btn {
                padding: 8px 12px;
                font-size: 0.75rem;
            }

            .form-group {
                margin-bottom: 20px;
            }

            .api-key-container {
                flex-direction: column;
                gap: 12px;
            }

            .result-actions {
                flex-direction: column;
                gap: 8px;
            }

            .employees-header {
                flex-direction: column;
                align-items: stretch;
            }

            .employees-stats {
                grid-template-columns: 1fr;
            }
        }

        /* Touch-friendly improvements */
        @media (hover: none) and (pointer: coarse) {
            .nav-item, .action-btn, .btn {
                min-height: 44px;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .stat-card {
                padding: 20px;
            }

            .form-input {
                padding: 16px;
                font-size: 16px;
            }
        }

        /* Details Row Styles */
        .details-row {
            display: none;
        }

        .details-row.expanded {
            display: table-row;
        }

        .details-content {
            background: var(--gray-50);
            padding: 20px;
            border-radius: var(--radius-lg);
            margin: 12px;
        }

        .details-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            margin-bottom: 16px;
        }

        .detail-item {
            display: flex;
            flex-direction: column;
            gap: 4px;
        }

        .detail-label {
            font-size: 0.75rem;
            font-weight: 500;
            color: var(--gray-500);
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .detail-value {
            font-size: 0.875rem;
            color: var(--gray-900);
        }

        .payers-list {
            list-style: none;
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .payer-item {
            background: white;
            padding: 12px;
            border-radius: var(--radius);
            border: 1px solid var(--gray-200);
        }

        .payer-name {
            font-weight: 500;
            color: var(--gray-900);
            margin-bottom: 4px;
        }

        .payer-id {
            font-size: 0.75rem;
            color: var(--gray-500);
            font-family: 'SF Mono', Consolas, monospace;
            margin-bottom: 4px;
        }

        .payer-amount {
            font-weight: 600;
            color: var(--success);
        }

        /* Mobile Order Cards */
        @media (max-width: 768px) {
            .orders-table {
                display: none;
            }

            .mobile-orders-container {
                display: block;
            }
        }
    </style>
</head>
<body>
    <div class="app-layout">
        <aside class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <a href="/" class="logo">pagjunto</a>
            </div>
            <nav class="sidebar-nav">
                <div class="nav-section">
                    <div class="nav-section-title">Principal</div>
                    
                    <% if (partnerData.role !== 'employee') { %>
                        <button class="nav-item active" data-section="overview">
                            <div class="nav-icon"><i class="fas fa-chart-pie"></i></div>
                            Visão Geral
                        </button>
                    <% } %>

                    <button class="nav-item <% if (partnerData.role === 'employee') { %>active<% } %>" data-section="orders">
                        <div class="nav-icon"><i class="fas fa-list-alt"></i></div>
                        Pedidos
                    </button>

                    <% if (partnerData.role !== 'employee') { %>
                        <button class="nav-item" data-section="employees">
                            <div class="nav-icon"><i class="fas fa-users"></i></div>
                            Funcionários
                        </button>
                    <% } %>
                </div>
                
                <% if (partnerData.role !== 'employee') { %>
                    <div class="nav-section">
                        <div class="nav-section-title">Conta</div>
                        <button class="nav-item" data-section="settings">
                            <div class="nav-icon"><i class="fas fa-cog"></i></div>
                            Configurações
                        </button>
                    </div>
                <% } %>
            </nav>
            <div class="sidebar-footer">
                <div class="user-profile">
                    <div class="user-avatar">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="user-info">
                        <div class="user-name"><% if (typeof partnerData.partnerName !== 'undefined') { %><%= partnerData.partnerName %><% } else { %>Parceiro<% } %></div>
                        <div class="user-role"><% if (partnerData.role === 'employee') { %>Funcionário<% } else { %>Administrador<% } %></div>
                    </div>
                </div>
                <a href="/logout" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i>
                    Sair
                </a>
            </div>
        </aside>

        <div class="sidebar-overlay" id="sidebarOverlay"></div>

        <main class="main-content">
            <header class="main-header">
                <button class="mobile-sidebar-toggle" id="sidebarToggle">
                    <i class="fas fa-bars"></i>
                </button>
                <div class="page-title-section">
                    <h1 class="page-title" id="pageTitle"><% if (partnerData.role === 'employee') { %>Pedidos<% } else { %>Visão Geral<% } %></h1>
                    <p class="page-subtitle" id="pageSubtitle"><% if (partnerData.role === 'employee') { %>Gerencie e acompanhe seus pedidos de pagamento<% } else { %>Dashboard executivo da sua conta<% } %></p>
                </div>
                <div class="header-actions">
                </div>
            </header>

            <div class="content-area">
                
                <% if (partnerData.role !== 'employee') { %>
                <section class="content-section active" id="overview-section">
                    <div class="dashboard-filter-bar">
                        <label for="dateRangeFilter">Mostrar dados de:</label>
                        <select id="dateRangeFilter" class="filter-select">
                            <option value="all">Todo o período</option>
                            <option value="7d">Últimos 7 dias</option>
                            <option value="30d" selected>Últimos 30 dias</option>
                            <option value="90d">Últimos 90 dias</option>
                            <option value="this_month">Este mês</option>
                        </select>
                    </div>

                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-header">
                                <span class="stat-title">Saldo da Conta</span>
                                <div class="stat-icon"><i class="fas fa-wallet"></i></div>
                            </div>
                            <div class="stat-value" id="accountBalanceValue">R$ 0,00</div>
                            <div class="stat-description">Disponível + A receber</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-header">
                                <span class="stat-title">Vendas Totais</span>
                                <div class="stat-icon"><i class="fas fa-chart-line"></i></div>
                            </div>
                            <div class="stat-value" id="totalSalesValue">R$ 0,00</div>
                            <div class="stat-description">Valor bruto no período</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-header">
                                <span class="stat-title">Valor Recebido</span>
                                <div class="stat-icon"><i class="fas fa-money-bill-wave"></i></div>
                            </div>
                            <div class="stat-value" id="totalPaidValue">R$ 0,00</div>
                            <div class="stat-description">Valor pago no período</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-header">
                                <span class="stat-title">Total de Pedidos</span>
                                <div class="stat-icon"><i class="fas fa-box"></i></div>
                            </div>
                            <div class="stat-value" id="totalOrdersValue">0</div>
                            <div class="stat-description">Pedidos criados no período</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-header">
                                <span class="stat-title">Pedidos Pagos</span>
                                <div class="stat-icon"><i class="fas fa-check-double"></i></div>
                            </div>
                            <div class="stat-value" id="paidOrdersValue">0</div>
                            <div class="stat-description">Finalizados no período</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-header">
                                <span class="stat-title">Pedidos Novos</span>
                                <div class="stat-icon"><i class="fas fa-plus-square"></i></div>
                            </div>
                            <div class="stat-value" id="freshOrdersValue">0</div>
                            <div class="stat-description">Aguardando pag. no período</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-header">
                                <span class="stat-title">Pedidos em Progresso</span>
                                <div class="stat-icon"><i class="fas fa-clock"></i></div>
                            </div>
                            <div class="stat-value" id="progressOrdersValue">0</div>
                            <div class="stat-description">Pagamento parcial no período</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-header">
                                <span class="stat-title">Ticket Médio</span>
                                <div class="stat-icon"><i class="fas fa-calculator"></i></div>
                            </div>
                            <div class="stat-value" id="averageTicketValue">R$ 0,00</div>
                            <div class="stat-description">Valor médio por pedido no período</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-header">
                                <span class="stat-title">Taxa de Conversão</span>
                                <div class="stat-icon"><i class="fas fa-bullseye"></i></div>
                            </div>
                            <div class="stat-value" id="conversionRateValue">0%</div>
                            <div class="stat-description">% de pedidos pagos no período</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-header">
                                <span class="stat-title">Total de Pagadores</span>
                                <div class="stat-icon"><i class="fas fa-users"></i></div>
                            </div>
                            <div class="stat-value" id="totalPayersValue">0</div>
                            <div class="stat-description">Clientes únicos no período</div>
                        </div>
                    </div>

                    <div class="charts-container">
                        <div class="chart-card">
                            <div class="chart-header">
                                <h3 class="chart-title">Tendência de Vendas Mensal</h3>
                            </div>
                            <div class="chart-container">
                                <canvas id="salesChart"></canvas>
                            </div>
                        </div>
                        <div class="chart-card">
                            <div class="chart-header">
                                <h3 class="chart-title">Status dos Pedidos</h3>
                            </div>
                            <div class="chart-container">
                                <canvas id="statusChart"></canvas>
                            </div>
                        </div>
                        <div class="chart-card">
                            <div class="chart-header">
                                <h3 class="chart-title">Vendas por Dia</h3>
                            </div>
                            <div class="chart-container">
                                <canvas id="dailySalesChart"></canvas>
                            </div>
                        </div>
                        <div class="chart-card">
                            <div class="chart-header">
                                <h3 class="chart-title">Conversão de Pedidos</h3>
                            </div>
                            <div class="chart-container">
                                <canvas id="conversionTrendChart"></canvas>
                            </div>
                        </div>
                    </div>
                </section>
                <% } %>

                <section class="content-section <% if (partnerData.role === 'employee') { %>active<% } %>" id="orders-section">
                    <div class="orders-header">
                        <div class="search-filter-bar">
                            <input type="text" class="search-input" placeholder="Buscar pedidos..." id="searchInput">
                            <select class="filter-select" id="statusFilter">
                                <option value="">Todos os status</option>
                                <option value="fresh">Nova</option>
                                <option value="progress">Em Progresso</option>
                                <option value="paid">Pago</option>
                            </select>
                            <select class="filter-select" id="orderDateFilter">
                                <option value="all">Todas as datas</option>
                                <option value="7d">Últimos 7 dias</option>
                                <option value="30d">Últimos 30 dias</option>
                                <option value="90d">Últimos 90 dias</option>
                                <option value="this_month">Este mês</option>
                            </select>
                            <% if (partnerData.role !== 'employee') { %>
                                <button id="exportOrdersBtn" class="btn btn-secondary" style="padding: 8px 16px;">
                                    <i class="fas fa-file-export"></i>
                                    <span>Exportar</span>
                                </button>
                            <% } %>
                        </div>
                        <div class="header-actions">
                            <button id="showCreateOrderBtn" class="btn btn-primary">
                                <i class="fas fa-plus"></i>
                                <span>Criar Novo Pedido</span>
                            </button>
                        </div>
                    </div>

                    <div id="create-order-container">
                        <div class="create-order-form">
                            <div class="form-header">
                                <h2 class="form-title">Criar Novo Pedido</h2>
                                <p class="form-subtitle">Gere um novo pedido de pagamento para seus clientes</p>
                            </div>
                            <form id="newOrderForm">
                                <div class="form-group">
                                    <label for="orderName" class="form-label">Nome do Pedido (Opcional)</label>
                                    <input type="text" id="orderName" name="orderName" class="form-input" placeholder="Ex: Pedido mesa 7">
                                </div>
                                <div class="form-group">
                                    <label for="totalValue" class="form-label">Valor Total do Pedido</label>
                                    <input type="number" id="totalValue" name="totalValue" class="form-input" step="0.01" min="0.01" required placeholder="Ex: 150.00">
                                </div>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-plus"></i>
                                    Gerar Pedido de Pagamento
                                </button>
                            </form>
                            <div id="orderCreationResult" class="order-result">
                                <div class="result-header">Pedido criado com sucesso!</div>
                                <a id="orderLink" href="#" target="_blank" class="result-link"></a>
                                <div class="result-actions">
                                    <button id="copyLinkButton" class="btn btn-success">
                                        <i class="fas fa-copy"></i>
                                        Copiar Link
                                    </button>
                                    <button id="qrCodeNewOrderButton" class="btn btn-success">
                                        <i class="fas fa-qrcode"></i>
                                        QR Code
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="orders-table">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Pedido</th>
                                    <th>Valor Total</th>
                                    <th>Valor Pago</th>
                                    <th>Status</th>
                                    <th class="hide-mobile">Data</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody id="ordersTableBody"></tbody>
                        </table>
                    </div>
                    <div class="mobile-orders-container" id="mobileOrdersContainer"></div>
                </section>
                
                <% if (partnerData.role !== 'employee') { %>
                <section class="content-section" id="employees-section">
                    <div class="employees-header">
                        <div class="search-filter-bar">
                            <input type="text" class="search-input" placeholder="Buscar funcionários..." id="employeeSearchInput">
                        </div>
                        <div class="header-actions">
                            <button id="showCreateEmployeeBtn" class="btn btn-primary">
                                <i class="fas fa-user-plus"></i>
                                <span>Criar Login</span>
                            </button>
                        </div>
                    </div>

                    <div class="employees-stats">
                        <div class="employee-stat-card">
                            <div class="employee-stat-value" id="totalEmployeesValue">0</div>
                            <div class="employee-stat-label">Total de Funcionários</div>
                        </div>
                    </div>

                    <div id="create-employee-container">
                        <div class="create-employee-form">
                            <div class="form-header">
                                <h2 class="form-title">Criar Login para Funcionário</h2>
                                <p class="form-subtitle">Crie um novo acesso para um funcionário da sua empresa</p>
                            </div>
                            <form id="newEmployeeForm">
                                <div class="form-group">
                                    <label for="employeeName" class="form-label">Nome Completo</label>
                                    <input type="text" id="employeeName" name="employeeName" class="form-input" required placeholder="Ex: João Silva">
                                </div>
                                <div class="form-group">
                                    <label for="employeeEmail" class="form-label">Email</label>
                                    <input type="email" id="employeeEmail" name="employeeEmail" class="form-input" required placeholder="Ex: joao@empresa.com">
                                </div>
                                <div class="form-group">
                                    <label for="employeePassword" class="form-label">Senha</label>
                                    <input type="password" id="employeePassword" name="employeePassword" class="form-input" required placeholder="Mínimo 5 caracteres">
                                </div>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-user-plus"></i>
                                    Criar Login do Funcionário
                                </button>
                            </form>
                            <div id="employeeCreationResult" class="employee-result">
                                <div class="result-header">Login criado com sucesso!</div>
                                <p id="employeeResultMessage"></p>
                            </div>
                        </div>
                    </div>

                    <div class="orders-table">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Funcionário</th>
                                    <th>Email</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody id="employeesTableBody"></tbody>
                        </table>
                    </div>
                </section>

                <section class="content-section" id="settings-section">
                    <div class="settings-card">
                        <div class="settings-header">
                            <h3 class="settings-title">Chave de API</h3>
                            <p class="settings-description">Use esta chave para integrar seus sistemas com nossa plataforma. Mantenha-a segura.</p>
                        </div>
                        <div class="api-key-container">
                            <input type="text" id="apiKeyInput" class="form-input api-key-input"
                                   value="<%= partnerData.apiKey.substring(0, 8) + '••••••••••••••••••••' + partnerData.apiKey.substring(partnerData.apiKey.length - 4) %>"
                                   readonly>
                            <button id="copyApiKeyButton" class="btn btn-primary">
                                <i class="fas fa-copy"></i>
                                Copiar Chave
                            </button>
                        </div>
                    </div>

                    <div class="settings-card">
                        <div class="settings-header">
                            <h3 class="settings-title">ID de parceiro (partnerId)</h3>
                            <p class="settings-description">Este é o seu identificador de parceiro Pagjunto.</p>
                        </div>
                        <div class="api-key-container">
                            <input type="text" id="recipientIdInput" class="form-input api-key-input"
                                   value="<%= partnerData.partnerId %>"
                                   readonly>
                            <button id="copyRecipientIdButton" class="btn btn-primary">
                                <i class="fas fa-copy"></i>
                                Copiar ID
                            </button>
                        </div>
                    </div>

                    <div class="settings-card">
                        <div class="settings-header">
                            <h3 class="settings-title">Configurar Webhook</h3>
                            <p class="settings-description">Informe uma URL para receber notificações automáticas sempre que um pedido for totalmente pago.</p>
                        </div>
                        <form id="webhookForm">
                            <div class="api-key-container">
                                <input type="url" id="webhookUrlInput" class="form-input api-key-input"
                                       placeholder="https://seusite.com/webhook"
                                       value="<%= partnerData.webhookUrl || '' %>">
                                <button type="submit" id="saveWebhookButton" class="btn btn-primary">
                                    <i class="fas fa-save"></i>
                                    Salvar URL
                                </button>
                            </div>
                            <p id="webhookSaveStatus" style="margin-top: 10px; font-size: 0.875rem;"></p>
                        </form>
                    </div>
                </section>
                <% } %>
            </div>
        </main>
    </div>

    <div id="qrCodeModal" class="modal">
        <div class="modal-content">
            <button class="modal-close" id="closeQrModal">&times;</button>
            <div class="modal-header">
                <h2 class="modal-title">QR Code do Pedido</h2>
            </div>
            <div class="qr-container" id="qrcode-container"></div>
            <p id="qrLinkText" class="qr-link"></p>
        </div>
    </div>
    
    <% if (partnerData.role !== 'employee') { %>
    <div id="deleteEmployeeModal" class="modal">
        <div class="modal-content">
            <button class="modal-close" id="closeDeleteModal">&times;</button>
            <div class="modal-header">
                <h2 class="modal-title">Confirmar Exclusão</h2>
            </div>
            <p style="margin-bottom: 24px; text-align: center;">Tem certeza que deseja remover este funcionário? Esta ação não pode ser desfeita.</p>
            <div style="display: flex; gap: 12px; justify-content: center;">
                <button id="cancelDeleteBtn" class="btn btn-secondary">Cancelar</button>
                <button id="confirmDeleteBtn" class="btn btn-danger">Remover Funcionário</button>
            </div>
        </div>
    </div>
    <% } %>

    <div id="copyToast" class="toast"></div>

    <script>
        // Variáveis globais
        const localPartnerId = "<%= partnerData.partnerId %>";
        const localPartnerApiKey = "<%= partnerData.apiKey %>";
        const localRecipientId = "<%= partnerData.recipient_id %>";
        const allOrders = <%- JSON.stringify(orders || []) %>;
        
        // MODIFICAÇÃO: Variáveis do modo 'partner' inicializadas condicionalmente
        <% if (partnerData.role !== 'employee') { %>
        const balance = <%- JSON.stringify(balance || { data: {} }) %>;
        let allEmployees = []; // Começa vazio, será populado pela API
        let filteredEmployeesForTable = [];
        let salesChart, statusChart, dailySalesChart, conversionTrendChart;
        let chartColors = {};
        let employeeToDelete = null;
        <% } %>
        
        let filteredOrdersForTable = [...allOrders];

        allOrders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));


        // --- FUNÇÕES DE NAVEGAÇÃO E UI ---
        function initNavigation() {
            const navItems = document.querySelectorAll('.nav-item');
            const sections = document.querySelectorAll('.content-section');
            const pageTitle = document.getElementById('pageTitle');
            const pageSubtitle = document.getElementById('pageSubtitle');

            const sectionTitles = {
                overview: { title: 'Visão Geral', subtitle: 'Dashboard executivo da sua conta' },
                orders: { title: 'Pedidos', subtitle: 'Gerencie e acompanhe seus pedidos de pagamento' },
                employees: { title: 'Funcionários', subtitle: 'Gerencie logins e acesso dos funcionários' },
                settings: { title: 'Configurações', subtitle: 'Gerencie suas configurações de conta' }
            };
            
            // Se houver apenas um item (caso do funcionário), não há necessidade de navegação
            if(navItems.length <= 1) return;

            navItems.forEach(item => {
                item.addEventListener('click', () => {
                    const targetSection = item.dataset.section;
                    
                    navItems.forEach(nav => nav.classList.remove('active'));
                    item.classList.add('active');
                    
                    sections.forEach(section => section.classList.remove('active'));
                    document.getElementById(`${targetSection}-section`).classList.add('active');
                    
                    const titleData = sectionTitles[targetSection];
                    pageTitle.textContent = titleData.title;
                    pageSubtitle.textContent = titleData.subtitle;
                    
                    closeMobileSidebar();
                });
            });
        }

        function initMobileSidebar() {
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');

            sidebarToggle.addEventListener('click', () => {
                sidebar.classList.add('open');
                sidebarOverlay.style.display = 'block';
            });

            sidebarOverlay.addEventListener('click', closeMobileSidebar);
        }

        function closeMobileSidebar() {
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            sidebar.classList.remove('open');
            sidebarOverlay.style.display = 'none';
        }

        // --- FUNÇÕES UTILITÁRIAS ---
        function formatCurrency(value) {
            const numValue = typeof value === 'string' ? parseFloat(value) : value;
            if (isNaN(numValue)) return 'R$ 0,00';
            return numValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        }

        function formatCurrencyFromCents(cents) {
            const reais = (Number(cents) || 0) / 100;
            return formatCurrency(reais);
        }

        function formatNumber(value) {
            const numValue = Number(value);
            if (isNaN(numValue)) return '0';
            return numValue.toLocaleString('pt-BR');
        }

        function translateStatus(status) {
            const translations = { fresh: 'Nova', progress: 'Em Progresso', paid: 'Pago' };
            return translations[status] || status;
        }

        function maskCPF(cpf) {
            if (!cpf || typeof cpf !== 'string') return 'N/A';
            const cleanCpf = cpf.replace(/\D/g, '');
            if (cleanCpf.length !== 11) return cpf;
            return `${cleanCpf.substring(0, 3)}.***.***-${cleanCpf.substring(9, 12)}`;
        }


        // MODIFICAÇÃO: Todas as funções de funcionários, dashboard e configurações agora estão dentro do bloco condicional
        <% if (partnerData.role !== 'employee') { %>
        // --- FUNÇÕES PARA FUNCIONÁRIOS (NOVAS E CORRIGIDAS) ---
        async function fetchEmployees() {
            try {
                const url = `<%=process.env.API_SITE_URL%>/partner/employee?partnerId=${localPartnerId}`;
                const response = await fetch(url, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                });

                if (!response.ok) {
                    console.log(response)
                }
                const data = await response.json();
                allEmployees = data.employees || [];
                filteredEmployeesForTable = [...allEmployees];
                
                updateEmployeeStats();
                displayEmployees();

            } catch (error) {
                console.error("Error fetching employees from API:", error);
                showToast("Erro ao carregar funcionários.");
            }
        }

        function updateEmployeeStats() {
            const totalEmployees = allEmployees.length;
            document.getElementById('totalEmployeesValue').textContent = totalEmployees;
        }
        
        function displayEmployees(employees = filteredEmployeesForTable) {
            const tableBody = document.getElementById('employeesTableBody');
            tableBody.innerHTML = '';

            if (employees.length === 0) {
                const noDataMessage = `<tr><td colspan="3" style="text-align: center; color: var(--gray-500); padding: 2rem;">Nenhum funcionário encontrado.</td></tr>`;
                tableBody.innerHTML = noDataMessage;
                return;
            }

            employees.forEach(employee => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div class="order-info">
                            <div class="order-name">${employee.name}</div>
                            <div class="order-id">ID: ${employee.partnerId}</div>
                        </div>
                    </td>
                    <td>${employee.email}</td>
                    <td>
                        <div class="table-actions">
                            <button class="action-btn action-btn-danger" onclick="showDeleteEmployeeModal('${employee.partnerId}')" title="Remover">
                                <i class="fas fa-trash"></i>
                                <span class="hide-mobile">Remover</span>
                            </button>
                        </div>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        function initEmployeeSearchAndFilter() {
            const searchInput = document.getElementById('employeeSearchInput');
            searchInput.addEventListener('input', () => {
                const searchTerm = searchInput.value.toLowerCase();
                filteredEmployeesForTable = allEmployees.filter(employee => {
                    return employee.name.toLowerCase().includes(searchTerm) ||
                           employee.email.toLowerCase().includes(searchTerm);
                });
                displayEmployees(filteredEmployeesForTable);
            });
        }

        async function deleteEmployee() {
            if (employeeToDelete) {
                try {
                    const response = await fetch(`<%=process.env.API_SITE_URL%>/partner/employee`, {
                        method: 'DELETE',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            employeeId: employeeToDelete,
                            partnerId: localPartnerId
                        })
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Falha ao remover funcionário.');
                    }
                    
                    showToast('Funcionário removido com sucesso!');
                    await fetchEmployees(); // Recarrega a lista da API
                    
                    document.getElementById('deleteEmployeeModal').classList.remove('show');
                    employeeToDelete = null;

                } catch (error) {
                    console.error("Error deleting employee:", error);
                    showToast(error.message);
                }
            }
        }

        function showDeleteEmployeeModal(employeeId) {
            employeeToDelete = employeeId;
            document.getElementById('deleteEmployeeModal').classList.add('show');
        }


        // --- LÓGICA DE CORES DINÂMICAS ---
        function getCssVariable(variable) {
            return getComputedStyle(document.documentElement).getPropertyValue(variable).trim();
        }

        function initializeChartColors() {
            chartColors = {
                accent: getCssVariable('--accent'),
                accentLight: getCssVariable('--accent-light'),
                accentTransparent: getCssVariable('--accent').replace(')', ', 0.1)').replace('rgb', 'rgba'),
                success: getCssVariable('--success'),
                warning: getCssVariable('--warning'),
                gray400: getCssVariable('--gray-400'),
                white: '#ffffff',
                gridColor: getCssVariable('--gray-100'),
                textColor: getCssVariable('--gray-500'),
                legendColor: getCssVariable('--gray-600')
            };
        }

        // --- LÓGICA DE ATUALIZAÇÃO DO DASHBOARD ---
        function updateDashboard(orders) {
            updateStatsCards(orders);
            updateAllCharts(orders);
        }

        function updateStatsCards(orders) {
            const stats = orders.reduce((acc, order) => {
                acc.totalValue += order.totalValue || 0;
                acc.paidValue += order.paidValue || 0;
                if (order.status === 'paid') acc.paidOrders += 1;
                if (order.status === 'fresh') acc.freshOrders += 1;
                if (order.status === 'progress') acc.progressOrders += 1;
                if (Array.isArray(order.payersIds)) {
                    order.payersIds.forEach(id => acc.uniquePayers.add(id));
                }
                return acc;
            }, {
                totalValue: 0, paidValue: 0, paidOrders: 0, freshOrders: 0,
                progressOrders: 0, uniquePayers: new Set()
            });

            const totalOrders = orders.length;
            const totalBalanceCents = (balance.data.available_amount || 0) + (balance.data.waiting_funds_amount || 0);

            document.getElementById('accountBalanceValue').textContent = formatCurrencyFromCents(totalBalanceCents);
            document.getElementById('totalSalesValue').textContent = formatCurrency(stats.totalValue);
            document.getElementById('totalPaidValue').textContent = formatCurrency(stats.paidValue);
            document.getElementById('totalOrdersValue').textContent = formatNumber(totalOrders);
            document.getElementById('paidOrdersValue').textContent = formatNumber(stats.paidOrders);
            document.getElementById('freshOrdersValue').textContent = formatNumber(stats.freshOrders);
            document.getElementById('progressOrdersValue').textContent = formatNumber(stats.progressOrders);

            const conversionRate = totalOrders > 0 ? (stats.paidOrders / totalOrders) * 100 : 0;
            document.getElementById('conversionRateValue').textContent = `${conversionRate.toFixed(1).replace('.', ',')}%`;

            const averageTicket = totalOrders > 0 ? (stats.totalValue / totalOrders) : 0;
            document.getElementById('averageTicketValue').textContent = formatCurrency(averageTicket);

            document.getElementById('totalPayersValue').textContent = formatNumber(stats.uniquePayers.size);
        }

        function updateAllCharts(orders) {
            updateSalesChart(orders);
            updateStatusChart(orders);
            updateDailySalesChart(orders);
            updateConversionTrendChart(orders);
        }

        function getChartConfig() {
            return {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: { color: chartColors.gridColor },
                        ticks: { color: chartColors.textColor }
                    },
                    x: {
                        grid: { display: false },
                        ticks: { color: chartColors.textColor }
                    }
                },
                plugins: {
                    legend: {
                        labels: {
                            color: chartColors.legendColor,
                            usePointStyle: true,
                            boxWidth: 8,
                        }
                    }
                }
            };
        }

        function updateSalesChart(orders) {
            const ctx = document.getElementById('salesChart').getContext('2d');
            const monthlyData = orders.reduce((acc, order) => {
                const date = new Date(order.createdAt);
                const month = new Date(date.getFullYear(), date.getMonth()).toISOString();
                acc[month] = (acc[month] || 0) + (order.totalValue || 0);
                return acc;
            }, {});

            const labels = Object.keys(monthlyData).sort();
            const data = labels.map(label => monthlyData[label]);

            if (salesChart) salesChart.destroy();
            salesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Vendas Totais (R$)',
                        data: data,
                        borderColor: chartColors.accent,
                        backgroundColor: chartColors.accentTransparent,
                        tension: 0.4,
                        fill: true,
                        pointBackgroundColor: chartColors.accent,
                        pointBorderColor: chartColors.white,
                    }]
                },
                options: { ...getChartConfig(), scales: {...getChartConfig().scales, x: { type: 'time', time: { unit: 'month', displayFormats: { month: 'MMM/yy' } }, ...getChartConfig().scales.x } }, plugins: { legend: { display: false } } }
            });
        }

        function updateStatusChart(orders) {
            const ctx = document.getElementById('statusChart').getContext('2d');
            const statusCounts = orders.reduce((acc, order) => {
                acc[order.status] = (acc[order.status] || 0) + 1;
                return acc;
            }, {});

            if (statusChart) statusChart.destroy();
            statusChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Novos', 'Em Progresso', 'Pagos'],
                    datasets: [{
                        data: [statusCounts.fresh || 0, statusCounts.progress || 0, statusCounts.paid || 0],
                        backgroundColor: [chartColors.gray400, chartColors.warning, chartColors.success],
                        borderColor: chartColors.white,
                        borderWidth: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: { legend: { position: 'bottom', ...getChartConfig().plugins.legend } }
                }
            });
        }

        function updateDailySalesChart(orders) {
            const ctx = document.getElementById('dailySalesChart').getContext('2d');
            const dailyData = orders.reduce((acc, order) => {
                const day = new Date(order.createdAt).toISOString().split('T')[0];
                acc[day] = (acc[day] || 0) + (order.totalValue || 0);
                return acc;
            }, {});

            const labels = Object.keys(dailyData).sort();
            const data = labels.map(label => dailyData[label]);

            if (dailySalesChart) dailySalesChart.destroy();
            dailySalesChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Faturamento Diário (R$)',
                        data: data,
                        backgroundColor: chartColors.accentLight,
                        borderColor: chartColors.accent,
                        borderWidth: 1,
                        borderRadius: 4
                    }]
                },
                options: { ...getChartConfig(), scales: {...getChartConfig().scales, x: { type: 'time', time: { unit: 'day', displayFormats: { day: 'dd/MM' } }, ...getChartConfig().scales.x } }, plugins: { legend: { display: false } } }
            });
        }

        function updateConversionTrendChart(orders) {
            const ctx = document.getElementById('conversionTrendChart').getContext('2d');
            const trendData = orders.reduce((acc, order) => {
                const day = new Date(order.createdAt).toISOString().split('T')[0];
                if (!acc[day]) acc[day] = { fresh: 0, progress: 0, paid: 0 };
                acc[day][order.status]++;
                return acc;
            }, {});

            const labels = Object.keys(trendData).sort();

            if (conversionTrendChart) conversionTrendChart.destroy();
            conversionTrendChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        { label: 'Pago', data: labels.map(l => trendData[l].paid), backgroundColor: chartColors.success },
                        { label: 'Em Progresso', data: labels.map(l => trendData[l].progress), backgroundColor: chartColors.warning },
                        { label: 'Novo', data: labels.map(l => trendData[l].fresh), backgroundColor: chartColors.gray400 }
                    ]
                },
                options: {
                    ...getChartConfig(),
                    scales: {
                        y: { ...getChartConfig().scales.y, stacked: true },
                        x: { type: 'time', time: { unit: 'day', displayFormats: { day: 'dd/MM' } }, ...getChartConfig().scales.x, stacked: true }
                    },
                    plugins: { legend: { position: 'bottom', ...getChartConfig().plugins.legend } }
                }
            });
        }

        function handleDateFilterChange() {
            const filterValue = document.getElementById('dateRangeFilter').value;
            const now = new Date();
            let startDate = new Date(0);

            if (filterValue === '7d') {
                startDate = new Date(new Date().setDate(now.getDate() - 7));
            } else if (filterValue === '30d') {
                startDate = new Date(new Date().setDate(now.getDate() - 30));
            } else if (filterValue === '90d') {
                startDate = new Date(new Date().setDate(now.getDate() - 90));
            } else if (filterValue === 'this_month') {
                startDate = new Date(now.getFullYear(), now.getMonth(), 1);
            }

            const ordersForDashboard = allOrders.filter(order => new Date(order.createdAt) >= startDate);
            updateDashboard(ordersForDashboard);
        }
        <% } %>

        // --- LÓGICA DA TABELA DE PEDIDOS ---
        function displayOrders(orders = filteredOrdersForTable) {
            const tableBody = document.getElementById('ordersTableBody');
            const mobileContainer = document.getElementById('mobileOrdersContainer');
            
            tableBody.innerHTML = '';
            mobileContainer.innerHTML = '';

            if (orders.length === 0) {
                const noDataMessage = `<tr><td colspan="6" style="text-align: center; color: var(--gray-500); padding: 2rem;">Nenhum pedido encontrado.</td></tr>`;
                tableBody.innerHTML = noDataMessage;
                mobileContainer.innerHTML = `<div style="text-align: center; color: var(--gray-500); padding: 2rem;">Nenhum pedido encontrado.</div>`;
                return;
            }

            orders.forEach(order => {
                const mainRow = document.createElement('tr');
                mainRow.innerHTML = `
                    <td><div class="order-info">${order.name || order.orderName ? `<div class="order-name">${order.name || order.orderName}</div>` : ''}<div class="order-id">${order.orderId}</div></div></td>
                    <td>${formatCurrency(order.totalValue || 0)}</td>
                    <td>${formatCurrency(order.paidValue || 0)}</td>
                    <td><span class="status-badge status-${order.status}">${translateStatus(order.status)}</span></td>
                    <td class="hide-mobile">${new Date(order.createdAt).toLocaleDateString('pt-BR')}</td>
                    <td><div class="table-actions"><button class="action-btn" onclick="toggleOrderDetails('${order.orderId}')"><i class="fas fa-chevron-down" id="chevron-${order.orderId}"></i><span class="hide-mobile">Detalhes</span></button><button class="action-btn action-btn-primary" onclick="copyOrderLink('${order.orderId}')"><i class="fas fa-copy"></i><span class="hide-mobile">Copiar</span></button><button class="action-btn" onclick="showQrCode('${order.orderId}')"><i class="fas fa-qrcode"></i><span class="hide-mobile">QR</span></button></div></td>
                `;

                let payersListHTML = '<span style="color: var(--gray-500);">Nenhum pagador identificado.</span>';
                if (Array.isArray(order.payersIds) && order.payersIds.length > 0) {
                    payersListHTML = `<ul class="payers-list">${order.payersIds.map((id, index) => {
                        const name = (Array.isArray(order.payersNames) && order.payersNames[index]) ? order.payersNames[index] : 'Pagador';
                        const value = (Array.isArray(order.payersValues) && typeof order.payersValues[index] !== 'undefined') ? formatCurrency(order.payersValues[index]) : '';
                        const phone = (Array.isArray(order.payersPhone) && order.payersPhone[index]) ? order.payersPhone[index] : 'N/A';
                        const maskedCpf = maskCPF(id);
                        return `<li class="payer-item"><div class="payer-name">${name}</div><div class="payer-id">CPF: ${maskedCpf}</div><div class="payer-phone">Telefone: ${phone}</div><div class="payer-amount">Valor Pago: ${value}</div></li>`;
                    }).join('')}</ul>`;
                }

                const detailsRow = document.createElement('tr');
                detailsRow.className = 'details-row';
                detailsRow.id = `details-row-${order.orderId}`;
                detailsRow.innerHTML = `<td colspan="6"><div class="details-content"><div class="details-grid"><div class="detail-item"><span class="detail-label">Nome</span><span class="detail-value">${order.name || order.orderName || 'Não especificado'}</span></div><div class="detail-item"><span class="detail-label">ID do Pedido</span><span class="detail-value">${order.orderId}</span></div><div class="detail-item"><span class="detail-label">Data de Criação</span><span class="detail-value">${new Date(order.createdAt).toLocaleString('pt-BR', { dateStyle: 'short', timeStyle: 'short' })}</span></div><div class="detail-item"><span class="detail-label">Status</span><span class="detail-value">${translateStatus(order.status)}</span></div></div><div class="detail-item"><span class="detail-label">Pagadores</span><div class="detail-value">${payersListHTML}</div></div></div></td>`;

                tableBody.appendChild(mainRow);
                tableBody.appendChild(detailsRow);
            });
        }

        function toggleOrderDetails(orderId) {
            const detailsRow = document.getElementById(`details-row-${orderId}`);
            const chevron = document.getElementById(`chevron-${orderId}`);
            const isExpanded = detailsRow.classList.toggle('expanded');
            chevron.className = isExpanded ? 'fas fa-chevron-up' : 'fas fa-chevron-down';
        }

        function initSearchAndFilterForTable() {
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            const dateFilter = document.getElementById('orderDateFilter');

            function filterOrders() {
                const searchTerm = searchInput.value.toLowerCase();
                const status = statusFilter.value;
                const dateRange = dateFilter.value;

                const now = new Date();
                let startDate = new Date(0);

                if (dateRange === '7d') {
                    startDate = new Date(new Date().setDate(now.getDate() - 7));
                } else if (dateRange === '30d') {
                    startDate = new Date(new Date().setDate(now.getDate() - 30));
                } else if (dateRange === '90d') {
                    startDate = new Date(new Date().setDate(now.getDate() - 90));
                } else if (dateRange === 'this_month') {
                    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
                }

                filteredOrdersForTable = allOrders.filter(order => {
                    const matchesSearch = !searchTerm ||
                        (order.name && order.name.toLowerCase().includes(searchTerm)) ||
                        (order.orderName && order.orderName.toLowerCase().includes(searchTerm)) ||
                        order.orderId.toLowerCase().includes(searchTerm);
                    const matchesStatus = !status || order.status === status;
                    const matchesDate = new Date(order.createdAt) >= startDate;
                    return matchesSearch && matchesStatus && matchesDate;
                });

                displayOrders(filteredOrdersForTable);
            }

            searchInput.addEventListener('input', filterOrders);
            statusFilter.addEventListener('change', filterOrders);
            dateFilter.addEventListener('change', filterOrders);
        }

        // --- FUNÇÕES DE AÇÃO E MODAIS ---
        function copyOrderLink(orderId) {
            const orderLink = `<%=process.env.SITE_URL%>/${localPartnerId}/${orderId}`;
            copyToClipboard(orderLink, 'Link do pedido copiado!');
        }

        function showQrCode(orderId) {
            const orderLink = `<%=process.env.SITE_URL%>/${localPartnerId}/${orderId}`;
            generateAndShowQrModal(orderLink);
        }

        function copyToClipboard(text, successMessage) {
            navigator.clipboard.writeText(text).then(() => showToast(successMessage)).catch(err => {
                console.error('Falha ao copiar:', err);
                showToast('Erro ao copiar');
            });
        }

        function showToast(message) {
            const toast = document.getElementById('copyToast');
            toast.textContent = message;
            toast.classList.add('show');
            setTimeout(() => toast.classList.remove('show'), 3000);
        }

        function generateAndShowQrModal(link) {
            const qrCodeModal = document.getElementById('qrCodeModal');
            const qrCodeContainer = document.getElementById('qrcode-container');
            const qrLinkText = document.getElementById('qrLinkText');

            qrCodeContainer.innerHTML = '';
            qrCodeModal.classList.add('show');

            new QRCode(qrCodeContainer, {
                text: link, width: 200, height: 200,
                colorDark: "#0f172a", colorLight: "#ffffff",
                correctLevel: QRCode.CorrectLevel.H
            });

            qrLinkText.textContent = link;
        }

        function updateDashboardWithNewOrder(newOrder) {
            allOrders.unshift(newOrder);
            initSearchAndFilterForTable();
            <% if (partnerData.role !== 'employee') { %>
            handleDateFilterChange();
            <% } %>
            displayOrders();
        }
        
        <% if (partnerData.role !== 'employee') { %>
        function exportOrdersToCSV() {
            if (filteredOrdersForTable.length === 0) {
                alert("Não há pedidos na visualização atual para exportar.");
                return;
            }

            let maxPayers = 0;
            for (const order of filteredOrdersForTable) {
                const numPayers = (order.payersIds || []).length;
                if (numPayers > maxPayers) { maxPayers = numPayers; }
            }

            const headers = ["ID do Pedido", "Nome do Pedido", "Valor Total (R$)", "Valor Pago (R$)", "Status", "Data de Criação"];
            for (let i = 1; i <= maxPayers; i++) {
                headers.push(`Pagador ${i} (Nome)`, `Pagador ${i} (CPF/CNPJ)`, `Pagador ${i} (Telefone)`, `Pagador ${i} (Valor Pago)`);
            }

            const escapeCSV = (str) => {
                const val = str === null || str === undefined ? '' : String(str);
                if (val.search(/("|,|\n)/g) >= 0) { return `"${val.replace(/"/g, '""')}"`; }
                return val;
            };

            const csvRows = [headers.join(',')];
            for (const order of filteredOrdersForTable) {
                const rowData = [
                    order.orderId, order.name || order.orderName || '', (order.totalValue || 0).toFixed(2).replace('.', ','),
                    (order.paidValue || 0).toFixed(2).replace('.', ','), translateStatus(order.status), new Date(order.createdAt).toLocaleString('pt-BR')
                ];

                const payersNames = order.payersNames || [];
                const payersIds = order.payersIds || [];
                const payersPhones = order.payersPhone || [];
                const payersValues = order.payersValues || [];

                for (let i = 0; i < maxPayers; i++) {
                    if (i < payersIds.length) {
                        rowData.push(payersNames[i] || '', payersIds[i] || '', payersPhones[i] || '', (payersValues[i] || 0).toFixed(2).replace('.', ','));
                    } else {
                        rowData.push('', '', '', '');
                    }
                }

                csvRows.push(rowData.map(escapeCSV).join(','));
            }

            const csvString = csvRows.join('\n');
            const blob = new Blob([`\uFEFF${csvString}`], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement("a");
            const url = URL.createObjectURL(blob);
            link.setAttribute("href", url);
            link.setAttribute("download", `pedidos_filtrados_${new Date().toISOString().slice(0,10)}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        <% } %>

        // --- INICIALIZAÇÃO E EVENT LISTENERS ---
        document.addEventListener('DOMContentLoaded', function() {
            initNavigation();
            initMobileSidebar();
            initSearchAndFilterForTable();
            displayOrders(filteredOrdersForTable);

            // MODIFICAÇÃO: A inicialização específica do modo 'partner' está agora aqui dentro
            <% if (partnerData.role !== 'employee') { %>
                initializeChartColors();
                initEmployeeSearchAndFilter();
                fetchEmployees();
                document.getElementById('dateRangeFilter').addEventListener('change', handleDateFilterChange);
                handleDateFilterChange(); // Chama para carregar os dados iniciais do dashboard
                document.getElementById('exportOrdersBtn').addEventListener('click', exportOrdersToCSV);

                // Listeners de Funcionários
                const createEmployeeContainer = document.getElementById('create-employee-container');
                const showCreateEmployeeBtn = document.getElementById('showCreateEmployeeBtn');
                showCreateEmployeeBtn.addEventListener('click', () => {
                    const isVisible = createEmployeeContainer.style.display === 'block';
                    createEmployeeContainer.style.display = isVisible ? 'none' : 'block';
                    showCreateEmployeeBtn.innerHTML = isVisible
                        ? '<i class="fas fa-user-plus"></i> <span>Criar Login</span>'
                        : '<i class="fas fa-times"></i> <span>Cancelar</span>';
                    if (!isVisible) {
                        createEmployeeContainer.scrollIntoView({ behavior: 'smooth' });
                    }
                });

                // Listeners de Configurações
                document.getElementById('copyApiKeyButton').addEventListener('click', () => {
                    copyToClipboard(localPartnerApiKey, 'Chave de API copiada!');
                });
                document.getElementById('copyRecipientIdButton').addEventListener('click', () => {
                    copyToClipboard(localPartnerId, 'ID de parceiro copiado!');
                });

                // Modal de exclusão
                document.getElementById('closeDeleteModal').addEventListener('click', () => {
                    document.getElementById('deleteEmployeeModal').classList.remove('show');
                });
                document.getElementById('cancelDeleteBtn').addEventListener('click', () => {
                    document.getElementById('deleteEmployeeModal').classList.remove('show');
                });
                document.getElementById('confirmDeleteBtn').addEventListener('click', deleteEmployee);
                document.getElementById('deleteEmployeeModal').addEventListener('click', (event) => {
                    if (event.target === event.currentTarget) {
                        event.currentTarget.classList.remove('show');
                    }
                });

                // FORM DE NOVO FUNCIONÁRIO
                document.getElementById('newEmployeeForm').addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const nameInput = document.getElementById('employeeName');
                    const emailInput = document.getElementById('employeeEmail');
                    const passwordInput = document.getElementById('employeePassword');
                    const submitButton = e.target.querySelector('button[type="submit"]');

                    const name = nameInput.value.trim();
                    const email = emailInput.value.trim();
                    const password = passwordInput.value;

                    if (!name || !email || !password) {
                        showToast('Todos os campos são obrigatórios!');
                        return;
                    }
                    if (password.length < 5) {
                        showToast('A senha deve ter pelo menos 5 caracteres!');
                        return;
                    }
                    if (allEmployees.some(emp => emp.email === email)) {
                        showToast('Este email já está cadastrado!');
                        return;
                    }

                    submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Criando...';
                    submitButton.disabled = true;

                    try {
                        const newEmployeeData = {
                            partnerName: name, email: email, partnerPassword: password,
                            adminPassword: "matheus", recipient_id: localRecipientId, partnerRef: localPartnerId
                        };
                        
                        const response = await fetch(`<%=process.env.API_SITE_URL%>/partner/employee`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ newEmployee: newEmployeeData })
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.message || 'Falha ao criar funcionário.');
                        }

                        showToast('Funcionário criado com sucesso!');
                        await fetchEmployees();

                        nameInput.value = ''; emailInput.value = ''; passwordInput.value = '';

                        setTimeout(() => {
                            createEmployeeContainer.style.display = 'none';
                            showCreateEmployeeBtn.innerHTML = '<i class="fas fa-user-plus"></i> <span>Criar Login</span>';
                        }, 3000);
                        
                    } catch (error) {
                        console.error("Error creating employee:", error);
                        showToast(`Erro: ${error.message}`);
                    } finally {
                        submitButton.innerHTML = '<i class="fas fa-user-plus"></i> Criar Login do Funcionário';
                        submitButton.disabled = false;
                    }
                });
                
                // WEBHOOK FORM
                const webhookForm = document.getElementById('webhookForm');
                const webhookUrlInput = document.getElementById('webhookUrlInput');
                const saveButton = document.getElementById('saveWebhookButton');
                const statusText = document.getElementById('webhookSaveStatus');

                webhookForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const urlValue = webhookUrlInput.value.trim();
                    const originalButtonText = saveButton.innerHTML;
                    saveButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Salvando...';
                    saveButton.disabled = true;
                    statusText.textContent = '';
                    
                    try {
                        const response = await fetch(`<%=process.env.API_SITE_URL%>/partner/webhook`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                partnerId: localPartnerId, apiKey: localPartnerApiKey, webhookUrl: urlValue
                            })
                        });

                        if (!response.ok) {
                            throw new Error('Falha ao salvar a URL.');
                        }
                        
                        statusText.textContent = 'URL do webhook salva com sucesso!';
                        statusText.style.color = 'var(--success)';
                    } catch (error) {
                        console.error('Erro ao salvar webhook:', error);
                        statusText.textContent = `Erro: ${error.message}`;
                        statusText.style.color = 'var(--error)';
                    } finally {
                        saveButton.innerHTML = originalButtonText;
                        saveButton.disabled = false;
                        setTimeout(() => { statusText.textContent = ''; }, 5000);
                    }
                });
            <% } %>

            // --- LISTENERS GERAIS ---
            const createOrderContainer = document.getElementById('create-order-container');
            const showCreateOrderBtn = document.getElementById('showCreateOrderBtn');
            showCreateOrderBtn.addEventListener('click', () => {
                const isVisible = createOrderContainer.style.display === 'block';
                createOrderContainer.style.display = isVisible ? 'none' : 'block';
                showCreateOrderBtn.innerHTML = isVisible
                    ? '<i class="fas fa-plus"></i> <span>Criar Novo Pedido</span>'
                    : '<i class="fas fa-times"></i> <span>Cancelar</span>';
                if (!isVisible) {
                    createOrderContainer.scrollIntoView({ behavior: 'smooth' });
                }
            });

            // FORM DE NOVO PEDIDO
            document.getElementById('newOrderForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                const orderNameInput = document.getElementById('orderName');
                const totalValueInput = document.getElementById('totalValue');
                const totalValue = parseFloat(totalValueInput.value);
                const orderName = orderNameInput.value;
                const submitButton = e.target.querySelector('button[type="submit"]');

                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Criando...';
                submitButton.disabled = true;

                try {
                    const payload = {
                        name: orderName || '', partnerId: localPartnerId,
                        totalValue: totalValue, apiKey: localPartnerApiKey,
                    };

                    const response = await fetch(`<%=process.env.API_SITE_URL%>/order`, {
                        method: 'POST', headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        const errorData = await response.json().catch(() => ({ message: 'Erro desconhecido.' }));
                        throw new Error(errorData.message || `Erro HTTP: ${response.status}`);
                    }

                    const orderId = await response.json();
                    const orderLinkElement = document.getElementById('orderLink');
                    const orderCreationResult = document.getElementById('orderCreationResult');
                    const generatedOrderLink = `<%=process.env.SITE_URL%>/${localPartnerId}/${orderId}`;

                    orderLinkElement.href = generatedOrderLink;
                    orderLinkElement.textContent = generatedOrderLink;
                    orderCreationResult.classList.add('show');
                    showToast('Pedido criado com sucesso!');

                    const newOrder = {
                        name: orderName, orderId: orderId, totalValue: totalValue,
                        paidValue: 0, status: 'fresh', payersIds: [], payersNames: [],
                        payersValues: [], payersPhone: [], createdAt: new Date().toISOString()
                    };

                    updateDashboardWithNewOrder(newOrder);
                    totalValueInput.value = '';
                    orderNameInput.value = '';

                    setTimeout(() => {
                        createOrderContainer.style.display = 'none';
                        showCreateOrderBtn.innerHTML = '<i class="fas fa-plus"></i> <span>Criar Novo Pedido</span>';
                        orderCreationResult.classList.remove('show');
                    }, 5000);

                } catch (error) {
                    console.error('Erro ao criar pedido:', error);
                    alert('Erro ao criar pedido: ' + error.message);
                } finally {
                    submitButton.innerHTML = '<i class="fas fa-plus"></i> Gerar Pedido de Pagamento';
                    submitButton.disabled = false;
                }
            });

            document.getElementById('copyLinkButton').addEventListener('click', () => {
                const link = document.getElementById('orderLink').href;
                copyToClipboard(link, 'Link do pedido copiado!');
            });

            document.getElementById('qrCodeNewOrderButton').addEventListener('click', () => {
                const link = document.getElementById('orderLink').href;
                generateAndShowQrModal(link);
            });

            document.getElementById('closeQrModal').addEventListener('click', () => {
                document.getElementById('qrCodeModal').classList.remove('show');
            });
            document.getElementById('qrCodeModal').addEventListener('click', (event) => {
                if (event.target === event.currentTarget) {
                    event.currentTarget.classList.remove('show');
                }
            });
            
            // Keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    document.getElementById('qrCodeModal').classList.remove('show');
                    closeMobileSidebar();
                    <% if (partnerData.role !== 'employee') { %>
                    document.getElementById('deleteEmployeeModal').classList.remove('show');
                    <% } %>
                }
            });
        });
    </script>
</body>
</html>