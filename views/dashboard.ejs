<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard do Parceiro - <% if (typeof partnerData.partnerName !== 'undefined') { %><%= partnerData.partnerName %><% } else { %>PagJunto Corporativo<% } %></title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="manifest" href="/site.webmanifest">
    
    <style>
        :root {
            /* More professional color palette */
            --primary: #000000;
            --primary-light: #18181b;
            --primary-dark: #000000;
            --accent: #2563eb;
            --accent-hover: #1d4ed8;
            --accent-light: #60a5fa;
            --text-primary: #09090b;
            --text-secondary: #71717a;
            --text-light: #a1a1aa;
            --bg-primary: #ffffff;
            --bg-secondary: #fafafa;
            --bg-tertiary: #f4f4f5;
            --border: #e4e4e7;
            --border-light: #f4f4f5;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --radius: 4px;
            --radius-lg: 6px;
            
            /* Status Colors */
            --status-paid-text: #059669;
            --status-paid-bg: #d1fae5;
            --status-progress-text: #d97706;
            --status-progress-bg: #fef3c7;
            --status-fresh-text: #6b7280;
            --status-fresh-bg: #f3f4f6;
            
            /* Gradients from Landing Page */
            --gradient-primary: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
            --gradient-accent: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
            --gradient-card: linear-gradient(145deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.9) 100%);
            --gradient-card-hover: linear-gradient(145deg, rgba(255, 255, 255, 0.98) 0%, rgba(248, 250, 252, 0.95) 100%);
            --gradient-hero: radial-gradient(ellipse at top, rgba(37, 99, 235, 0.08) 0%, transparent 50%), 
                             radial-gradient(ellipse at bottom right, rgba(30, 64, 175, 0.06) 0%, transparent 50%);
            --gradient-mesh: radial-gradient(circle at 20% 80%, rgba(37, 99, 235, 0.15) 0%, transparent 50%),
                             radial-gradient(circle at 80% 20%, rgba(96, 165, 250, 0.1) 0%, transparent 50%),
                             radial-gradient(circle at 40% 40%, rgba(59, 130, 246, 0.08) 0%, transparent 50%);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        html {
            scroll-behavior: smooth;
            overflow-x: hidden;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #ffffff;
            color: var(--text-primary);
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            overflow-x: hidden;
            position: relative;
            min-height: 100vh;
            font-weight: 400;
        }

        /* Animated Background Elements */
        .bg-decoration {
            display: none;
        }

        .bg-circle {
            position: absolute;
            border-radius: 50%;
            background: linear-gradient(135deg, rgba(37, 99, 235, 0.08), rgba(96, 165, 250, 0.04));
            animation: float 25s ease-in-out infinite;
        }

        .bg-circle:nth-child(1) {
            width: 200px;
            height: 200px;
            top: 15%;
            left: -100px;
            animation-delay: 0s;
        }

        .bg-circle:nth-child(2) {
            width: 150px;
            height: 150px;
            top: 70%;
            right: -75px;
            animation-delay: -10s;
        }

        .bg-square {
            position: absolute;
            background: linear-gradient(45deg, rgba(30, 64, 175, 0.06), rgba(59, 130, 246, 0.03));
            border-radius: 16px;
            animation: rotate 30s linear infinite;
        }

        .bg-square:nth-child(3) {
            width: 80px;
            height: 80px;
            top: 25%;
            right: 15%;
            animation-delay: -5s;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            33% { transform: translateY(-20px) rotate(120deg); }
            66% { transform: translateY(10px) rotate(240deg); }
        }

        @keyframes rotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Header */
        .header {
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(12px);
            border-bottom: 1px solid var(--border);
            padding: 12px 0;
            position: sticky;
            top: 0;
            z-index: 1000;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-sm);
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 32px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
            z-index: 1;
        }

        .logo {
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            font-size: 1.25rem;
            color: var(--text-primary);
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.2s ease;
        }

        .logo:hover {
            opacity: 0.7;
            transform: none;
        }

        .user-section {
            display: flex;
            align-items: center;
            gap: 24px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 14px;
            font-weight: 500;
            color: var(--text-secondary);
            padding: 8px 16px;
            background: var(--gradient-card);
            border-radius: var(--radius);
            border: 1px solid rgba(226, 232, 240, 0.3);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .user-info:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        .user-avatar {
            width: 36px;
            height: 36px;
            background: var(--gradient-accent);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: 600;
            color: white;
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
        }

        .logout-btn {
            color: var(--text-secondary);
            text-decoration: none;
            font-size: 14px;
            padding: 10px 16px;
            border-radius: var(--radius);
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            font-weight: 500;
            background: var(--gradient-card);
            border: 1px solid rgba(226, 232, 240, 0.3);
            backdrop-filter: blur(10px);
        }

        .logout-btn:hover {
            color: var(--accent);
            background: var(--gradient-card-hover);
            transform: translateY(-1px);
            box-shadow: var(--shadow-md);
        }

        /* Main Content */
        .main-content {
            flex: 1;
            max-width: 1400px;
            margin: 0 auto;
            padding: 40px 32px;
            width: 100%;
            position: relative;
            z-index: 1;
        }

        .page-header {
            margin-bottom: 48px;
            text-align: center;
            position: relative;
        }

        .page-header::before {
            display: none;
        }

        .page-title {
            font-size: clamp(2rem, 4vw, 3rem);
            font-weight: 800;
            color: var(--text-primary);
            margin-bottom: 12px;
            letter-spacing: -0.02em;
            background: linear-gradient(135deg, var(--text-primary) 0%, var(--primary) 50%, var(--accent) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            position: relative;
            z-index: 2;
        }

        .page-subtitle {
            font-size: 1.125rem;
            color: var(--text-secondary);
            font-weight: 400;
            position: relative;
            z-index: 2;
        }

        /* Cards and Sections */
        .create-order-section,
        .metric-card,
        .chart-card,
        .content-section {
            background: var(--bg-primary);
            border-radius: var(--radius);
            padding: 24px;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border);
            transition: all 0.2s ease;
        }

        .create-order-section:hover,
        .metric-card:hover,
        .chart-card:hover,
        .content-section:hover {
            transform: none;
            box-shadow: var(--shadow-md);
            border-color: var(--border);
        }

        .create-order-section {
            margin-bottom: 48px;
        }

        .section-header {
            display: flex;
            align-items: center;
            gap: 16px;
            margin-bottom: 32px;
        }

        .section-icon {
            width: 40px;
            height: 40px;
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-primary);
            font-size: 16px;
            transition: all 0.2s ease;
        }

        .section-icon:hover {
            background: var(--bg-tertiary);
            transform: none;
            box-shadow: none;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text-primary);
        }

        /* Forms */
        .form-row {
            display: flex;
            gap: 24px;
        }

        .form-group {
            margin-bottom: 24px;
            flex: 1;
        }

        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 8px;
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid var(--border);
            border-radius: var(--radius);
            font-size: 14px;
            font-weight: 400;
            color: var(--text-primary);
            background: var(--bg-primary);
            transition: all 0.2s ease;
            outline: none;
        }

        .form-input:focus {
            border-color: var(--text-primary);
            box-shadow: 0 0 0 1px var(--text-primary);
            background: var(--bg-primary);
            transform: none;
        }

        /* Buttons */
        .btn-primary {
            background: var(--text-primary);
            color: white;
            border: 1px solid var(--text-primary);
            padding: 12px 16px;
            border-radius: var(--radius);
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            box-shadow: none;
        }

        .btn-primary:hover {
            background: var(--primary-light);
            border-color: var(--primary-light);
            transform: none;
            box-shadow: none;
        }

        .btn-secondary {
            background: var(--bg-primary);
            color: var(--text-primary);
            border: 1px solid var(--border);
            padding: 8px 12px;
            border-radius: var(--radius);
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-secondary:hover:not(:disabled) {
            background: var(--bg-secondary);
            border-color: var(--text-secondary);
            transform: none;
            box-shadow: none;
        }

        .btn-copy {
            background: rgba(37, 99, 235, 0.1);
            color: var(--accent);
            border: 1px solid rgba(37, 99, 235, 0.2);
            padding: 8px 16px;
            border-radius: var(--radius);
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            gap: 6px;
        }

        .btn-copy:hover {
            background: rgba(37, 99, 235, 0.15);
            transform: translateY(-1px);
        }

        /* Order Result */
        .order-result {
            margin-top: 24px;
            padding: 20px 24px;
            background: var(--status-paid-bg);
            border-radius: var(--radius);
            color: var(--status-paid-text);
            display: none;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
            gap: 16px;
            border: 1px solid rgba(5, 150, 105, 0.2);
            backdrop-filter: blur(10px);
        }

        .order-result-text {
            font-weight: 600;
            font-size: 14px;
        }

        .order-link {
            color: var(--status-paid-text);
            word-break: break-all;
            text-decoration: underline;
            font-weight: 500;
        }

        /* Metrics Grid */
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 24px;
            margin-bottom: 48px;
        }

        .metric-header {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            margin-bottom: 16px;
        }

        .metric-title {
            font-size: 14px;
            font-weight: 600;
            color: var(--text-secondary);
        }

        .metric-icon {
            width: 40px;
            height: 40px;
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-secondary);
            font-size: 16px;
            transition: all 0.2s ease;
        }

        .metric-card:hover .metric-icon {
            background: var(--bg-tertiary);
            color: var(--text-primary);
            transform: none;
        }

        .metric-value {
            font-size: 2rem;
            font-weight: 800;
            color: var(--text-primary);
            margin-bottom: 8px;
            letter-spacing: -0.02em;
        }

        .metric-subtitle {
            font-size: 13px;
            color: var(--text-secondary);
            font-weight: 400;
        }

        /* Charts */
        .charts-container {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 24px;
            margin-bottom: 48px;
        }

        .chart-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 24px;
        }

        .chart-wrapper {
            height: 300px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Table */
        .table-container {
            overflow-x: auto;
            border-radius: var(--radius);
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            overflow: hidden;
        }

        .table th,
        .table td {
            padding: 16px 20px;
            text-align: left;
            border-bottom: 1px solid var(--border);
            vertical-align: middle;
        }

        .table th {
            background: var(--bg-secondary);
            color: var(--text-secondary);
            font-weight: 500;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            padding: 12px 16px;
        }

        .table td {
            padding: 12px 16px;
            border-bottom: 1px solid var(--border);
        }

        .table tr.main-row:hover {
            background: var(--bg-secondary);
        }

        .order-id-cell {
            font-family: 'SF Mono', monospace;
            font-size: 13px;
            color: var(--text-secondary);
        }

        .order-name-cell {
            display: block;
            font-weight: 600;
            color: var(--text-primary);
        }

        /* Status Badges */
        .status-badge {
            display: inline-flex;
            align-items: center;
            padding: 6px 12px;
            border-radius: var(--radius);
            font-size: 12px;
            font-weight: 600;
            text-transform: capitalize;
        }

        .status-badge.fresh {
            background-color: var(--status-fresh-bg);
            color: var(--status-fresh-text);
        }

        .status-badge.progress {
            background-color: var(--status-progress-bg);
            color: var(--status-progress-text);
        }

        .status-badge.paid {
            background-color: var(--status-paid-bg);
            color: var(--status-paid-text);
        }

        /* Action Buttons */
        .actions-cell {
            display: flex;
            gap: 8px;
            align-items: center;
        }

        .copy-btn-table,
        .qr-btn,
        .details-btn-table {
            background: var(--gradient-card);
            color: var(--text-primary);
            border: 1px solid rgba(226, 232, 240, 0.3);
            padding: 8px 12px;
            border-radius: var(--radius);
            cursor: pointer;
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 6px;
            transition: all 0.2s ease;
            font-weight: 500;
            backdrop-filter: blur(10px);
        }

        .copy-btn-table:hover,
        .qr-btn:hover,
        .details-btn-table:hover {
            background: var(--gradient-card-hover);
            transform: translateY(-1px);
            box-shadow: var(--shadow-sm);
        }

        .copy-btn-table {
            background: var(--gradient-accent);
            color: white;
            border-color: transparent;
        }

        .copy-btn-table:hover {
            background: linear-gradient(135deg, #1d4ed8 0%, #1e3a8a 100%);
        }

        .details-btn-table[aria-expanded="true"] {
            background: var(--gradient-accent);
            color: white;
            border-color: transparent;
        }

        /* Details Row */
        .details-row {
            display: none;
        }

        .details-row.is-expanded {
            display: table-row;
        }

        .details-row td {
            background: linear-gradient(145deg, rgba(248, 250, 252, 0.8), rgba(255, 255, 255, 0.9));
            box-shadow: inset 0 5px 6px -5px rgba(0, 0, 0, 0.08);
            padding: 24px 30px 24px 80px !important;
        }

        .details-content h4 {
            font-size: 16px;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 20px;
        }

        .details-content .detail-item {
            display: flex;
            flex-direction: column;
            gap: 4px;
            margin-bottom: 16px;
            font-size: 14px;
        }

        .details-content strong {
            font-weight: 600;
            color: var(--text-secondary);
            margin-bottom: 4px;
        }

        .details-content .payer-details-list li {
            padding: 12px 16px;
            background: var(--gradient-card);
            border-radius: var(--radius);
            margin-bottom: 12px;
            border: 1px solid rgba(226, 232, 240, 0.3);
            backdrop-filter: blur(10px);
        }

        .details-content .payer-details-list li strong {
            display: block;
            font-weight: 700;
            color: var(--text-primary);
        }

        .payer-id {
            font-family: 'SF Mono', monospace;
            font-size: 12px;
            color: var(--text-secondary);
        }

        .payer-amount {
            font-weight: 700;
            font-size: 14px;
            color: var(--accent);
            display: block;
            margin-top: 4px;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1050;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            background-color: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(4px);
            animation: fadeIn 0.3s;
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: var(--gradient-card);
            margin: 20px;
            padding: 32px;
            border: 1px solid rgba(226, 232, 240, 0.3);
            width: 90%;
            max-width: 400px;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
            position: relative;
            animation: slideIn 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            backdrop-filter: blur(20px);
        }

        .modal-content h2 {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 24px;
            text-align: center;
        }

        .modal-close-btn {
            position: absolute;
            top: 16px;
            right: 16px;
            width: 32px;
            height: 32px;
            background: transparent;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-secondary);
            font-size: 20px;
            font-weight: 300;
            line-height: 1;
            transition: all 0.2s ease;
        }

        .modal-close-btn:hover {
            background: var(--bg-secondary);
            color: var(--text-primary);
            transform: scale(1.1);
        }

        #qrcode-container {
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 16px;
            margin-bottom: 16px;
            background: var(--bg-primary);
            border-radius: var(--radius);
            border: 1px solid var(--border);
        }

        /* Pagination */
        .pagination-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 32px;
            gap: 16px;
        }

        .page-indicator {
            font-size: 14px;
            font-weight: 600;
            color: var(--text-secondary);
            padding: 0 16px;
        }

        /* Toast */
        .toast {
            position: fixed;
            top: 100px;
            right: 20px;
            background: var(--gradient-accent);
            color: white;
            padding: 16px 24px;
            border-radius: var(--radius);
            box-shadow: var(--shadow-lg);
            transform: translateX(120%);
            transition: transform 0.3s ease;
            z-index: 1000;
            font-weight: 600;
        }

        .toast.show {
            transform: translateX(0);
        }

        /* Footer */
        .footer {
            background: linear-gradient(135deg, rgba(15, 23, 42, 0.95) 0%, rgba(30, 58, 138, 0.9) 100%);
            color: rgba(255, 255, 255, 0.8);
            text-align: center;
            padding: 32px;
            margin-top: 64px;
            font-size: 13px;
            border-top: 1px solid var(--border);
            position: relative;
        }

        .footer::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(ellipse at top, rgba(37, 99, 235, 0.05) 0%, transparent 70%);
            pointer-events: none;
        }

        .footer a {
            color: rgba(255, 255, 255, 0.9);
            text-decoration: none;
            transition: all 0.2s ease;
        }

        .footer a:hover {
            color: white;
            text-decoration: underline;
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .charts-container {
                grid-template-columns: 1fr;
            }
            
            .metrics-grid {
                grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .main-content {
                padding: 24px 16px;
            }

            .header-content {
                flex-direction: column;
                gap: 16px;
                padding: 16px;
            }

            .form-row {
                flex-direction: column;
                gap: 0;
            }

            .metrics-grid {
                grid-template-columns: 1fr;
                gap: 16px;
            }

            .table-container {
                overflow-x: hidden;
            }

            .table thead {
                display: none;
            }

            .table,
            .table tbody,
            .table tr.main-row {
                display: block;
                width: 100%;
            }

            .table tr.main-row {
                margin-bottom: 16px;
                border: 1px solid var(--border);
                border-radius: var(--radius);
                padding: 16px;
                box-shadow: var(--shadow-sm);
                background: var(--gradient-card);
            }

            .table td {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 8px 0;
                border-bottom: 1px solid var(--border);
            }

            .table tr.main-row td {
                border-bottom: none !important;
            }

            .table td::before {
                content: attr(data-label);
                font-weight: 600;
                color: var(--text-primary);
                text-align: left;
                padding-right: 16px;
                flex-shrink: 0;
            }

            .actions-cell {
                justify-content: flex-end;
            }

            .actions-cell .btn-text {
                display: none;
            }

            .actions-cell button {
                padding: 8px;
                width: 36px;
                height: 36px;
                justify-content: center;
                gap: 0;
            }

            .bg-circle,
            .bg-square {
                display: none;
            }
        }
    </style>
</head>

<body>
    <!-- Animated Background Elements -->
    <div class="bg-decoration">
        <div class="bg-circle"></div>
        <div class="bg-circle"></div>
        <div class="bg-square"></div>
    </div>

    <header class="header">
        <div class="header-content">
            <a href="/" class="logo">pagjunto</a>
            <div class="user-section">
                <div class="user-info">
                    <div class="user-avatar"><i class="fas fa-user"></i></div>
                    <span>Olá, <% if (typeof partnerData.partnerName !== 'undefined') { %><%= partnerData.partnerName %><% } else { %>Parceiro<% } %></span>
                </div>
                <a href="/logout" class="logout-btn"><i class="fas fa-sign-out-alt"></i> Sair</a>
            </div>
        </div>
    </header>

    <main class="main-content">
        <div class="page-header">
            <h1 class="page-title">Dashboard Executivo</h1>
            <p class="page-subtitle">Visão completa do desempenho da sua conta corporativa</p>
        </div>

        <section class="create-order-section">
            <div class="section-header">
                <div class="section-icon"><i class="fa-regular fa-square-plus"></i></div>
                <h2 class="section-title">Criar Nova Ordem</h2>
            </div>
            <form id="newOrderForm">
                <div class="form-row">
                    <div class="form-group">
                        <label for="orderName" class="form-label">Nome da Ordem (Opcional)</label>
                        <input type="text" id="orderName" name="orderName" class="form-input" placeholder="Ex: Pedido #123">
                    </div>
                    <div class="form-group">
                        <label for="totalValue" class="form-label">Valor Total da Ordem</label>
                        <input type="number" id="totalValue" name="totalValue" class="form-input" step="0.01" min="0.01" required placeholder="Ex: 150.00">
                    </div>
                </div>
                <button type="submit" class="btn-primary"><i class="fas fa-plus"></i> Gerar Ordem de Pagamento</button>
            </form>
            <div id="orderCreationResult" class="order-result">
                <div>
                    <p class="order-result-text">Link da Ordem Criada:</p>
                    <a id="orderLink" href="#" target="_blank" class="order-link"></a>
                </div>
                <div class="order-result-actions" style="display: flex; gap: 8px;">
                    <button id="copyLinkButton" class="btn-copy"><i class="fas fa-copy"></i> Copiar</button>
                    <button id="qrCodeNewOrderButton" class="btn-copy"><i class="fas fa-qrcode"></i> QR Code</button>
                </div>
            </div>
        </section>

        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Saldo da Conta</span>
                    <div class="metric-icon"><i class="fas fa-wallet"></i></div>
                </div>
                <div class="metric-value" id="accountBalanceValue">R$ 0,00</div>
                <div class="metric-subtitle">Disponível + A receber</div>
            </div>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Vendas Totais</span>
                    <div class="metric-icon"><i class="fas fa-chart-line"></i></div>
                </div>
                <div class="metric-value" id="totalSalesValue">R$ 0,00</div>
                <div class="metric-subtitle">Valor bruto de todas as ordens</div>
            </div>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Valor Recebido</span>
                    <div class="metric-icon"><i class="fas fa-money-bill-wave"></i></div>
                </div>
                <div class="metric-value" id="totalPaidValue">R$ 0,00</div>
                <div class="metric-subtitle">Valor já pago pelos clientes</div>
            </div>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Total de Ordens</span>
                    <div class="metric-icon"><i class="fas fa-box"></i></div>
                </div>
                <div class="metric-value" id="totalOrdersValue">0</div>
                <div class="metric-subtitle">Total de ordens geradas</div>
            </div>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Ordens Pagas</span>
                    <div class="metric-icon"><i class="fas fa-check-double"></i></div>
                </div>
                <div class="metric-value" id="paidOrdersValue">0</div>
                <div class="metric-subtitle">Ordens finalizadas com sucesso</div>
            </div>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Ordens Novas</span>
                    <div class="metric-icon"><i class="fas fa-file-circle-plus"></i></div>
                </div>
                <div class="metric-value" id="newOrdersValue">0</div>
                <div class="metric-subtitle">Ordens recém-criadas</div>
            </div>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Em Progresso</span>
                    <div class="metric-icon"><i class="fas fa-hourglass-half"></i></div>
                </div>
                <div class="metric-value" id="progressOrdersValue">0</div>
                <div class="metric-subtitle">Aguardando pagamento</div>
            </div>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Ticket Médio</span>
                    <div class="metric-icon"><i class="fas fa-receipt"></i></div>
                </div>
                <div class="metric-value" id="averageTicketValue">R$ 0,00</div>
                <div class="metric-subtitle">Valor médio por ordem</div>
            </div>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Taxa de Conversão</span>
                    <div class="metric-icon"><i class="fas fa-bullseye"></i></div>
                </div>
                <div class="metric-value" id="conversionRateValue">0%</div>
                <div class="metric-subtitle">% de ordens pagas</div>
            </div>
            <div class="metric-card">
                <div class="metric-header">
                    <span class="metric-title">Total de Pagadores</span>
                    <div class="metric-icon"><i class="fas fa-users"></i></div>
                </div>
                <div class="metric-value" id="totalPayersValue">0</div>
                <div class="metric-subtitle">Pagamentos individuais recebidos</div>
            </div>
        </div>

        <div class="charts-container">
            <div class="chart-card">
                <h3 class="chart-title">Tendência de Vendas Mensais</h3>
                <div class="chart-wrapper">
                    <canvas id="salesChart"></canvas>
                </div>
            </div>
            <div class="chart-card">
                <h3 class="chart-title">Status das Ordens</h3>
                <div class="chart-wrapper">
                    <canvas id="statusChart"></canvas>
                </div>
            </div>
        </div>

        <section class="content-section">
            <div class="section-header">
                <div class="section-icon"><i class="fas fa-list-alt"></i></div>
                <h2 class="section-title">Ordens Recentes</h2>
            </div>
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Ordem</th>
                            <th>Valor Total</th>
                            <th>Valor Pago</th>
                            <th>Status</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="pagination-controls">
                <button id="prevPageBtn" class="btn-secondary">Anterior</button>
                <span id="pageIndicator" class="page-indicator"></span>
                <button id="nextPageBtn" class="btn-secondary">Próximo</button>
            </div>
        </section>

        <section class="content-section" style="margin-top: 40px;">
            <div class="section-header">
                <div class="section-icon"><i class="fas fa-key"></i></div>
                <h2 class="section-title">Sua Chave de API (API Key)</h2>
            </div>
            <p class="page-subtitle" style="margin-top: -16px; margin-bottom: 24px; font-weight: 400;">Use esta chave para integrar seus sistemas com a nossa plataforma. Mantenha-a segura.</p>
            <div style="display: flex; align-items: center; gap: 16px; flex-wrap: wrap;">
                <input type="text" id="apiKeyInput" class="form-input" value="<%= partnerData.apiKey.substring(0, 8) + '••••••••••••••••••••' + partnerData.apiKey.substring(partnerData.apiKey.length - 4) %>" readonly style="font-family: 'SF Mono', Menlo, Monaco, Consolas, monospace; background-color: var(--bg-secondary); flex-grow: 1;">
                <button id="copyApiKeyButton" class="btn-primary" style="flex-shrink: 0;"><i class="fas fa-copy"></i> <span class="btn-text">Copiar Chave</span></button>
            </div>
        </section>

        <div id="copyToast" class="toast"></div>
    </main>

    <div id="qrCodeModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 class="modal-title">QR Code da Ordem</h2>
                <button class="modal-close-btn" id="closeQrModal">&times;</button>
            </div>
            <div class="modal-body centered">
                <div id="qrcode-container"></div>
                <p id="qrLinkText" style="text-align: center; word-break: break-all; font-size: 12px; color: var(--text-secondary); margin-top: 10px;"></p>
            </div>
        </div>
    </div>

    <footer class="footer">
        <p>&copy; 2025 PagJunto. Todos os direitos reservados. | <a href="#">Política de Privacidade</a> | <a href="#">Termos de Serviço</a></p>
    </footer>

    <script>
        const localPartnerId = "<%= partnerData.partnerId %>";
        const localPartnerApiKey = "<%= partnerData.apiKey %>";
        const stats = <%- JSON.stringify(stats || {}) %>;
        const recentOrders = <%- JSON.stringify(orders || []) %>;
        const balance = <%- JSON.stringify(balance || { data: {} }) %>;

        let salesChart, statusChart, currentPage = 1;
        const ORDERS_PER_PAGE = 5;
        let totalPages = Math.ceil(recentOrders.length / ORDERS_PER_PAGE);
        const tableBody = document.querySelector('.table tbody');
        const prevPageBtn = document.getElementById('prevPageBtn');
        const nextPageBtn = document.getElementById('nextPageBtn');
        const pageIndicator = document.getElementById('pageIndicator');
        const qrCodeModal = document.getElementById('qrCodeModal');
        const qrCodeContainer = document.getElementById('qrcode-container');
        const qrCodeModalCloseBtn = document.querySelector('.modal-close-btn');
        const qrLinkText = document.getElementById('qrLinkText');

        function formatCurrency(value) {
            const numValue = typeof value === 'string' ? parseFloat(value) : value;
            if (isNaN(numValue)) return 'R$ 0,00';
            return numValue.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        }

        function formatCurrencyFromCents(cents) {
            const reais = (Number(cents) || 0) / 100;
            return formatCurrency(reais);
        }

        function formatNumber(value) {
            const numValue = Number(value);
            if (isNaN(numValue)) return '0';
            return numValue.toLocaleString('pt-BR');
        }

        function translateStatus(status) {
            const translations = {
                fresh: 'Nova',
                progress: 'Andamento',
                paid: 'Pago'
            };
            return translations[status] || status;
        }

        function calculateMonthlySalesData(orders) {
            const monthlyData = {};
            const months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'];
            const currentMonth = new Date().getMonth();
            const currentYear = new Date().getFullYear();
            const labels = [];

            for (let i = 6; i >= 0; i--) {
                const date = new Date(currentYear, currentMonth - i, 1);
                const monthName = months[date.getMonth()];
                labels.push(monthName);
                monthlyData[monthName] = 0;
            }

            orders.forEach((order) => {
                if (order.createdAt && order.totalValue) {
                    const orderDate = new Date(order.createdAt);
                    const monthName = months[orderDate.getMonth()];
                    if (monthlyData.hasOwnProperty(monthName)) {
                        monthlyData[monthName] += order.totalValue;
                    }
                }
            });

            const data = labels.map(label => monthlyData[label]);
            return { labels, data };
        }

        function displayOrdersForPage(page) {
            currentPage = page;
            tableBody.innerHTML = '';

            if (recentOrders.length === 0) {
                tableBody.innerHTML = `<tr><td colspan="5" style="text-align: center; color: var(--text-secondary);">Nenhuma ordem encontrada.</td></tr>`;
                updatePaginationControls();
                return;
            }

            const start = (page - 1) * ORDERS_PER_PAGE;
            const end = start + ORDERS_PER_PAGE;
            const paginatedOrders = recentOrders.slice(start, end);

            paginatedOrders.forEach(order => {
                const orderNameHTML = (order.name || order.orderName) ? `<span class="order-name-cell">${order.name || order.orderName}</span>` : '';
                const mainRow = `
                    <tr class="main-row">
                        <td data-label="Ordem">
                            <div class="order-identity">
                                ${orderNameHTML}
                                <span class="order-id-cell">${order.orderId}</span>
                            </div>
                        </td>
                        <td data-label="Valor Total">${formatCurrency(order.totalValue || 0)}</td>
                        <td data-label="Valor Pago">${formatCurrency(order.paidValue || 0)}</td>
                        <td data-label="Status"><span class="status-badge ${order.status}">${translateStatus(order.status)}</span></td>
                        <td data-label="Ações">
                            <div class="actions-cell">
                                <button class="details-btn-table" title="Ver Detalhes" aria-expanded="false" onclick="toggleOrderDetails(event, '${order.orderId}')"><i class="fas fa-chevron-down"></i><span class="btn-text"> Detalhes</span></button>
                                <button class="copy-btn-table" title="Copiar Link" onclick="copyOrderLink(event, '${order.orderId}')"><i class="fas fa-copy"></i><span class="btn-text"> Copiar</span></button>
                                <button class="qr-btn" title="Mostrar QR Code" onclick="showQrCode(event, '${order.orderId}')"><i class="fas fa-qrcode"></i><span class="btn-text"> QR Code</span></button>
                            </div>
                        </td>
                    </tr>`;

                let payersListHTML = '<span>Nenhum pagador identificado.</span>';
                if (Array.isArray(order.payersIds) && order.payersIds.length > 0) {
                    payersListHTML = `<ul class="payer-details-list">${
                        order.payersIds.map((id, index) => {
                            const name = (Array.isArray(order.payersNames) && order.payersNames[index]) ? order.payersNames[index] : 'Pagador';
                            const value = (Array.isArray(order.payersValues) && typeof order.payersValues[index] !== 'undefined') ? formatCurrency(order.payersValues[index]) : '';
                            
                            return `<li>
                                        <strong>${name}</strong>
                                        <span class="payer-id">CPF: ${id}</span>
                                        <span class="payer-amount">Valor Pago: ${value}</span>
                                    </li>`;
                        }).join('')
                    }</ul>`;
                }

                const detailsRow = `
                    <tr class="details-row" id="details-row-${order.orderId}">
                        <td colspan="5">
                            <div class="details-content">
                                <h4>Detalhes da Ordem</h4>
                                <div class="detail-item">
                                    <strong>Nome:</strong>
                                    <span>${order.name || order.orderName || 'Não especificado'}</span>
                                </div>
                                <div class="detail-item">
                                    <strong>ID da Ordem:</strong>
                                    <span>${order.orderId}</span>
                                </div>
                                <div class="detail-item">
                                    <strong>Data de Criação:</strong>
                                    <span>${new Date(order.createdAt).toLocaleString('pt-BR', { dateStyle: 'short', timeStyle: 'short' })}</span>
                                </div>
                                <div class="detail-item">
                                    <strong>Pagadores:</strong>
                                    ${payersListHTML}
                                </div>
                            </div>
                        </td>
                    </tr>`;

                tableBody.innerHTML += mainRow + detailsRow;
            });

            updatePaginationControls();
        }

        function toggleOrderDetails(event, orderId) {
            event.stopPropagation();
            const detailsRow = document.getElementById('details-row-' + orderId);
            const button = event.currentTarget;
            const icon = button.querySelector('i');
            
            const isExpanded = detailsRow.classList.toggle('is-expanded');
            button.setAttribute('aria-expanded', isExpanded);
            
            if (isExpanded) {
                icon.classList.remove('fa-chevron-down');
                icon.classList.add('fa-chevron-up');
            } else {
                icon.classList.remove('fa-chevron-up');
                icon.classList.add('fa-chevron-down');
            }
        }

        function updatePaginationControls() {
            totalPages = Math.ceil(recentOrders.length / ORDERS_PER_PAGE);
            const paginationControlsEl = document.querySelector('.pagination-controls');

            if (totalPages <= 1) {
                paginationControlsEl.style.display = 'none';
            } else {
                paginationControlsEl.style.display = 'flex';
            }

            pageIndicator.textContent = `Página ${currentPage} de ${totalPages}`;
            prevPageBtn.disabled = currentPage === 1;
            nextPageBtn.disabled = currentPage === totalPages;
        }

        function setupPaginationListeners() {
            prevPageBtn.addEventListener('click', () => { if (currentPage > 1) displayOrdersForPage(currentPage - 1); });
            nextPageBtn.addEventListener('click', () => { if (currentPage < totalPages) displayOrdersForPage(currentPage + 1); });
        }

        function updateDashboardDisplay() {
            const totalBalanceCents = (balance.data.available_amount || 0) + (balance.data.waiting_funds_amount || 0);
            document.getElementById('accountBalanceValue').textContent = formatCurrencyFromCents(totalBalanceCents);
            document.getElementById('totalSalesValue').textContent = formatCurrency(stats.totalValue || 0);
            document.getElementById('totalPaidValue').textContent = formatCurrency(stats.paidValue || 0);
            document.getElementById('totalOrdersValue').textContent = formatNumber(stats.totalOrders || 0);
            document.getElementById('paidOrdersValue').textContent = formatNumber(stats.paidOrders || 0);
            document.getElementById('newOrdersValue').textContent = formatNumber(stats.freshOrders || 0);
            document.getElementById('progressOrdersValue').textContent = formatNumber(stats.progressOrders || 0);
            document.getElementById('totalPayersValue').textContent = formatNumber(stats.totalPayers || 0);

            const averageTicket = (stats.totalOrders > 0) ? (stats.totalValue / stats.totalOrders) : 0;
            document.getElementById('averageTicketValue').textContent = formatCurrency(averageTicket);

            const conversionRate = (stats.totalOrders > 0) ? (stats.paidOrders / stats.totalOrders) * 100 : 0;
            document.getElementById('conversionRateValue').textContent = conversionRate.toFixed(1).replace('.', ',') + '%';

            updateSalesChart();
            updateStatusChart();
        }

        function updateSalesChart() {
            const ctx = document.getElementById('salesChart').getContext('2d');
            const monthlySales = calculateMonthlySalesData(recentOrders);

            if (salesChart) {
                salesChart.destroy();
            }

            salesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: monthlySales.labels,
                    datasets: [{
                        label: 'Vendas Totais (R$)',
                        data: monthlySales.data,
                        borderColor: '#2563eb',
                        backgroundColor: 'rgba(37, 99, 235, 0.1)',
                        tension: 0.4,
                        fill: true,
                        borderWidth: 3,
                        pointBackgroundColor: '#2563eb',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            ticks: {
                                callback: value => formatCurrency(value)
                            },
                            grid: {
                                color: 'rgba(226, 232, 240, 0.5)'
                            }
                        },
                        x: {
                            grid: {
                                color: 'rgba(226, 232, 240, 0.5)'
                            }
                        }
                    }
                }
            });
        }

        function updateStatusChart() {
            const ctx = document.getElementById('statusChart').getContext('2d');
            const statusData = [
                stats.freshOrders || 0,
                stats.progressOrders || 0,
                stats.paidOrders || 0
            ];

            if (statusChart) {
                statusChart.destroy();
            }

            statusChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Novas', 'Em Progresso', 'Pagas'],
                    datasets: [{
                        data: statusData,
                        backgroundColor: ['#6b7280', '#d97706', '#059669'],
                        borderColor: '#ffffff',
                        borderWidth: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        legend: {
                            position: 'bottom',
                            labels: {
                                usePointStyle: true,
                                boxWidth: 8,
                                padding: 20,
                                font: {
                                    weight: 600
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                    const percentage = total > 0 ? ((context.parsed / total) * 100).toFixed(1) : 0;
                                    return ` ${context.label}: ${context.parsed} (${percentage}%)`;
                                }
                            }
                        }
                    }
                }
            });
        }

        function updateDashboardWithNewOrder(newOrder) {
            recentOrders.unshift(newOrder);
            stats.totalValue = (stats.totalValue || 0) + newOrder.totalValue;
            stats.totalOrders = (stats.totalOrders || 0) + 1;
            stats.freshOrders = (stats.freshOrders || 0) + 1;
            updateDashboardDisplay();
            displayOrdersForPage(1);
        }

        document.getElementById('newOrderForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            const orderNameInput = document.getElementById('orderName');
            const totalValueInput = document.getElementById('totalValue');
            const totalValue = parseFloat(totalValueInput.value);
            const orderName = orderNameInput.value;
            const submitButton = e.target.querySelector('button[type="submit"]');

            submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Criando...';
            submitButton.disabled = true;

            try {
                const payload = {
                    name: orderName || '',
                    partnerId: localPartnerId,
                    totalValue: totalValue,
                    apiKey: localPartnerApiKey,
                };

                const response = await fetch('https://api.pagjunto.com/order', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({ message: 'Erro desconhecido.' }));
                    throw new Error(errorData.message || `Erro HTTP: ${response.status}`);
                }

                const orderId = await response.json();
                
                const orderLinkElement = document.getElementById('orderLink');
                const orderCreationResult = document.getElementById('orderCreationResult');
                const generatedOrderLink = `https://pagjunto.com/${localPartnerId}/${orderId}`;
                orderLinkElement.href = generatedOrderLink;
                orderLinkElement.textContent = generatedOrderLink;
                orderCreationResult.style.display = 'flex';
                showToast('Ordem criada com sucesso!');
                
                const newOrder = {
                    name: orderName,
                    orderId: orderId,
                    totalValue: totalValue,
                    paidValue: 0,
                    status: 'fresh',
                    payersIds: [],
                    payersNames: [],
                    payersValues: [],
                    createdAt: new Date().toISOString()
                };
                updateDashboardWithNewOrder(newOrder);
                
                totalValueInput.value = '';
                orderNameInput.value = '';
            } catch (error) {
                console.error('Erro ao criar ordem:', error);
                alert('Erro ao criar ordem: ' + error.message);
            } finally {
                submitButton.innerHTML = '<i class="fas fa-plus"></i> Gerar Ordem de Pagamento';
                submitButton.disabled = false;
            }
        });

        function copyToClipboard(text, successMessage) {
            navigator.clipboard.writeText(text).then(() => {
                showToast(successMessage);
            }).catch(err => {
                console.error('Falha ao copiar:', err);
                const textArea = document.createElement("textarea");
                textArea.value = text;
                textArea.style.position = "fixed";
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                try {
                    document.execCommand('copy');
                    showToast(successMessage);
                } catch (e) {
                    console.error('Fallback falhou:', e);
                    alert('Não foi possível copiar.');
                }
                document.body.removeChild(textArea);
            });
        }

        function copyOrderLink(event, orderId) {
            event.stopPropagation();
            const orderLink = `https://pagjunto.com/${localPartnerId}/${orderId}`;
            copyToClipboard(orderLink, 'Link da ordem copiado!');
        }

        document.getElementById('copyApiKeyButton').addEventListener('click', function() {
            copyToClipboard(localPartnerApiKey, 'Chave de API copiada!');
        });

        function showToast(message) {
            const toast = document.getElementById('copyToast');
            if (!toast) return;
            toast.textContent = message;
            toast.classList.add('show');
            setTimeout(() => toast.classList.remove('show'), 3000);
        }

        function generateAndShowQrModal(link) {
            if (!qrCodeModal || !qrCodeContainer) return;
            qrCodeContainer.innerHTML = '';
            qrCodeModal.classList.add('show');
            
            const modalContent = qrCodeModal.querySelector('.modal-content');
            const size = Math.min(modalContent.clientWidth * 0.8, 256);
            
            new QRCode(qrCodeContainer, {
                text: link,
                width: size,
                height: size,
                colorDark: "#000000",
                colorLight: "#ffffff",
                correctLevel: QRCode.CorrectLevel.H
            });
            qrLinkText.textContent = link;
        }

        function showQrCode(event, orderId) {
            event.stopPropagation();
            const orderLink = `https://pagjunto.com/${localPartnerId}/${orderId}`;
            generateAndShowQrModal(orderLink);
        }

        function setupModalListeners() {
            if (qrCodeModalCloseBtn) {
                qrCodeModalCloseBtn.addEventListener('click', () => {
                    qrCodeModal.classList.remove('show');
                });
            }
            if (qrCodeModal) {
                qrCodeModal.addEventListener('click', (event) => {
                    if (event.target === qrCodeModal) {
                        qrCodeModal.classList.remove('show');
                    }
                });
            }
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && qrCodeModal && qrCodeModal.classList.contains('show')) {
                    qrCodeModal.classList.remove('show');
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            updateDashboardDisplay();
            setupPaginationListeners();
            setupModalListeners();
            displayOrdersForPage(1);

            const copyButton = document.getElementById('copyLinkButton');
            if(copyButton) {
                copyButton.addEventListener('click', (event) => {
                    event.stopPropagation();
                    const link = document.getElementById('orderLink').href;
                    copyToClipboard(link, 'Link da ordem copiado!');
                    const button = event.currentTarget;
                    const originalHTML = button.innerHTML;
                    button.innerHTML = '<i class="fas fa-check"></i> Copiado!';
                    setTimeout(() => {
                        button.innerHTML = originalHTML;
                    }, 2000);
                });
            }

            const qrButton = document.getElementById('qrCodeNewOrderButton');
            if(qrButton) {
                qrButton.addEventListener('click', (event) => {
                    event.stopPropagation();
                    const link = document.getElementById('orderLink').href;
                    generateAndShowQrModal(link);
                });
            }

            // Enhanced animations for dashboard elements
            const animatedElements = document.querySelectorAll('.metric-card, .chart-card, .content-section, .create-order-section');
            animatedElements.forEach((el, index) => {
                el.style.opacity = '0';
                el.style.transform = 'translateY(30px)';
                setTimeout(() => {
                    el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
                    el.style.opacity = '1';
                    el.style.transform = 'translateY(0)';
                }, index * 100);
            });

            // Add parallax effect to background elements
            window.addEventListener('scroll', () => {
                const scrolled = window.pageYOffset;
                const parallaxElements = document.querySelectorAll('.bg-circle, .bg-square');
                
                parallaxElements.forEach((element, index) => {
                    const speed = 0.3 + (index * 0.1);
                    element.style.transform = `translateY(${scrolled * speed}px)`;
                });
            });

            // Add hover effects to metric cards
            const metricCards = document.querySelectorAll('.metric-card');
            metricCards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-8px) scale(1.02)';
                });
                
                card.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0) scale(1)';
                });
            });
        });
    </script>
</body>
</html>