<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pagamento Seguro - Pagjunto</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link rel="icon" href="/favicon.ico" type="image/x-icon">
    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="manifest" href="/site.webmanifest">
    <script src="<%=process.env.API_SITE_URL%>/socket.io/socket.io.js"></script>
    <style>
        :root {
            --primary: #2563eb;
            --primary-hover: #1d4ed8;
            --primary-light: #dbeafe;
            --accent: #059669;
            --accent-light: #d1fae5;
            --accent-hover: #a7f3d0;
            --error: #dc2626;
            --warning: #f59e0b;
            --warning-light: #fef3c7;
            --bg-primary: #ffffff;
            --bg-secondary: #f8fafc;
            --bg-tertiary: #f1f5f9;
            --text-header: #0f172a;
            --text-body: #374151;
            --text-muted: #6b7280;
            --border: #e2e8f0;
            --border-light: #f1f5f9;
            --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.04);
            --shadow-md: 0 4px 16px rgba(0, 0, 0, 0.08);
            --shadow-lg: 0 8px 32px rgba(37, 99, 235, 0.12);
            --radius: 12px;
            --radius-lg: 20px;
            --gradient-primary: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%);
            --gradient-accent: linear-gradient(135deg, #2563eb 0%, #1d4ed8 100%);
            --gradient-card: linear-gradient(145deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.9) 100%);
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html {
            scroll-behavior: smooth;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--bg-secondary);
            color: var(--text-body);
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            position: relative;
            overflow-x: hidden;
        }

        .bg-decoration {
            position: fixed;
            top: 0; left: 0; width: 100%; height: 100%;
            pointer-events: none;
            z-index: 0;
            opacity: 0.6;
        }

        .bg-circle {
            position: absolute;
            border-radius: 50%;
            background: linear-gradient(135deg, rgba(37, 99, 235, 0.1), rgba(96, 165, 250, 0.05));
            animation: float 20s ease-in-out infinite;
        }

        .bg-circle:nth-child(1) { width: 300px; height: 300px; top: 10%; left: -150px; }
        .bg-circle:nth-child(2) { width: 200px; height: 200px; top: 60%; right: -100px; animation-delay: -7s; }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-30px) rotate(180deg); }
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 24px;
            position: relative;
            z-index: 1;
        }

        header {
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
            padding: 20px 0;
            border-bottom: 1px solid var(--border);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        header .logo {
            font-weight: 700;
            font-size: 24px;
            background: var(--gradient-accent);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            cursor: pointer;
            transition: opacity 0.2s;
        }

        header .logo:hover {
            opacity: 0.8;
        }

        header .secure-badge {
            font-size: 14px;
            color: var(--text-muted);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        header .secure-badge i {
            color: var(--accent);
        }

        main {
            padding: 40px 0 60px;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            align-items: start;
        }

        .card {
            background: var(--bg-primary);
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border);
            padding: 30px;
            transition: all 0.3s ease;
            position: relative;
            margin-top: 20px;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .card-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 25px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border-light);
        }

        .section-title {
            font-size: 20px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 12px;
            color: var(--text-header);
        }

        .section-title i {
            color: var(--primary);
        }

        .card-actions {
            display: flex;
            gap: 8px;
        }

        .action-btn {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            color: var(--text-muted);
            width: 36px;
            height: 36px;
            border-radius: var(--radius);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            font-size: 14px;
        }

        .action-btn:hover {
            background: var(--bg-secondary);
            color: var(--primary);
            border-color: var(--primary);
            transform: translateY(-1px);
        }

        .action-btn.copied {
            color: var(--accent);
            border-color: var(--accent);
            background-color: var(--accent-light);
        }

        .status-badge {
            background-color: var(--accent-light);
            color: var(--accent);
            padding: 6px 12px;
            border-radius: 999px;
            font-size: 12px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-badge.pending {
            background-color: var(--warning-light);
            color: var(--warning);
        }

        /* Summary Card Styles */
        .summary-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 25px;
        }

        .summary-item {
            text-align: center;
            padding: 20px;
            background: var(--bg-tertiary);
            border-radius: var(--radius);
            border: 1px solid var(--border-light);
        }

        .summary-item label {
            display: block;
            font-weight: 500;
            color: var(--text-muted);
            font-size: 13px;
            margin-bottom: 8px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .summary-item .value {
            font-size: 24px;
            font-weight: 700;
            color: var(--text-header);
        }

        .summary-item .value.primary {
            color: var(--primary);
        }

        .summary-item .value.paid {
            color: var(--accent);
        }

        .progress-container {
            margin-top: 20px;
        }

        .progress-container label {
            display: block;
            font-weight: 500;
            color: var(--text-muted);
            font-size: 14px;
            margin-bottom: 8px;
        }

        .progress {
            background-color: var(--border-light);
            height: 12px;
            border-radius: 6px;
            overflow: hidden;
            position: relative;
        }

        .progress-fill {
            height: 100%;
            background: <%= (orderData.paidValue >= orderData.totalValue) ? 'var(--accent)' : 'var(--primary)' %>;
            width: <%= (orderData.paidValue / orderData.totalValue) * 100 %>%;
            transition: width 0.5s ease-in-out, background-color 0.5s ease-in-out;
            border-radius: 6px;
        }

        .progress-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 11px;
            font-weight: 600;
            color: var(--text-body);
            z-index: 1;
        }

        /* Payers List Styles */
        .payers-section {
            margin-top: 30px;
            padding-top: 25px;
            border-top: 1px solid var(--border-light);
        }

        .payers-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .payers-title {
            font-size: 16px;
            font-weight: 600;
            color: var(--text-header);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .payers-count {
            background: var(--primary-light);
            color: var(--primary);
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        .payers-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .payer-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 16px;
            background: var(--bg-tertiary);
            border-radius: var(--radius);
            border: 1px solid var(--border-light);
            transition: all 0.2s ease;
        }

        .payer-item:hover {
            background: var(--bg-secondary);
            border-color: var(--border);
        }

        .payer-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .payer-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: var(--primary-light);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: var(--primary);
            font-size: 14px;
        }

        .payer-details h4 {
            font-size: 14px;
            font-weight: 600;
            color: var(--text-header);
            margin-bottom: 2px;
        }

        .payer-details span {
            font-size: 12px;
            color: var(--text-muted);
        }

        .payer-value {
            font-size: 16px;
            font-weight: 700;
            color: var(--accent);
        }

        .empty-payers {
            text-align: center;
            padding: 40px 20px;
            color: var(--text-muted);
        }

        .empty-payers i {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.5;
        }

        /* Payment Form Styles */
        .payment-card {
            grid-column: span 1;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            font-weight: 500;
            margin-bottom: 8px;
            font-size: 15px;
            color: var(--text-body);
        }

        input[type="text"],
        input[type="number"] {
            width: 100%;
            padding: 16px;
            font-size: 1rem;
            color: var(--text-body);
            background: linear-gradient(145deg, rgba(255, 255, 255, 0.9), var(--bg-secondary));
            border: 1px solid var(--border);
            border-radius: var(--radius);
            transition: border-color 0.2s, box-shadow 0.2s, background-color 0.2s;
        }

        input[type="text"]:focus,
        input[type="number"]:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px var(--primary-light);
            background-color: var(--bg-primary);
        }

        .error-message {
            color: var(--error);
            font-size: 14px;
            margin-top: -10px;
            margin-bottom: 15px;
            height: 25px;
        }

        .btn {
            background: var(--gradient-accent);
            color: white;
            font-size: 16px;
            padding: 16px;
            width: 100%;
            border: none;
            border-radius: var(--radius);
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            margin-top: 5px;
            transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            box-shadow: 0 4px 16px rgba(37, 99, 235, 0.2);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(37, 99, 235, 0.3);
        }

        .btn:disabled {
            background: var(--text-muted);
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .loader {
            width: 18px;
            height: 18px;
            border: 2px solid rgba(255, 255, 255, 0.5);
            border-top-color: #fff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .qr-container {
            text-align: center;
            margin-top: 30px;
            padding-top: 25px;
            border-top: 1px dashed var(--border);
            opacity: 0;
            transform: translateY(10px);
            transition: opacity 0.5s ease, transform 0.5s ease;
            display: none;
        }

        .qr-container.visible {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }

        .qr-container img {
            max-width: 200px;
            margin: 10px auto 15px;
            border-radius: var(--radius-lg);
            border: 1px solid var(--border);
            box-shadow: var(--shadow-md);
        }

        .pix-key-wrapper {
            display: flex;
            background-color: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 4px;
            margin-top: 15px;
            align-items: center;
        }

        .pix-key-wrapper input {
            flex-grow: 1;
            border: none;
            background: transparent;
            color: var(--text-muted);
            font-size: 14px;
            outline: none;
            padding: 8px;
        }

        .copy-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            transition: background-color 0.2s, transform 0.2s;
        }

        .copy-btn:hover {
            background-color: var(--primary-hover);
            transform: scale(1.05);
        }

        .terms-consent {
            margin-bottom: 20px;
            padding: 12px;
            background-color: var(--primary-light);
            border-radius: var(--radius);
            border: 1px solid rgba(37, 99, 235, 0.2);
        }

        .checkbox-container {
            display: flex;
            align-items: flex-start;
            gap: 12px;
        }

        .checkbox-container input[type="checkbox"] {
            margin-top: 3px;
            width: 18px;
            height: 18px;
            accent-color: var(--primary);
            cursor: pointer;
            flex-shrink: 0;
        }

        .checkbox-label {
            font-size: 14px;
            line-height: 1.5;
            color: var(--text-body);
            cursor: pointer;
        }

        .terms-link {
            color: var(--primary);
            text-decoration: underline;
            cursor: pointer;
            font-weight: 600;
        }

        .terms-link:hover {
            color: var(--primary-hover);
        }

        .paid-card-message {
            text-align: center;
            padding: 40px 20px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .paid-card-message .section-title {
            justify-content: center;
            font-size: 22px;
            margin-bottom: 15px;
        }

        .paid-card-message p {
            font-size: 16px;
            color: var(--text-muted);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(17, 24, 39, 0.6);
            backdrop-filter: blur(4px);
            animation: fadeIn 0.3s ease;
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: var(--bg-primary);
            margin: 20px;
            padding: 0;
            border-radius: var(--radius-lg);
            box-shadow: var(--shadow-lg);
            width: 90%;
            max-width: 700px;
            max-height: 85vh;
            display: flex;
            flex-direction: column;
            position: relative;
            animation: slideIn 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            border-bottom: 1px solid var(--border);
            flex-shrink: 0;
        }

        .modal-title {
            font-size: 22px;
            font-weight: 600;
            color: var(--text-header);
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            color: var(--text-muted);
            cursor: pointer;
            padding: 5px;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s, color 0.2s;
        }

        .close-btn:hover {
            background-color: var(--bg-secondary);
            color: var(--text-body);
        }

        .modal-body {
            line-height: 1.6;
            color: var(--text-body);
            padding: 25px 30px;
            overflow-y: auto;
        }

        .modal-body.centered { 
            text-align: center; 
        }

        #pageQrcodeContainer { 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            margin: 20px 0; 
        }

        .modal-body h3 {
            color: var(--text-header);
            font-size: 18px;
            font-weight: 600;
            margin-top: 25px;
            margin-bottom: 15px;
        }

        .modal-body h3:first-child { 
            margin-top: 0; 
        }

        .modal-body p { 
            margin-bottom: 15px; 
        }

        .modal-body ul { 
            margin-bottom: 15px; 
            padding-left: 20px; 
        }

        .modal-body li { 
            margin-bottom: 8px; 
        }

        footer {
            text-align: center;
            padding: 40px 0;
            font-size: 14px;
            color: var(--text-muted);
            border-top: 1px solid var(--border);
            margin-top: 60px;
        }

        .footer-content i {
            color: var(--accent);
            margin-right: 5px;
        }

        footer a {
            color: var(--primary);
            text-decoration: none;
            font-weight: 500;
        }

        footer a:hover {
            text-decoration: underline;
        }

        @keyframes fadeIn { 
            from { opacity: 0; } 
            to { opacity: 1; } 
        }

        @keyframes slideIn {
            from { opacity: 0; transform: translateY(-30px) scale(0.95); }
            to { opacity: 1; transform: translateY(0) scale(1); }
        }

        @media (max-width: 1024px) {
            main {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .summary-grid {
                grid-template-columns: 1fr 1fr;
            }
            
            .paid-card-message {
                grid-column: span 1;
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 0 16px;
            }
            
            .card {
                padding: 20px;
            }
            
            .summary-grid {
                grid-template-columns: 1fr;
                gap: 12px;
            }
            
            .card-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
            
            .card-actions {
                align-self: flex-end;
            }
            
            .modal-content { 
                margin: 10px; 
                padding: 0; 
            }
            
            .modal-header, .modal-body { 
                padding: 20px; 
            }
        }
    </style>
</head>
<body>
    <div class="bg-decoration">
        <div class="bg-circle"></div>
        <div class="bg-circle"></div>
    </div>

    <header>
        <div class="container header-content">
            <div class="logo" onclick="window.location.href='/'">pagjunto</div>
            <div class="secure-badge">
                <i class="fas fa-lock"></i> Pagamento Seguro
            </div>
        </div>
    </header>

    <main class="container">
        <div class="card">
            <div class="card-header">
                <div class="section-title">
                    <i class="fas fa-file-invoice-dollar"></i>
                    <span>Cobrança de <%= partnerData.partnerName %></span>
                </div>
                <div class="card-actions">
                    <button class="action-btn" id="copyLinkBtn" title="Copiar link da cobrança">
                        <i class="fas fa-link"></i>
                    </button>
                    <button class="action-btn" id="showQrBtn" title="Mostrar QR Code do link">
                        <i class="fas fa-qrcode"></i>
                    </button>
                    <% if (orderData.paidValue >= orderData.totalValue) { %>
                        <span class="status-badge">
                            <i class="fas fa-check-circle"></i> Pago
                        </span>
                    <% } else { %>
                        <span class="status-badge pending">
                            <i class="fas fa-clock"></i> Pendente
                        </span>
                    <% } %>
                </div>
            </div>

            <div class="summary-grid">
                <div class="summary-item">
                    <label>Valor Total</label>
                    <span class="value">R$ <%= orderData.totalValue.toFixed(2).replace('.', ',') %></span>
                </div>
                <div class="summary-item">
                    <label>Valor Pago</label>
                    <span id="paidValueSpan" class="value <%= (orderData.paidValue >= orderData.totalValue) ? 'paid' : 'primary' %>">
                        R$ <%= orderData.paidValue.toFixed(2).replace('.', ',') %>
                    </span>
                </div>
            </div>

            <div class="progress-container">
                <label>Progresso do Pagamento</label>
                <div class="progress">
                    <div id="progressFill" class="progress-fill"></div>
                    <div class="progress-text">
                        <%= Math.round((orderData.paidValue / orderData.totalValue) * 100) %>%
                    </div>
                </div>
            </div>

            <div class="payers-section">
                <div class="payers-header">
                    <div class="payers-title">
                        <i class="fas fa-users"></i>
                        Quem já pagou
                        <span class="payers-count" id="payersCount"><%= orderData.paymentsNumber %></span>
                    </div>
                </div>

                <div class="payers-list" id="payersList">
                    <% if (orderData.payersNames && orderData.payersNames.length > 0) { %>
                        <% for (let i = 0; i < orderData.payersNames.length; i++) { %>
                            <div class="payer-item">
                                <div class="payer-info">
                                    <div class="payer-avatar">
                                        <%= orderData.payersNames[i].charAt(0).toUpperCase() %>
                                    </div>
                                    <div class="payer-details">
                                        <h4><%= orderData.payersNames[i] %></h4>
                                        <span>Pagamento confirmado</span>
                                    </div>
                                </div>
                                <div class="payer-value">
                                    R$ <%= orderData.payersValues[i].toFixed(2).replace('.', ',') %>
                                </div>
                            </div>
                        <% } %>
                    <% } else { %>
                        <div class="empty-payers">
                            <i class="fas fa-users-slash"></i>
                            <p>Nenhum pagamento recebido ainda</p>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>

        <% if (orderData.paidValue >= orderData.totalValue) { %>
            <div class="card paid-card-message">
                <div class="section-title">
                    <i class="fas fa-check-circle" style="color: var(--accent);"></i>
                    Cobrança Finalizada
                </div>
                <p>Este pagamento já foi totalmente finalizado. Obrigado!</p>
            </div>
        <% } else { %>
            <div class="card payment-card" id="paymentCard">
                <div class="card-header">
                    <div class="section-title">
                        <i class="fas fa-qrcode"></i> 
                        Pague com Pix
                    </div>
                </div>

                <form id="paymentForm" novalidate>
                    <div class="form-group">
                        <label for="name">Seu nome completo</label>
                        <input type="text" id="name" placeholder="Digite seu nome completo" required />
                    </div>
                    <div class="form-group">
                        <label for="cpf">Seu CPF (para identificação)</label>
                        <input type="text" id="cpf" placeholder="000.000.000-00" required />
                    </div>
                    <div class="form-group">
                        <label for="phone">Seu telefone (com DDD)</label>
                        <input type="text" id="phone" placeholder="(99) 99999-9999" required />
                    </div>
                    <div class="form-group">
                        <label for="valor">Valor a pagar</label>
                        <input type="text" id="valor" placeholder="Ex: 50,00" inputmode="decimal" required />
                    </div>
                    <div class="terms-consent">
                        <div class="checkbox-container">
                            <input type="checkbox" id="termsCheckbox" required />
                            <label for="termsCheckbox" class="checkbox-label">
                                Concordo com os <span class="terms-link" id="openTermsModal">Termos e Condições de Uso.</span>
                            </label>
                        </div>
                    </div>
                    <div id="errorMessage" class="error-message"></div>
                    <button type="submit" id="generateBtn" class="btn">
                        <span id="btnText">Gerar QR Code Pix</span>
                        <div id="loader" class="loader" style="display: none;"></div>
                    </button>
                </form>

                <div class="qr-container" id="qrBox">
                    <p><strong>Tudo pronto!</strong> Escaneie o código abaixo para pagar:</p>
                    <img src="/placeholder.svg" alt="QR Code Pix" />
                    <p>Ou copie a chave Pix:</p>
                    <div class="pix-key-wrapper">
                        <input type="text" readonly id="pixKey" value="" />
                        <button class="copy-btn" id="copyBtn">Copiar</button>
                    </div>
                </div>
            </div>
        <% } %>
    </main>

    <div id="termsModal" class="modal"></div>
    
    <div id="pageQrModal" class="modal">
        <div class="modal-content" style="max-width: 450px;">
            <div class="modal-header">
                <h2 class="modal-title">Compartilhar Link da Cobrança</h2>
                <button id="closeQrModal" class="close-btn">&times;</button>
            </div>
            <div class="modal-body centered">
                <p>Escaneie para abrir esta página em outro dispositivo.</p>
                <div id="pageQrcodeContainer"></div>
                <p style="margin-top: 15px; font-size: 14px; word-break: break-all;">Ou copie o link:</p>
                <div class="pix-key-wrapper" style="max-width: 400px; margin: 10px auto 0;">
                    <input type="text" readonly id="pageQrLinkText" value="" />
                    <button class="copy-btn" id="copyPageLinkBtn">Copiar</button>
                </div>
            </div>
        </div>
    </div>

    <footer>
        <div class="container footer-content">
            <p><i class="fas fa-shield-alt"></i>Conexão Segura. © 2025 Pagjunto — Dúvidas? <a href="mailto:suporte@pagjunto.com">suporte@pagjunto.com</a></p>
        </div>
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            function getLastIdsFromCurrentUrl() {
                const parts = window.location.href.split("/").filter(Boolean);
                const id2 = parts[parts.length - 1];
                return { id2 };
            }

            // Copy link functionality
            const copyLinkBtn = document.getElementById('copyLinkBtn');
            if (copyLinkBtn) {
                copyLinkBtn.addEventListener('click', () => {
                    navigator.clipboard.writeText(window.location.href).then(() => {
                        const originalIcon = copyLinkBtn.innerHTML;
                        copyLinkBtn.innerHTML = '<i class="fas fa-check"></i>';
                        copyLinkBtn.classList.add('copied');
                        copyLinkBtn.disabled = true;
                        setTimeout(() => {
                            copyLinkBtn.innerHTML = originalIcon;
                            copyLinkBtn.classList.remove('copied');
                            copyLinkBtn.disabled = false;
                        }, 2000);
                    }).catch(err => {
                        console.error('Falha ao copiar o link: ', err);
                        alert('Não foi possível copiar o link.');
                    });
                });
            }

            // QR Code modal functionality
            const showQrBtn = document.getElementById('showQrBtn');
            const pageQrModal = document.getElementById('pageQrModal');
            const closeQrModalBtn = document.getElementById('closeQrModal');
            const pageQrcodeContainer = document.getElementById('pageQrcodeContainer');
            const pageQrLinkText = document.getElementById('pageQrLinkText');
            const copyPageLinkBtn = document.getElementById('copyPageLinkBtn');

            if (showQrBtn) {
                showQrBtn.addEventListener('click', () => {
                    const pageUrl = window.location.href;
                    pageQrcodeContainer.innerHTML = '';
                    new QRCode(pageQrcodeContainer, {
                        text: pageUrl, width: 256, height: 256,
                        colorDark: "#000000", colorLight: "#ffffff",
                        correctLevel: QRCode.CorrectLevel.H
                    });
                    pageQrLinkText.value = pageUrl;
                    pageQrModal.classList.add('show');
                    document.body.style.overflow = 'hidden';
                });
            }

            if (closeQrModalBtn) {
                closeQrModalBtn.addEventListener('click', () => {
                    pageQrModal.classList.remove('show');
                    document.body.style.overflow = 'auto';
                });
            }

            if (copyPageLinkBtn) {
                copyPageLinkBtn.addEventListener('click', () => {
                    navigator.clipboard.writeText(pageQrLinkText.value).then(() => {
                        copyPageLinkBtn.textContent = 'Copiado!';
                        setTimeout(() => { copyPageLinkBtn.textContent = 'Copiar'; }, 2000);
                    });
                });
            }

            // Modal close functionality
            [pageQrModal, document.getElementById('termsModal')].forEach(modal => {
                if (modal) {
                    modal.addEventListener('click', (e) => {
                        if (e.target === modal) {
                            modal.classList.remove('show');
                            document.body.style.overflow = 'auto';
                        }
                    });
                }
            });

            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    document.querySelectorAll('.modal.show').forEach(modal => {
                        modal.classList.remove('show');
                    });
                    document.body.style.overflow = 'auto';
                }
            });

            // Socket.IO functionality
            let socket;
            function initializeSocket() {
                try {
                    const { id2 } = getLastIdsFromCurrentUrl();
                    socket = io("<%=process.env.API_SITE_URL%>", { transports: ['websocket', 'polling'] });
                    
                    socket.on('connect', () => {
                        console.log('✅ Conectado ao WebSocket. Socket ID:', socket.id);
                        socket.emit('joinRoom', id2);
                    });

                    socket.on('disconnect', (reason) => console.log('❌ Desconectado do WebSocket. Motivo:', reason));
                    socket.on('connect_error', (err) => console.error('❌ Falha na conexão com o WebSocket:', err.message));

                    socket.on('paymentConfirmed', (data) => {
                        console.log('🎉 Evento de confirmação de pagamento recebido:', data);
                        try {
                            // Update payers list
                            updatePayersList(data);
                            
                            // Update summary values
                            updateSummaryValues(data);
                            
                            // Show confirmation message in payment card
                            const paymentCard = document.getElementById('paymentCard');
                            if (paymentCard) {
                                const paidAmount = (data && typeof data.paidValue === 'number') ? data.paidValue.toFixed(2).replace('.', ',') : 'um valor';
                                const payer = (data && data.payerName) ? `de <strong>${data.payerName}</strong>` : '';
                                paymentCard.innerHTML = `
                                    <div class="paid-card-message">
                                        <div class="section-title">
                                            <i class="fas fa-check-circle" style="color: var(--accent);"></i>
                                            Pagamento Recebido!
                                        </div>
                                        <p>O pagamento de <strong>R$ ${paidAmount}</strong> ${payer} foi confirmado com sucesso.</p>
                                        <p style="font-size: 14px; margin-top: 10px;">Aguarde, a página será atualizada para refletir o novo saldo.</p>
                                    </div>`;
                            }

                            setTimeout(() => {
                                window.location.reload();
                            }, 5000);
                        } catch (error) {
                            console.error('❌ Erro ao processar o evento de pagamento. Recarregando a página como segurança.', error);
                            window.location.reload();
                        }
                    });
                } catch (error) {
                    console.error("❌ Erro ao inicializar Socket.IO:", error);
                }
            }

            function updatePayersList(data) {
                const payersList = document.getElementById('payersList');
                const payersCount = document.getElementById('payersCount');
                
                if (data && data.payerName && data.paidValue) {
                    // Remove empty state if exists
                    const emptyState = payersList.querySelector('.empty-payers');
                    if (emptyState) {
                        emptyState.remove();
                    }

                    // Add new payer
                    const payerItem = document.createElement('div');
                    payerItem.className = 'payer-item';
                    payerItem.innerHTML = `
                        <div class="payer-info">
                            <div class="payer-avatar">
                                ${data.payerName.charAt(0).toUpperCase()}
                            </div>
                            <div class="payer-details">
                                <h4>${data.payerName}</h4>
                                <span>Pagamento confirmado</span>
                            </div>
                        </div>
                        <div class="payer-value">
                            R$ ${data.paidValue.toFixed(2).replace('.', ',')}
                        </div>
                    `;
                    payersList.appendChild(payerItem);

                    // Update count
                    const currentCount = parseInt(payersCount.textContent) || 0;
                    payersCount.textContent = currentCount + 1;
                }
            }

            function updateSummaryValues(data) {
                if (data && typeof data.totalPaidValue === 'number') {
                    const paidValueSpan = document.getElementById('paidValueSpan');
                    const progressFill = document.getElementById('progressFill');
                    
                    if (paidValueSpan) {
                        paidValueSpan.textContent = `R$ ${data.totalPaidValue.toFixed(2).replace('.', ',')}`;
                    }

                    if (progressFill && data.totalValue) {
                        const percentage = (data.totalPaidValue / data.totalValue) * 100;
                        progressFill.style.width = `${percentage}%`;
                        
                        const progressText = progressFill.parentElement.querySelector('.progress-text');
                        if (progressText) {
                            progressText.textContent = `${Math.round(percentage)}%`;
                        }

                        if (data.totalPaidValue >= data.totalValue) {
                            progressFill.style.background = 'var(--accent)';
                            paidValueSpan.className = 'value paid';
                        }
                    }
                }
            }

            initializeSocket();

            // Payment form functionality
            if (document.getElementById('paymentForm')) {
                const paymentForm = document.getElementById('paymentForm');
                const nameInput = document.getElementById('name');
                const cpfInput = document.getElementById('cpf');
                const phoneInput = document.getElementById('phone');
                const valueInput = document.getElementById('valor');
                const generateBtn = document.getElementById('generateBtn');
                const btnText = document.getElementById('btnText');
                const loader = document.getElementById('loader');
                const qrBox = document.getElementById('qrBox');
                const errorMessage = document.getElementById('errorMessage');
                const copyBtn = document.getElementById('copyBtn');
                const pixKeyInput = document.getElementById('pixKey');
                const termsCheckbox = document.getElementById('termsCheckbox');

                // Input masks
                cpfInput.addEventListener('input', (e) => {
                    let value = e.target.value.replace(/\D/g, '').slice(0, 11);
                    value = value.replace(/(\d{3})(\d)/, '$1.$2').replace(/(\d{3})(\d)/, '$1.$2').replace(/(\d{3})(\d{1,2})$/, '$1-$2');
                    e.target.value = value;
                });

                phoneInput.addEventListener('input', (e) => {
                    let value = e.target.value.replace(/\D/g, '').slice(0, 11);
                    if (value.length > 10) {
                        value = value.replace(/^(\d\d)(\d{5})(\d{4}).*/, '($1) $2-$3');
                    } else if (value.length > 5) {
                        value = value.replace(/^(\d\d)(\d{4})(\d{0,4}).*/, '($1) $2-$3');
                    } else if (value.length > 2) {
                        value = value.replace(/^(\d\d)(\d{0,5}).*/, '($1) $2');
                    } else {
                        value = value.replace(/^(\d*)/, '($1');
                    }
                    e.target.value = value;
                });

                paymentForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    gerarPix();
                });

                async function gerarPix() {
                    errorMessage.textContent = '';
                    const fullName = nameInput.value.trim();
                    const valorString = valueInput.value.replace(',', '.');
                    const valorFloat = parseFloat(valorString);
                    const cpf = cpfInput.value;
                    const phone = phoneInput.value;
                    const rawPhone = phone.replace(/\D/g, '');
                    const totalValue = <%= orderData.totalValue %>;
                    const paidValue = <%= orderData.paidValue %>;
                    const remainingValue = totalValue - paidValue;

                    if (!fullName || fullName.split(' ').length < 2) { 
                        return errorMessage.textContent = "Informe seu nome completo."; 
                    }
                    if (cpf.length !== 14) { 
                        return errorMessage.textContent = "Informe um CPF válido."; 
                    }
                    if (rawPhone.length < 10 || rawPhone.length > 11) { 
                        return errorMessage.textContent = "Informe um telefone válido com DDD."; 
                    }
                    if (isNaN(valorFloat) || valorFloat <= 0) { 
                        return errorMessage.textContent = "Insira um valor de pagamento válido."; 
                    }
                    if (valorFloat > remainingValue + 0.001) {
                        return errorMessage.textContent = `O valor excede o restante (R$ ${remainingValue.toFixed(2).replace('.',',')}).`;
                    }
                    if (!termsCheckbox.checked) { 
                        return errorMessage.textContent = "Você deve concordar com os Termos."; 
                    }

                    generateBtn.disabled = true;
                    btnText.style.display = 'none';
                    loader.style.display = 'block';

                    try {
                        const { id2 } = getLastIdsFromCurrentUrl();
                        const response = await fetch(`<%=process.env.API_SITE_URL%>/payment/create-pix`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                name: fullName,
                                cpf: cpf.replace(/\D/g, ''),
                                phone: {
                                    country_code: '55',
                                    area_code: rawPhone.substring(0, 2),
                                    number: rawPhone.substring(2)
                                },
                                amount: Math.round(valorFloat * 100),
                                recipient_id: "<%=partnerData.recipient_id%>",
                                orderId: id2
                            })
                        });

                        const data = await response.json();
                        if (!response.ok) throw new Error(data.error || 'Erro desconhecido.');

                        btnText.textContent = "QR Code Gerado!";
                        generateBtn.style.background = 'var(--accent)';
                        document.querySelector('#qrBox img').src = data.data.last_transaction.qr_code_url;
                        pixKeyInput.value = data.data.last_transaction.qr_code;
                        qrBox.classList.add('visible');
                        qrBox.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    } catch (error) {
                        errorMessage.textContent = `Erro: ${error.message}`;
                        generateBtn.disabled = false;
                        btnText.textContent = 'Gerar QR Code Pix';
                    } finally {
                        btnText.style.display = 'inline';
                        loader.style.display = 'none';
                    }
                }

                copyBtn.addEventListener('click', () => {
                    navigator.clipboard.writeText(pixKeyInput.value).then(() => {
                        copyBtn.textContent = 'Copiado!';
                        setTimeout(() => { copyBtn.textContent = 'Copiar'; }, 2000);
                    });
                });
            }

            window.addEventListener('beforeunload', () => {
                if (socket) socket.disconnect();
            });
        });
    </script>
</body>
</html>