<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vaquinha de <%= orderData.name %> - pagjunto</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <script src="<%=process.env.API_SITE_URL_BASE%>/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.2/dist/confetti.browser.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <style>
        /* ------------------- */
        /* --- Variáveis e Reset --- */
        /* ------------------- */
        :root {
            --bg-light: #FFFFFF;
            --bg-secondary: #F9FAFB;
            --bg-tertiary: #F3F4F6;
            --text-dark: #1D1D1F;
            --text-muted-dark: #555555;
            
            --accent: #0066CC; /* Azul corporativo */
            --accent-hover: #0052A3;
            --success: #16a34a;
            --danger: #dc2626;
            --border-light: #E5E5E5;

            --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            --ease-out-expo: cubic-bezier(0.16, 1, 0.3, 1);
        }

        *, *::before, *::after {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html {
            scroll-behavior: smooth;
        }

        body {
            background-color: var(--bg-light);
            color: var(--text-dark);
            font-family: var(--font-sans);
            line-height: 1.6;
            font-size: 16px;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            position: relative;
        }

        /* --- Fundo Aura --- */
        .gradient-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            z-index: -1;
        }
        .gradient-blob {
            position: absolute;
            border-radius: 50%;
            filter: blur(100px);
            opacity: 0.3;
        }
        .blob1 { width: 500px; height: 500px; background: #ffc3a0; animation: move 25s infinite alternate; }
        .blob2 { width: 400px; height: 400px; background: #c471ed; animation: move 30s infinite alternate-reverse; }
        .blob3 { width: 300px; height: 300px; background: #12c2e9; animation: move 20s infinite alternate; }
        @keyframes move {
            0% { transform: translate(-100px, -50px) scale(1); }
            50% { transform: translate(200px, 100px) scale(1.2); }
            100% { transform: translate(50px, -150px) scale(0.9); }
        }

        /* ------------------- */
        /* --- Layout Principal --- */
        /* ------------------- */
        .main-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 2rem;
        }

        .payment-dashboard {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            width: 100%;
            max-width: 1100px;
            background-color: rgba(255, 255, 255, 0.7);
            -webkit-backdrop-filter: blur(12px);
            backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.5);
            border-radius: 24px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.1);
            padding: 2rem;
            animation: fade-in-up 0.8s var(--ease-out-expo);
        }

        .context-pane {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .action-pane {
            padding: 2rem;
            background-color: var(--bg-secondary);
            border-radius: 16px;
            border: 1px solid var(--border-light);
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        /* ------------------- */
        /* --- Seções do Conteúdo --- */
        /* ------------------- */
        .header-info {
            text-align: left;
        }
        .header-info .logo {
            font-weight: 700;
            font-size: 1.5rem;
            text-decoration: none;
            color: var(--text-dark);
            margin-bottom: 1.5rem;
            display: block;
        }
        .logo span { color: var(--accent); }
        .header-info .title {
            font-size: 2rem;
            font-weight: 800;
            margin-bottom: 0.5rem;
        }
        .header-info .subtitle {
            font-size: 1.1rem;
            color: var(--text-muted-dark);
        }

        .progress-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
            flex-grow: 1;
        }
        .progress-ring { transform: rotate(-90deg); }
        .progress-ring circle { transition: stroke-dashoffset 1s var(--ease-out-expo), stroke 0.5s; }
        .progress-ring-bg { stroke: var(--border-light); opacity: 0.5; }
        .progress-ring-fg { stroke: var(--accent); }
        .progress-info {
            position: absolute;
            text-align: center;
            pointer-events: none;
        }
        .progress-info .label { text-transform: uppercase; font-size: 0.9rem; letter-spacing: 1px; }
        .progress-info .paid-value { font-size: 2.5rem; font-weight: 800; color: var(--text-dark); margin: 0.25rem 0; }
        .progress-info .total-value { font-size: 1.1rem; }

        .action-title { font-size: 1.5rem; font-weight: 600; color: var(--text-dark); margin-bottom: 0.5rem; text-align: center; }
        .action-subtitle { margin-bottom: 1.5rem; text-align: center; }

        .payers-list-container h3 {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--text-dark);
            margin-bottom: 1rem;
        }
        .payers-list {
            max-height: 150px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
            padding-right: 0.5rem;
        }
        .payers-list::-webkit-scrollbar { width: 4px; }
        .payers-list::-webkit-scrollbar-track { background: transparent; }
        .payers-list::-webkit-scrollbar-thumb { background: var(--border-light); border-radius: 4px; }
        .payer-item {
            display: flex; align-items: center; justify-content: space-between;
            background-color: var(--bg-light); padding: 0.75rem 1rem;
            border-radius: 8px; border: 1px solid var(--border-light);
            animation: slide-in-item 0.5s var(--ease-out-expo);
        }
        .payer-info { display: flex; align-items: center; gap: 0.75rem; }
        .payer-avatar {
            width: 32px; height: 32px; border-radius: 50%;
            background-color: var(--bg-tertiary);
            display: flex; justify-content: center; align-items: center;
            font-weight: 600; color: var(--accent); font-size: 0.9rem;
        }
        .payer-name { font-weight: 500; color: var(--text-dark); }
        .payer-value { font-weight: 600; color: var(--success); }
        .empty-payers { padding: 1rem; text-align: center; color: var(--text-muted-dark); }

        /* --- Formulário e QR Code --- */
        .form-group { margin-bottom: 1rem; }
        .form-group label { display: block; font-size: 0.9rem; margin-bottom: 0.5rem; font-weight: 500; }
        input[type="text"], input[type="number"] {
            width: 100%; padding: 0.9rem; font-size: 1rem;
            font-family: var(--font-sans); color: var(--text-dark);
            background: var(--bg-light); border: 1px solid var(--border-light);
            border-radius: 8px; transition: all 0.2s ease;
        }
        input[type="text"]:focus, input[type="number"]:focus {
            outline: none; border-color: var(--accent);
            box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
        }
        .btn {
            background: var(--accent); color: white;
            font-size: 1rem; font-weight: 600; padding: 1rem;
            width: 100%; border: none; border-radius: 8px; cursor: pointer;
            display: flex; align-items: center; justify-content: center;
            gap: 0.75rem; margin-top: 1rem;
            transition: all 0.3s var(--ease-out-expo);
        }
        .btn:hover { transform: translateY(-2px); box-shadow: 0 8px 20px rgba(0, 102, 204, 0.2); }
        .btn:disabled { background: var(--text-muted-dark); cursor: not-allowed; transform: none; box-shadow: none; }
        .loader { width: 18px; height: 18px; border: 2px solid rgba(255, 255, 255, 0.5); border-top-color: #fff; border-radius: 50%; animation: spin 1s linear infinite; }
        .error-message { color: var(--danger); font-size: 0.9rem; margin-top: 0.5rem; min-height: 1.5rem; text-align: left; }

        #qrWrapper { text-align: center; }
        #qrCodeContainer { display: flex; justify-content: center; margin: 1.5rem 0; }
        #qrCodeContainer canvas, #qrCodeContainer img { border-radius: 16px; border: 1px solid var(--border-light); }
        .pix-key-wrapper { display: flex; background-color: var(--bg-light); border: 1px solid var(--border-light); border-radius: 8px; padding: 0.25rem; align-items: center; margin-top: 1.5rem; }
        .pix-key-wrapper input { flex-grow: 1; border: none; background: transparent; color: var(--text-muted-dark); font-size: 0.9rem; outline: none; padding: 0.5rem; }
        .copy-btn { background: var(--accent); color: white; border: none; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; font-weight: 500; transition: background-color 0.2s; }
        .copy-btn:hover { background-color: var(--accent-hover); }
        .btn-link { background: none; border: none; color: var(--accent); font-size: 0.9rem; font-weight: 500; cursor: pointer; margin-top: 1.5rem; padding: 0.5rem; }
        .btn-link:hover { text-decoration: underline; }
        
        .paid-message-wrapper .icon { font-size: 3rem; color: var(--success); margin-bottom: 1rem; }

        /* --- Animações --- */
        @keyframes spin { to { transform: rotate(360deg); } }
        @keyframes fade-in-up { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
        @keyframes slide-in-item { from { opacity: 0; transform: translateX(-20px); } to { opacity: 1; transform: translateX(0); } }

        /* --- Responsividade --- */
        @media (max-width: 992px) {
            .main-container {
                padding: 1rem;
            }
            .payment-dashboard {
                grid-template-columns: 1fr;
                padding: 1.5rem;
            }
            .action-pane {
                margin-top: 2rem;
            }
            .header-info .title {
                font-size: 1.75rem;
            }
        }
    </style>
</head>
<body>
    <div class="gradient-bg">
        <div class="gradient-blob blob1"></div>
        <div class="gradient-blob blob2"></div>
        <div class="gradient-blob blob3"></div>
    </div>

    <div class="main-container">
        <div class="payment-dashboard">
            <div class="context-pane">
                <header class="header-info">
                    <a href="/" class="logo">pag<span>junto</span></a>
                    <h1 class="title">Vaquinha de <%= orderData.name %></h1>
                    <p class="subtitle">Acompanhe o progresso e faça sua contribuição.</p>
                </header>
    
                <div class="progress-container">
                    <svg class="progress-ring" width="250" height="250" viewBox="0 0 120 120">
                        <circle class="progress-ring-bg" stroke-width="8" fill="transparent" r="52" cx="60" cy="60"/>
                        <circle id="progressRing" class="progress-ring-fg" stroke-width="8" stroke-linecap="round" fill="transparent" r="52" cx="60" cy="60"/>
                    </svg>
                    <div class="progress-info">
                        <div class="label">Arrecadado</div>
                        <div id="paidValueSpan" class="paid-value">R$ 0,00</div>
                        <div id="totalValueSpan" class="total-value">de R$ 0,00</div>
                    </div>
                </div>
    
                <div class="payers-list-container">
                    <h3>Quem já pagou (<span id="payersCount">0</span>)</h3>
                    <div class="payers-list" id="payersList">
                        <% if (!orderData.payersNames || orderData.payersNames.length === 0) { %>
                            <div class="empty-payers">Nenhum pagamento recebido ainda.</div>
                        <% } %>
                    </div>
                </div>
            </div>

            <div class="action-pane" id="actionPane">
                <% if (orderData.paidValue >= orderData.totalValue) { %>
                    <div class="paid-message-wrapper">
                        <div class="icon"><i class="fas fa-check-circle"></i></div>
                        <h2 class="action-title">Cobrança Finalizada</h2>
                        <p class="action-subtitle">Este pagamento já foi totalmente concluído. Obrigado!</p>
                    </div>
                <% } else { %>
                    <div class="form-wrapper" id="formWrapper">
                        <h2 class="action-title">Sua vez de contribuir</h2>
                        <p class="action-subtitle">Preencha os dados para gerar o seu QR Code Pix.</p>
                        <form id="paymentForm" novalidate>
                            <div class="form-group">
                                <label for="name">Seu Nome</label>
                                <input type="text" id="name" required placeholder="Nome Sobrenome" />
                            </div>
                            <div class="form-group">
                                <label for="valor">Valor (R$)</label>
                                <input type="number" id="valor" inputmode="decimal" required placeholder="0,00" />
                            </div>
                            <div id="errorMessage" class="error-message"></div>
                            <button type="submit" id="generateBtn" class="btn">
                                <span id="btnText">Gerar QR Code</span>
                                <div id="loader" class="loader" style="display: none;"></div>
                            </button>
                        </form>
                    </div>
                    <div class="qr-wrapper" id="qrWrapper" style="display: none;"></div>
                <% } %>
            </div>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function () {
        // --- Estado Global a partir dos dados do servidor ---
        const TOTAL_VALUE = <%= orderData.totalValue %>;
        let currentPaidValue = <%= orderData.paidValue %>;
        let payers = [
            <% if (orderData.payersNames && orderData.payersNames.length > 0) { %>
                <% for (let i = 0; i < orderData.payersNames.length; i++) { %>
                    { name: '<%= orderData.payersNames[i] %>', value: <%= orderData.payersValues[i] %> }
                    <%= i < orderData.payersNames.length - 1 ? ',' : '' %>
                <% } %>
            <% } %>
        ];

        // --- Seletores de Elementos ---
        const progressRing = document.getElementById('progressRing');
        const paidValueSpan = document.getElementById('paidValueSpan');
        const totalValueSpan = document.getElementById('totalValueSpan');
        const payersList = document.getElementById('payersList');
        const payersCount = document.getElementById('payersCount');
        const actionPane = document.getElementById('actionPane');
        
        // --- Funções de UI ---
        const showPaidState = () => {
            if (!actionPane) return;
            actionPane.innerHTML = `
                <div class="paid-message-wrapper" style="text-align: center;">
                    <div class="icon"><i class="fas fa-check-circle"></i></div>
                    <h2 class="action-title">Cobrança Finalizada</h2>
                    <p class="action-subtitle">Este pagamento já foi totalmente concluído. Obrigado!</p>
                </div>
            `;
        };
        
        const updateProgress = (paid, total) => {
            const percentage = total > 0 ? (paid / total) : 0;
            const radius = progressRing.r.baseVal.value;
            const circumference = 2 * Math.PI * radius;
            progressRing.style.strokeDasharray = `${circumference} ${circumference}`;
            progressRing.style.strokeDashoffset = circumference - percentage * circumference;
            paidValueSpan.textContent = `R$ ${paid.toFixed(2).replace('.', ',')}`;
            totalValueSpan.textContent = `de R$ ${total.toFixed(2).replace('.', ',')}`;
            if (paid >= total) {
                progressRing.style.stroke = 'var(--success)';
                showPaidState();
            }
        };

        const addPayerToList = (payer, animate = true) => {
            document.querySelector('.empty-payers')?.remove();
            const item = document.createElement('div');
            item.className = 'payer-item';
            if (!animate) item.style.animation = 'none';
            item.innerHTML = `
                <div class="payer-info">
                    <div class="payer-avatar">${payer.name.charAt(0).toUpperCase()}</div>
                    <span class="payer-name">${payer.name}</span>
                </div>
                <span class="payer-value">R$ ${payer.value.toFixed(2).replace('.', ',')}</span>
            `;
            payersList.appendChild(item);
            item.scrollIntoView({ behavior: 'smooth', block: 'end' });
        };
        
        const renderInitialPayers = () => {
            if (payers && payers.length > 0) {
                payers.forEach(p => addPayerToList(p, false));
                payersCount.textContent = payers.length;
            }
        };

        // --- Lógica do Formulário e Pagamento ---
        const paymentForm = document.getElementById('paymentForm');
        if (paymentForm) {
            const nameInput = document.getElementById('name');
            const valueInput = document.getElementById('valor');
            const generateBtn = document.getElementById('generateBtn');
            const btnText = document.getElementById('btnText');
            const loader = document.getElementById('loader');
            const errorMessage = document.getElementById('errorMessage');
            const formWrapper = document.getElementById('formWrapper');
            const qrWrapper = document.getElementById('qrWrapper');

            paymentForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                errorMessage.textContent = '';
                const remainingValue = TOTAL_VALUE - currentPaidValue;
                const valorFloat = parseFloat(valueInput.value.replace(',', '.'));
                if (!nameInput.value.trim()) return errorMessage.textContent = "Por favor, informe seu nome.";
                if (isNaN(valorFloat) || valorFloat <= 0) return errorMessage.textContent = "Insira um valor de pagamento válido.";
                if (valorFloat > remainingValue + 0.001) return errorMessage.textContent = `O valor excede o restante (R$ ${remainingValue.toFixed(2).replace('.',',')}).`;
                
                generateBtn.disabled = true;
                btnText.textContent = '';
                loader.style.display = 'block';

                try {
                    const id2 = window.location.pathname.split('/').filter(Boolean).pop();
                    const response = await fetch(`<%=process.env.API_SITE_URL%>/payment/create-pix`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            name: nameInput.value.trim(),
                            amount: Math.round(valorFloat * 100),
                            orderId: id2
                        })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.error || 'Erro ao gerar QR Code.');
                    displayQrCode(data.data.last_transaction.qr_code, data.data.last_transaction.qr_code);
                } catch (error) {
                    errorMessage.textContent = `Erro: ${error.message}`;
                } finally {
                    generateBtn.disabled = false;
                    btnText.textContent = 'Gerar QR Code';
                    loader.style.display = 'none';
                }
            });
        
            const displayQrCode = (qrCodeData, pixKey) => {
                formWrapper.style.display = 'none';
                qrWrapper.style.display = 'block';
                qrWrapper.innerHTML = `
                    <h2 class="action-title">Escaneie para pagar</h2>
                    <p class="action-subtitle">Use o app do seu banco para ler o QR Code.</p>
                    <div id="qrCodeContainer"></div>
                    <div class="pix-key-wrapper">
                        <input type="text" readonly value="${pixKey}" />
                        <button class="copy-btn" id="qrCopyBtn">Copiar</button>
                    </div>
                    <button class="btn-link" id="backToFormBtn">Alterar valor ou dados</button>
                `;
                
                new QRCode(document.getElementById("qrCodeContainer"), {
                    text: qrCodeData,
                    width: 220,
                    height: 220,
                });

                document.getElementById('qrCopyBtn').addEventListener('click', (e) => {
                    navigator.clipboard.writeText(pixKey).then(() => {
                        e.target.textContent = 'Copiado!';
                        setTimeout(() => { e.target.textContent = 'Copiar'; }, 2000);
                    });
                });
                
                document.getElementById('backToFormBtn').addEventListener('click', () => {
                    formWrapper.style.display = 'block';
                    qrWrapper.style.display = 'none';
                });
            };
        }
        
        const initializeSocket = () => {
            try {
                const id2 = window.location.pathname.split('/').filter(Boolean).pop();
                const socket = io("<%=process.env.API_SITE_URL_BASE%>", { transports: ['websocket', 'polling'] });

                socket.on('connect', () => {
                    socket.emit('joinRoom', id2);
                });

                socket.on('paymentConfirmed', data => {
                    if (!data || !data.payerName || typeof data.paidValue !== 'number') return;
                    
                    confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } });
                    
                    const paymentAmount = data.paidValue;
                    currentPaidValue += paymentAmount;
                    
                    addPayerToList({ name: data.payerName, value: paymentAmount });
                    payersCount.textContent = parseInt(payersCount.textContent) + 1;
                    updateProgress(currentPaidValue, TOTAL_VALUE);

                    const formWrapper = document.getElementById('formWrapper');
                    const qrWrapper = document.getElementById('qrWrapper');
                    if (qrWrapper && qrWrapper.style.display === 'block') {
                        formWrapper.style.display = 'block';
                        qrWrapper.style.display = 'none';
                    }
                });
            } catch (error) { 
                console.error("Socket connection failed:", error);
            }
        };

        // --- Inicialização da Página ---
        updateProgress(currentPaidValue, TOTAL_VALUE);
        renderInitialPayers();
        initializeSocket();
    });
    </script>
</body>
</html>
